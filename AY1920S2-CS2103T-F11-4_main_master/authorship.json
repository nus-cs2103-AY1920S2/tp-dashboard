[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d Cooking Papa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://travis-ci.org/AY1920S2-CS2103T-F11-4/main[image:https://travis-ci.org/AY1920S2-CS2103T-F11-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://ci.appveyor.com/project/teo-jun-xiong/main[image:https://ci.appveyor.com/api/projects/status/mkams6irqolkr5gp?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://coveralls.io/github/AY1920S2-CS2103T-F11-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S2-CS2103T-F11-4/main/badge.svg?branch\u003dmaster[Coverage status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://www.codacy.com/gh/AY1920S2-CS2103T-F11-4/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dAY1920S2-CS2103T-F11-4/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/aab1eba3906e4891a63020b0756e89f8[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "* Cooking Papa is a desktop application that makes cooking at home easier."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Cooking Papa provides a cookbook for users to search and add recipes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "It also allows users to manage their ingredient inventory and shopping list with ease."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "* Target users are those who are interested to cook at home but finds it hard to"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "manage their ingredients inventory and shopping list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "* This application was built on the excellent AddressBook-Level3 project created by link:https://se-education.org[SE-EDU] initiative."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/FasterXML/jackson[Jackson],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/junit-team/junit5[JUnit5],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://commons.apache.org/proper/commons-math/[Apache Commons Math],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://pdfbox.apache.org/[Apache PDFBox]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 11,
      "shanecsj": 5,
      "-": 23
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    compile group: \u0027org.apache.commons\u0027, name: \u0027commons-math3\u0027, version: \u00273.6.1\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    compile \u0027org.apache.pdfbox:pdfbox:2.0.19\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    archiveName \u003d \u0027cookingpapa.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        \u0027site-name\u0027: \u0027CookingPapa\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F11-4/main\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "gohkh": 5,
      "teo-jun-xiong": 1,
      "-": 152
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Chan Shun Jie"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "image::shanecsj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "{empty}[https://github.com/shanecsj[github]] [\u003c\u003cshanecsj#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Goh Ka Hui"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "image::gohkh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "{empty}[http://github.com/gohkh[github]] [\u003c\u003cgohkh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Ong Han Sheng"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "image::hans555.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "{empty}[http://github.com/hans555[github]] [\u003c\u003chans555#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Data"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Tay Zi Hiang Willis"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "image::tzihiang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "{empty}[http://github.com/tzihiang[github]] [\u003c\u003ctzihiang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Teo Jun Xiong"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::teo-jun-xiong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "{empty}[http://github.com/teo-jun-xiong[github]] [\u003c\u003cteo-jun-xiong#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "gohkh": 4,
      "teo-jun-xiong": 7,
      "shanecsj": 4,
      "hans555": 2,
      "-": 34,
      "tzihiang": 3
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* *Bug reports / Suggestions* : Post in our https://github.com/AY1920S2-CS2103T-F11-4/main/issues[issue tracker] if you notice bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]."
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d Cooking Papa - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-F11-4/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "By: `AY1920S2-CS2103T-F11-4`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".Architecture diagram"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: Controls the user interface of the App."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: Executes the commands of the App."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".Class diagram of the Logic component"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `cookbook remove recipe 2`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ".Component interactions for `cookbook remove recipe 2` command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d UI component https://github.com/teo-jun-xiong[(by Teo Jun Xiong)]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "//tag::ui[]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "The UI consists of a `MainWindow` that is made up of several UI parts: `CommandBox`, `ResultDisplay`,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "`CookbookPanel`,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "`RecipeCard`, `InventoryPanel`, `CartPanel`, `IngredientCard`,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "`StatusBarFooter`. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "//end::ui[]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "// tag::gohkh[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d Logic component https://github.com/gohkh[(by Goh Ka Hui)]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".Structure of the Logic component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ".  `Logic` uses the `CookingPapaParser` class to parse the user command."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a recipe)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"cookbook remove recipe 2\")` API call."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".Interactions inside the Logic component for the `cookbook remove recipe 2` command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "image::CookbookRemoveRecipeSequenceDiagram.png[]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d Model component https://github.com/gohkh[(by Goh Ka Hui)]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".Structure of the Model component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "* stores the Cookbook data."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cRecipe\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* stores the Inventory and Cart data."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cRecipe\u003e` each for both Inventory and Cart, that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Cookbook`, which `Recipe` can reference. This would allow `Cookbook` to only require one `Tag` object per unique `Tag`, instead of each `Recipe` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d Storage component https://github.com/gohkh[(by Goh Ka Hui)]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".Structure of the Storage component"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* can save `Cookbook` data in json format and read it back."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* can save `Inventory` data in json format and read it back."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* can save `Cart` data in json format and read it back."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "// end::gohkh[]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Add recipe to the cookbook https://github.com/teo-jun-xiong[(by Teo Jun Xiong)]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "The recipe addition mechanism is facilitated by `CookbookAddCommand`, which extends the `Command` abstract class. The"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "format of the command is as follows: `cookbook add recipe n/NAME d/DESCRIPTION [i/INGREDIENT]... [q/QUANTITY]... [t/TAG]...`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "This command is implemented this way  to allow a user to add a recipe with optional fields (ingredients, steps, tags) -"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "only the recipe name and recipe description are mandatory fields. This way, a user does not have input all the fields"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "that they may not have at the moment to create a recipe. After creating the skeleton of the recipe, the user can then"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "use the other `Cookbook` commands to add ingredients and steps to the recipe. However, one key point is that should"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "ingredient names be provided, the same number of ingredient quantities have to be provided as well."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "// tag::addrecipe[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Below is a step by step sequence of what happens when a user enters this command:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". The user enters a recipe adding command using the command line input `cookbook add recipe n/NAME d/DESCRIPTION"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "[i/INGREDIENT]... [q/QUANTITY]... [s/STEP_DESCRIPTION]... [t/TAG]...`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". `CookingPapaParser` parses the user input and checks if it is valid. If it is invalid, i.e. an unknown command"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "category, a `ParseException` will be thrown. If the input is valid, with the command category `cookbook`, a new"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "`CookbookCommandParser` is created."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". `CookbookCommandParser` then parses `add recipe n/NAME d/DESCRIPTION [i/INGREDIENT]... [q/QUANTITY]..."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "[s/STEP_DESCRIPTION]... [t/TAG]...`. If it is invalid, i.e. an unknown command word, a `ParseException` will be"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "thrown. If the input is valid, with the command word `add`, a new `CookbookAddCommandParser` is created."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".  `CookbookAddCommandParser` parses `recipe n/NAME d/DESCRIPTION [i/INGREDIENT]... [q/QUANTITY]..."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "[s/STEP_DESCRIPTION]... [t/TAG]...` and checks if `n/NAME` and `d/DESCRIPTION` are provided. If either are not"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "provided, then a `ParseException` will be thrown."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "It then"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "parses the input into the following fields: recipe name, recipe description, ingredients, steps, and tags."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Note that"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the ingredient names and ingredient quantities provided must be the same, or a `ParseException` will be thrown:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "if (names.size() !\u003d quantities.size()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    throw new ParseException("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        String.format(MESSAGE_DIFFERENT_NUMBER_OF_INPUTS, names.size(), quantities.size()));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "{blank}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". These fields are then passed as parameters for `Recipe`, which is then passed as the parameter for"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "`CookbookAddCommand` and returned to `LogicManager`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". `LogicManager` calls `CookbookAddCommand#execute()` which checks if the cookbook already contains the same recipe with the same name, description, ingredient names, ingredient quantities, and tags using `Model#hasCookbookRecipe()`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "If there is a duplicate, a `CommandException` is thrown, stating that the user is attempting to add a duplicate recipe:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "if (model.hasCookbookRecipe(toAdd)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". If `CommandException` is not thrown, `Model#addCookbookRecipe` will be executed, with the recipe to be added as a parameter."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". `Model#addCookbookRecipe()` then executes `Cookbook#addRecipe()`, which adds the recipe to the cookbook, and the"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "`FilteredList\u003cRecipe\u003e` representing the recipes in the cookbook are updated with `Model#updateFilteredCookbookRecipeList()`:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "where `PREDICATE_SHOW_ALL_RECIPES \u003d unused -\u003e true`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". A `CommandResult` with the text to display to the user is then returned to `LogicManager`, which can passed back to"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "`MainWindow`, which displays it to the user on the CLI and GUI: `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser())`. The text displayed will notify the user on whether"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "their addition was successful."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "// end::addrecipe[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "The following `Recipe` object diagram is an overview of the attributes of a `Recipe` object:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".UML object diagram of Recipe providing an overview on how the various objects interact"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::RecipeObjectDiagram.png[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "// tag::addrecipesequence[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "The following sequence diagram shows how the recipe adding function works (full command [`cookbook add recipe"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                                                                          n/Recipe name d/Recipe"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                                                                          description i/Ingredient 1"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                                                                          q/1 piece i/Ingredient 2"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                                                                          q/20 ml s/Do step 1 s/Do"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                                                                          step 2 t/This t/Is t/A"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                                                                          t/Tag`]  omitted from diagram"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "for brevity):"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".Sequence diagram for CookbookAddCommand"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::CookbookAddRecipeSequenceDiagram.png[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "The following activity diagram shows a possible flow of events for a user using this feature:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".Activity diagram for CookbookAddCommand"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::CookbookAddActivityDiagram.png[]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "// end::addrecipesequence[]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "// tag::addrecipedesign[]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 1: How to parse optional parameters"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".Design considerations for parsing optional parameters"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "[cols\u003d\"16%,42%,42%\"]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "||Design A (current choice): Parse each category separately  | Design B: Parse all the categories together"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Description"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Each category (ingredient name, ingredient quantity, step description, tag) are parsed separately and returned as"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "`List`. If the returned `List` is empty, then it means that that field was not provided in the input, and will be set"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "to an empty `List` in the recipe e.g., no ingredients were provided in the command."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Each category will be parsed together in one function in `CookbookAddCommandParser`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Pros"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a|"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Provides more flexibility for the user and does not make it mandatory to input fields that they may not necessarily"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "have."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- No need to deal with null values, can simply check if list is empty."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a|"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Straightforward"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- No need to create and call multiple methods from other classes"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Cons"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a|"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- More methods have to be executed which may increase time and NPath complexity."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Debugging and tracing becomes more confusing due to the method being defined in the lowest level of abstraction."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a|"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Have to deal with null values and include null checks (`ifPresent()` etc.)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Method will be very long and decreases readability"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Design A was chosen because it was more user-friendly, and removed the restriction of having to include ingredients,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "steps, and tags at the stage of recipe creation, some of which the user may not have at the moment, i.e."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "experimenting with different ingredients. Additionally, design A allowed us to be more modular while coding."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".Design considerations for results to show users"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 2: Result to show user"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "[cols\u003d\"16%,42%,42%\"]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "||Design A (current choice): Show a short result on the success of the command | Design B: Show all the details back to"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the user"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Description|Show a message to a usage which notifies them that the command was successful in adding the recipe to"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the cookbook. | Shows a message similar to design choice A, and also show all the details of the added recipe."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Pros"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a|"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Short and succinct message, tells the user what they need to know"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- User interface is cleaner and more intuitive, and does not overload users with unnecessary information"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a|"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Easier to implement"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Cons"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a|"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Requires the graphical user interface to be able to toggle and show recipes, without the need for a command,"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "implemented here:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::CookbookAddRecipe3.png[]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a|"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Overloads the user with unnecessary information"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Requires result display to take up more space than required, to reduce the need for users to scroll down the result"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "display."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Design A was chosen because it did not reuse the same component for multiple uses. Additionally, it allows us to"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "reduce the size of result display, as most of the time, it displays only a short message displaying the success of a"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "command."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "//end::addrecipedesign[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d View recipe in the cookbook https://github.com/teo-jun-xiong[(by Teo Jun Xiong)]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "The user may use this command to view a recipe in the cookbook. This command is integrated into the Graphical User"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Interface"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "(GUI) through a button."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "The recipe viewing mechanism (via the command line input) is facilitated by `CookbookViewCommand`, which extends the"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "`Command` abstract class. The format is as follows: `cookbook view recipe INDEX`, which index has to be a valid"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "integer that is not out of bounds."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "The recipe viewing mechanism (via the GUI) is facilitated by `RecipeCard`, which extends the `UiPart` abstract class."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "It is triggered upon clicking the \"view\" icon in the recipe panel:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::CookbookAddRecipe3.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Implementing this function, `cookbook view recipe` through a button in the GUI allows user to view the details of a"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "recipe with a click of a button, greatly increasing convenience and user experience. The button also had to be"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\"activated\" without the"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "button,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "as"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the command still had"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "to be testable through the command line."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "//tag::viewrecipe[]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Below is a step by step sequence of what happens when a user enters this command:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". The user enters a view recipe command using the command line input `cookbook view recipe INDEX`."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". `CookingPapaParser` parses the user input and checks if it is valid. If it is invalid, i.e. an unknown command"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "category, a `ParseException` will be thrown. If the input is valid, with the command category `cookbook`, a new"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "`CookbookCommandParser` is created."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". `CookbookCommandParser` then parses `view recipe INDEX`. If it is invalid, i.e. an unknown command word, a"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                       `ParseException` will be"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "thrown. If the input is valid, with the command category `view`, a new `CookbookViewCommandParser` is created."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". `CookbookViewCommandParser` then parses `recipe INDEX` and checks if the `String` contains \"recipe\", and an index."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "If either are absent, a `ParseException` will be thrown. If the `String` is valid, a `CookbookView` is created."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". `CookbookViewCommandParser` then returns a `CookbookViewCommand` to `LogicManager`."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". `LogicManager` calls `CookbookViewCommand#execute()` which checks if the provided `Index` is within the bounds of"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the `FilteredCookbookRecipeList()` in `Cookbook`, i.e. `index.getZeroBased() \u003e\u003d list.size()`. If it is not, a"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "`CommandException` will be thrown. If it is valid, a `CommandResult` is created with a boolean value `true`."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". A `CommandResult` with the text to display to the user will be returned to `LogicManager`. The `CommandResult` is"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "then passed back to `MainWindow`. The boolean value stated in step 6 determines whether a successfully parsed command"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "is a `cookbook view recipe INDEX` command."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". `MainWindow#handleViewRecipe` is then executed, which creates a new `CookbookPanel` with the same set of data,"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "calling `CookbookPanel#handleViewRecipe`, which creates new `RecipeCard` s for `Cookbook`, and for the `RecipeCard`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "that has an index equal to the index processed from the user\u0027s input, it will create a `RecipeCard` that toggles open"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the recipe details. More on how the `RecipeCard` manages this will be discussed in the following section on how"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "clicking on a button in the GUI has the same effect as the `cookbook view recipe INDEX` command."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". Lastly, the user then is shown a `CookbookPanel` with the selected recipe toggled open, which displays the full"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "details"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "of that recipe:"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::CookbookViewExample2.png[]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Below is a step by step sequence of what happens when a user clicks the button on the GUI:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". When the button is pressed, the onAction method, `RecipeCard#handleViewButtonAction()` is executed. A `RecipeCard`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "has a variable `isFullyDisplayed`, which indicates whether it is displaying an overview of the recipe, or"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "fully displaying details of the recipe."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". If `isFullyDisplayed` is false, i.e. the `RecipeCard` is currently displaying an overview of the recipe,"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "`RecipeCard#displayRecipeComplete()` is executed, which replaces the text displayed by the FXML object, `Label`, with"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the full details of the recipe."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". If `isFullyDisplayed` is true, i.e. the `RecipeCard` is currently fully displaying the details of the recipe,"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "`RecipeCard#displayRecipeOverview()` is executed, which replaces the text displayed by the FXML object, `Label` with"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the overview of the recipe."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". Both methods executed in step 3 and 4 will flip the boolean value of `isFullyDisplayed`, and this means that the"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "next time the button for the same recipe is clicked, it toggles back. For example, if a recipe with its overview"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "shown has its view button clicked, it will show the full details of the recipe. If the button is clicked again, it"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "toggles, and shows the overview of the recipe."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "This feature is not reflected with `cookbook view recipe INDEX` when it is entered again in the command line, because"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the function of the command is to view a recipe, not to \"un-view\" it."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "//end::viewrecipe[]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "//tag::viewrecipesequence[]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "The following sequence diagram shows how the recipe viewing function interacts between the classes in `Logic`:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::CookbookViewSequenceDiagram.png[]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "The following sequence diagram shows how the recipe viewing function interacts between the classes in `Ui`:"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "gohkh"
        },
        "content": "image::CookbookViewSequenceDiagram2.png[]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "//end::viewrecipesequence[]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Aspect: what UI component to display the toggled content"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".Design considerations for the UI component to display the toggled content"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "[cols\u003d\"16%,42%,42%\"]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "||Design A (current choice): toggles the content in the recipe panel|Design B: add a new UI component that pops up, i"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".e. overlay"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Description|The content in the recipe panel can freely switch from overview to full details of a recipe.|A UI"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "component appears as a small overlay, displaying the details of a recipe. The overlay can then be \"exited\" by clicking"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "on"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "an area within the application that is outside of the overlay."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Pros"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a|"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Intuitive that clicking the button once more should return to the previous state"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Increases functionality of the GUI, rather than just a \"skin\""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| No need to interact between various UI components, as much as design A"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Cons|There is a need to keep track of the state of a `RecipeCard`, which means more constructors and conditional"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "statements to implement."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Difficult to implement as it includes creating an entirely new component (overlay) with different features than the"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "existing one. The effort estimated did not seem to be worth, as the use is limited to just this command."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Design A was chosen because it made the GUI more functional, and less complicated to implement in terms of connecting"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the various `UiPart` s."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "gohkh"
        },
        "content": "// tag::gohkh[]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d Search for recipes based on ingredients in the inventory https://github.com/gohkh[(by Goh Ka Hui)]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "gohkh"
        },
        "content": "The user may use this command to search for recipes that they can cook using the ingredients available in their"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "gohkh"
        },
        "content": "inventory. This feature was implemented to address users\u0027 need of easily finding a recipe based on the ingredients they have."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "gohkh"
        },
        "content": "With this feature, users can whip up a meal without having to go grocery shopping if they are short of time. This feature sorts"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "gohkh"
        },
        "content": "recipes by how much the inventory fulfils their ingredient requirements, and filters out recipes whose ingredient"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "gohkh"
        },
        "content": "requirements are not met at all. Users can immediately see at the top of the cookbook the recipes that their ingredients"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "gohkh"
        },
        "content": "are most suitable for preparing. A user can use this feature by typing the command: `cookbook search inventory`."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "gohkh"
        },
        "content": "The comparison between the ingredients a recipe requires and the ingredients in the inventory is facilitated by the"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`RecipeInventoryIngredientsSimilarityComparator`. It extends `Comparator\u003cRecipe\u003e` and stores the inventory being used"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "gohkh"
        },
        "content": "for ingredient comparison. Additionally, it implements the method `calculateSimilarity()`, which accepts a `Recipe` and"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a `ReadOnlyInventory` as parameters, and returns a double value between 0 and 1 (both inclusive) that represents the"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "gohkh"
        },
        "content": "proportion of the recipe\u0027s ingredient requirements that are fulfilled."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "gohkh"
        },
        "content": "The following class diagram summarizes how the `RecipeInventoryIngredientsSimilarityComparator` interacts with `Recipe`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "gohkh"
        },
        "content": "and `Inventory`:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".Class diagram for RecipeInventoryIngredientsSimilarityComparator"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "gohkh"
        },
        "content": "image::CookbookSearchByInventoryClassDiagram.png[]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "gohkh"
        },
        "content": "The `calculateSimilarity()` method first calculates the proportion of ingredient quantity fulfilled by the inventory"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "gohkh"
        },
        "content": "for each ingredient that the recipe requires. For example, if one of the ingredients required by a recipe is `4 eggs`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "gohkh"
        },
        "content": "and the inventory contains `2 eggs`, the proportion fulfilled for this particular ingredient is `0.5`. This is done for"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "gohkh"
        },
        "content": "all the ingredients in the recipe. If the units of an ingredient in the recipe does not match that of the same"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "gohkh"
        },
        "content": "ingredient in the inventory, the proportion will be set at `0.5` by default. An example is when the recipe requires"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`1 cup flour` and the inventory contains `200 g flour`."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "gohkh"
        },
        "content": "When the proportion fulfilled has been calculated for each ingredient, the values for each ingredient are summed up and"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "gohkh"
        },
        "content": "divided by the number of ingredients to obtain the average. In the case where the recipe does not have any ingredients"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "gohkh"
        },
        "content": "added to it yet, the `calculateSimilarity()` method will return `0`, indicating no similarity to the inventory"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "gohkh"
        },
        "content": "ingredients. This is because it is likely that recipes with no ingredients have just been added by the user, and the"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "gohkh"
        },
        "content": "ingredients have not been added yet. If the user is using this feature to search for a recipe to cook, they would"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "gohkh"
        },
        "content": "probably not be interested in seeing a recipe that they have not added ingredients for yet. This is implemented via"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "gohkh"
        },
        "content": "a guard clause as shown in the following code snippet:"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "gohkh"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "gohkh"
        },
        "content": "----"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "gohkh"
        },
        "content": "if (recipe.getIngredients().size() \u003d\u003d NO_INGREDIENTS) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    return ZERO_SIMILARITY;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "gohkh"
        },
        "content": "----"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "The following activity diagram shows a possible flow of events for a user using this feature:"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".Activity diagram for the `cookbook search inventory` command"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "gohkh"
        },
        "content": "image::CookbookSearchByInventoryActivityDiagram.png[]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "gohkh"
        },
        "content": "The following sequence diagram summarizes how objects interact when a user executes the command,"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "gohkh"
        },
        "content": "with more focus on how the command is parsed in the `Logic`component:"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".Sequence diagram for CookbookSearchByInventoryCommand"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "gohkh"
        },
        "content": "image::CookbookSearchByInventorySequenceDiagram.png[]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 1: Weighting of each ingredient"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".Design considerations for weighing of each ingredient"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "gohkh"
        },
        "content": "[cols\u003d\"12%,44%,44%\"]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| |Design A (Current choice): Every ingredient is weighted equally | Design B: More important ingredients are given a larger weigting"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| Description"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| The similarity of a recipe\u0027s ingredients to an inventory\u0027s ingredients is calculated by taking the mean of the proportions calculated for each ingredient,"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "gohkh"
        },
        "content": "with equal weighting given to all ingredients."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|The similarity of a recipe\u0027s ingredients to an inventory\u0027s ingredients is calculated by taking the weighted mean of the proportions calculated for each ingredient,"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "gohkh"
        },
        "content": "with larger weightings given to more important ingredients ingredients."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| Pros"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| Gives a good rough estimate of the proportion of ingredient requirements fulfilled for a recipe, and straightforward to implement."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| May give a better gauge of the proportion of ingredient requirements fulfilled for a recipe, by accounting for the importance of the ingredient."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "gohkh"
        },
        "content": "For example, beef would be an important ingredient for a steak recipe, but garnishes might be considered less important as they can be substituted more easily."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| Cons"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| Does not account for the importance of the ingredient in the recipe"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| Difficult to judge the importance of the ingredient, and complicated to implement categorisation of the types ingredients and their relative importance."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Design A was chosen as it provided a fair estimate of the similarity between the recipe and inventory ingredients, with a simple implementation."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "gohkh"
        },
        "content": "The cons for Design B were deemed to outweigh the pros, especially since the importance of an ingredient in a recipe could be rather subjective."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 2: Handling ingredients with different units"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".Design consideration for handling ingredients with different units"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "gohkh"
        },
        "content": "[cols\u003d\"12%,44%,44%\"]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| |Design A (Current choice): Use a default similarity value of `0.5` | Design B: Convert the units"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| Description"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| The similarity value of an ingredient with different units in the recipe and the inventory is treated as `0.5`."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| The similarity value of an ingredient with different units in the recipe and the inventory is calculated by converting the units,"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "gohkh"
        },
        "content": "such that the proportion of the recipe ingredient in the inventory can be determined."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| Pros"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| Simple to implement."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| Able to calculate the proportion of the recipe ingredient fulfilled by the inventory, even when dealing with different units."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| Cons"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| Unable to calculate the proportion of the recipe ingredient fulfilled by the inventory when dealing with different units, and can only give a fixed default value of `0.5`."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| More complicated to implement as it requires CookingPapa to recognise the units in both the recipe and inventory and be able to convert between them."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Some units such as `cup` may also not have a standard conversion factor."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Design A was chosen due to time constraints, as handling the conversion between different units would take time away from developing other parts of the application."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Given more time, Design B will be implemented to handle conversion for standard units, such as between `g` and `kg`, but Design A would still have to be used for units with non-standard conversion factors."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "gohkh"
        },
        "content": "// end::gohkh[]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Add ingredients to inventory and cart https://github.com/tzihiang[(by Tay Zi Hiang Willis)]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "The inventory and cart acts as storage for `Ingredient` classes. They are facilitated by `InventoryCommand` and `CartCommand`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "respectively, which extends the `Command` abstract class. Since `CartAddCommand` and `InventoryAddCommand` both serve the"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "same purpose in different contexts of `Cart` and `Inventory` respectively, they will be mentioned together in tandem. +"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command was implemented to allow the user know to add an ingredient to the cart or inventory respectively."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "An ingredient only has two main components - its name and quantity. We allow the user to use their own measurement up to their own"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "preferences and do not force any fixed unit of measurement. Although similar, `Cart` and `Ingredients` differ in certain functions"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "from a user\u0027s point of view. For a user to immediately sort where they wish to sort the ingredient they are adding, `Cart` and"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Below is a step-by-step sequence of what happens when the command `cart add ingredient i/INGREDIENT_NAME q/INGREDIENT_QUANTITY` is added."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". The user adds a ingredient to the cart by entering the command `cart  add ingredient i/INGREDIENT_NAME q/INGREDIENT_QUANTITY` in the command line input."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `CartAddCommandParser` parsers the input to check and verify that the input provided for `i/INGREDIENT_NAME` amd `q/INGREDIENT_QUANTITY`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "are correct. Otherwise a `ParseException` will be thrown."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". The fields are then passed to `CartAddIngredientCommand` as an `Ingredient` object and is returned to `LogicManager`."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `LogicManager` calls `CartAddIngredientCommand#execute()` and checks if the `Ingredient` object given has the same `INGREDIENT_NAME` and"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "`INGREDIENT_QUANTITY` unit. If that `Ingredient` exists, it will simply add on to the quantity of that ingredient. Otherwise,"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "a new instance of that `Ingredient` will be added to the Cart."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". If `CommandException` is not thrown, `Model#addCartIngredient` will be executed, with the given `Ingredient` as the parameter"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". `Model#addCartIngredient` then executes, adding the `Ingredient` to the local cart storage and updates with"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "`Model#updateFilteredCartIngredientList()`."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". A `CommandResult` with the successful text message is returned to `LogicManager` and will be displayed to the user via the GUI to feedback to the"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "user that the `Ingredient` has been successfully added."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "The above implementation is the same for `Inventory` with the command `inventory  add ingredient i/INGREDIENT_NAME q/INGREDIENT_QUANTITY`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "The following sequence diagram shows how the function of adding ingredients to cart work (full command omitted for brevity):"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".Sequence diagram for CartAddIngredientCommand"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "image::CartAddIngredientSequenceDiagram.png[]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: The need for many parsers for this command"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".Design considerations for the need for many parsers for this command"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "[cols\u003d\"16%,42%,42%\"]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| |Design A (Current choice): Create parsers for every individual action | Design B: Create parsers for each specific action"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Description"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|The command will go through the parsers in the following order: `CookingPapaParser` -\u003e `CartCommandParser` -\u003e `CartAddCommandParser`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "-\u003e `CartAddIngredientParser` before finally returning `CartAddIngredientCommand`. We eventually went with this as we wanted the add"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "functionality to be expanded, namely to be able to add all the ingredients of cookbook recipes into the cart."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| `CartAddCommand` will not be created to facilitate `CartAddIngredientCommand` and `CartAddRecipeIngredientCommand`."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Pros"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|More organised and can do more with `cart add` as the prefix."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|The classes can be more specific and atomic in their actions."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Cons"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Many parser classes to make and keep track of."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Might lead to disorganisation during troubleshooting with so many classes to keep track."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "//tag::inventorycookrecipe[]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d Remove ingredients of a recipe from the inventory https://github.com/shanecsj[(by Chan Shun Jie)]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "The mechanism is facilitated by `InventoryCookCommand`, which extends the `Command` abstract class. The format of the command is as follows: `inventory cook recipe INDEX`."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command was implemented to allow users to remove multiple ingredients and their quantities found in a recipe from their inventory."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "If the inventory contains an ingredient that has a higher quantity than specified in the selected recipe, its quantity will be subtracted accordingly."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "If the ingredient has a lower quantity than specified in the selected recipe or if there is a missing ingredient in the inventory, the feature will not be executed and an error will be thrown."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Without this command, users can only remove ingredients through the `inventory remove ingredient` command one at a time."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Moreover, they have to constantly cross-check the ingredient quantities in the recipe for accuracy."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Therefore, this command provides convenience after users have prepared a recipe and wish to update their inventory ingredients through a single step."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Below is a step-by-step sequence of what happens when a user enters this command:"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". The user enters an inventory cook command `inventory cook recipe INDEX` using the command line input."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `InventoryCookCommandParser` parses the input to check and verify the input provided by the user. If the input provided is invalid, a `ParseException` will be thrown."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". The valid index is then passed to `InventoryCookCommand` as an `Index` object."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `LogicManager` calls `InventoryCookCommand#execute()` and checks if the `Index` provided is within bounds and if the specified `Recipe` contains ingredients."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Otherwise, a `CommandException` is thrown."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". Subsequently, two checks are performed to check if the inventory contains all of the ingredients specified and whether those quantities are sufficient to be subtracted."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". If all the checks passed, `model#removeInventoryIngredient` is called through a `stream()` to remove the ingredients of a selected recipe from the inventory."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "+"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "----"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "selectedRecipe.getIngredients().stream().forEach(model::removeInventoryIngredient);"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "----"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". A `CommandResult` with a success message is returned to `LogicManager` and passed back to `MainWindow` which displays the text to the user through the GUI."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "The following sequence diagram shows how the command `inventory cook recipe 1` works:"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".Sequence Diagram for InventoryCookCommand"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "image::InventoryCookRecipeSequenceDiagram.png[]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Allowing users to execute the `inventory cook recipe` command when there are missing or insufficient ingredients in the inventory."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".Design considerations for the `inventory cook recipe` command"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "[cols\u003d\"12%,44%,44%\"]"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "||Design A: Allow the execution of `inventory cook recipe` command regardless of missing or insufficient ingredients in the inventory  | Design B (Current choice): Do not allow execution of `inventory cook recipe` command when there are missing or insufficient ingredients in the inventory"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Description"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Allow the users to execute the command regardless of missing or insufficient ingredients in the inventory. Missing ingredients will be ignored and ingredients with insufficient quantities will be entirely removed."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|When there are missing or insufficient ingredients in the inventory, the execution of the command will throw an error to warn users whether they have missing ingredients or insufficient ingredients in their inventory."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Pros"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Straightforward for users to use the command as they do not have to check whether they have all the ingredients in sufficient quantities."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Enhances user experience. The application can notify users that they have missing or insufficient ingredients when they attempt to prepare a recipe through this command."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Cons"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Reduces code readability as more methods and steps are needed to check and isolate a list of missing and insufficient ingredients. This list of ingredients are also to be treated differently from the other ingredients when removing from the inventory."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|A potential hassle for users as they have to ensure that all ingredients are present and are sufficient in their inventory to use the command."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "//end::inventorycookrecipe[]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Move ingredients from cart to inventory https://github.com/tzihiang[(by Tay Zi Hiang Willis)]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "The user may use this command after their shopping trip. With this one command, all ingredients will be shifted from the cart to the inventory."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command is implemented to ease the process of having the user adding every single ingredient to their inventory after they have bought ingredients from their cart"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "and eventually deleting the cart after that tedious process. These gives a convenience to users that frequently use our application and we forsee"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "that such an action will be used very often by these users. As this command only performs an atomic action, no extra"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "arguments are needed to further supplement the use of this command."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command is facilitated by `CartMoveCommand`, which extends the `Command` class. The format of the command is as follows:"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "`cart move`."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Below is a step by step sequence of what happens when the user executes this command."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". The user enters the command `cart move` in to the command line input."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `CartMoveCommandParser` then ensures that the user does not enter any other commands after `cart clear`."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `CartMoveCommandParser` then returns a `CartMoveCommand` and returns it to `LogicManager`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `LogicManager` calls `CartMoveCommand#execute()`. If there are other commands after `cart clear`, a `CommandException`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "will be thrown."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". If `CommandException` is not thrown, `Model#cartMoveIngredients()` will be executed."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `Model#cartMoveIngredients()` will move every ingredient from the `cart` and add it into the `inventory`"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". A `CommandResult` with the success message text will be returned to `LogicManager`, which will then be passed to `MainWindow`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "and will then feedback to the user."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "The following sequence diagram shows how this function works (full command omitted for brevity):"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".Sequence Diagram for CartMoveCommand"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "image::CartMoveSequenceDiagram.png[]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Allowing users to move some or all ingredients from cart to inventory"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".Design considerations for allowing users to move some or all ingredients from cart to inventory"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "[cols\u003d\"16%,42%,42%\"]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| |Design A (Current choice): Move all ingredients | Design B: Allow users to move individually or exclude some ingredients when moving"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Description"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|There was a consideration to allow the user to move the ingredients by individual ingredients. Eventually the options was"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "not given as we know that typical users will want to move all the ingredients except for individual ingredients."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| The use cases of such an action happening is very little and the user can simply manually remove the few"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "ingredients they do not wish to add to the inventory after using the `cart move` command. The user can also manually"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "add back the ingredients to the cart after it is cleared if they wish to."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Pros"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Straightforward to implement"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Lesser implementations, more time to focus on other parts of the project"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Cons"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Lesser functionality to users that really want to only move certain ingredients"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Poorer user experience for users that do not want to move all ingredients from the cart to inventory on a regular basis,"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "hans555"
        },
        "content": "//tag::hansheng[]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d Add a Recipe\u0027s Ingredients to Cart https://github.com/hans555[(by Ong Han Sheng)]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "hans555"
        },
        "content": "The user may want to buy the required ingredients to cook a certain recipe in the cookbook. This feature allows the user"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "hans555"
        },
        "content": "to add a certain recipe\u0027s required ingredients into the cart."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "hans555"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "hans555"
        },
        "content": "The action of adding a recipe\u0027s ingredients to cart mechanism is facilitated by `CartAddRecipeIngredientCommand`, which"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "hans555"
        },
        "content": "extends the `CartAddCommand` abstract class. The format is as follows: `cart add recipe INDEX`."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "hans555"
        },
        "content": "This command is implemented to ease the tedious process of having the user adding every single ingredient"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "hans555"
        },
        "content": "to their cart when they want to purchase ingredients to cook a certain recipe. This provides convenience to users"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "hans555"
        },
        "content": "that frequently use our application and such process like shopping for a certain recipe\u0027s ingredient is"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "hans555"
        },
        "content": "intuitive to users. Furthermore, this command creates interaction between the `Cookbook` and `Cart` which"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "hans555"
        },
        "content": "helps to further integrate the application as an all-in-one application."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "hans555"
        },
        "content": "Below is a step by step sequence of what happens when a user enters this command:"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "hans555"
        },
        "content": ". The user enters the command `cart add recipe INDEX`  in the command line  input."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "hans555"
        },
        "content": ". `CartAddRecipeIngredientParser` parses the user input and checks if the index provided is an integer."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "hans555"
        },
        "content": "Note that the parser will throw a `ParseException` if the given index is not an integer."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "hans555"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "hans555"
        },
        "content": "try {"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "hans555"
        },
        "content": "    recipeIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "hans555"
        },
        "content": "} catch (ParseException pe) {"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "hans555"
        },
        "content": "    throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX, CartAddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "hans555"
        },
        "content": ". The index is passed as a parameter for `CartAddRecipeIngredientCommand` which is returned to `LogicManager`."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "hans555"
        },
        "content": ". `LogicManager` calls `CartAddRecipeIngredientCommand#execute()` which checks if the given index is"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "hans555"
        },
        "content": "a valid index of a recipe. Note that the command will throw a `CommandException` if the given index is not valid."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "hans555"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "hans555"
        },
        "content": "if (recipeIndex.getZeroBased() \u003e\u003d model.getCookbook().getRecipeList().size()) {"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "hans555"
        },
        "content": "    throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "hans555"
        },
        "content": ". If the index is valid, the selected recipe\u0027s ingredients will be added accordingly. This is done through calling"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "hans555"
        },
        "content": "`Model#addCartIngredient()`, with each ingredient as the parameter."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "hans555"
        },
        "content": ". `Model#addCartIngredient` calls `Cart#addIngredident()` which then adds the ingredient to the cart."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "hans555"
        },
        "content": "If a certain ingredient exists in the cart, adding a ingredient to a cart will increase the"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "hans555"
        },
        "content": "quantity instead. Otherwise, a new instance of that ingredient will be added to the cart."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "hans555"
        },
        "content": "After adding an ingredient, the cart will be updated with `Model#updateFilteredCartIngredientList()`."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "hans555"
        },
        "content": ". A `CommandResult` with the successful text message is returned to `LogicManager`"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "hans555"
        },
        "content": "and will be displayed to the user via the GUI to feedback to the user that"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "hans555"
        },
        "content": "the selected recipe\u0027s ingredients has been successfully added to the cart."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "hans555"
        },
        "content": "The following activity diagram shows a possible flow of events for a user using this feature:"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "hans555"
        },
        "content": ".Activity diagram for CartAddRecipeIngredientCommand"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "hans555"
        },
        "content": "image::CartAddRecipeIngredientActivityDiagram.png[]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "hans555"
        },
        "content": "The following sequence diagram shows how the function of adding recipe\u0027s ingredients to cart works:"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "hans555"
        },
        "content": ".Sequence diagram for CartAddRecipeIngredientCommand"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "hans555"
        },
        "content": "image::CartAddRecipeIngredientSequenceDiagram.png[]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "hans555"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "hans555"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Allowing users to add all or some recipe\u0027s ingredients"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "hans555"
        },
        "content": ".Design considerations for allowing users to add only recipe\u0027s ingredients that are not present in the inventory to the cart"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "hans555"
        },
        "content": "[cols\u003d\"12%,44%,44%\"]"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "hans555"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "hans555"
        },
        "content": "||Design A (current choice): Adding all recipe\u0027s ingredients to the cart|Design B: Adding only recipe\u0027s ingredients"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "hans555"
        },
        "content": "that are missing in the inventory to the cart"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "hans555"
        },
        "content": "|Description"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "hans555"
        },
        "content": "| Allows user to add a recipe\u0027s ingredients to the cart for shopping. This design is currently chosen due to ease of"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "hans555"
        },
        "content": "implementation and it works for all situations."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "hans555"
        },
        "content": "| Allows user to add a recipe\u0027s ingredients base on the inventory status. However, there are some situations where"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "hans555"
        },
        "content": "this design not does work. One example would be like planning to cook at outside where the inventory status is unknown."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "hans555"
        },
        "content": "|Pros"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "hans555"
        },
        "content": "a|"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "hans555"
        },
        "content": "- Easier to implement as it does not need to check if the ingredients are already present in the inventory"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "hans555"
        },
        "content": "- Works for all situations as it ensures that the user is able to cook this recipe after buying the ingredients in the cart"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "hans555"
        },
        "content": "a|"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "hans555"
        },
        "content": "- Provide a more intuitive experience of the application as user only need to buy ingredients that are missing in the inventory"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "hans555"
        },
        "content": "|Cons"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "hans555"
        },
        "content": "a|"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "hans555"
        },
        "content": "- Less flexible as users have to manually remove some of the recipe\u0027s ingredients that they do not want to buy"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "hans555"
        },
        "content": "a|"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "hans555"
        },
        "content": "- Harder to implement as additional checking is required to filter a recipe\u0027s ingredients that are missing in the inventory"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "hans555"
        },
        "content": "- Users have to manually add some of the recipe\u0027s ingredients that they want to buy although it is present in the inventory"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "hans555"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "hans555"
        },
        "content": "//end::hansheng[]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d Export ingredients in cart to PDF file https://github.com/teo-jun-xiong[(by Teo Jun Xiong)]"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "The user may use this command to export the ingredients in their cart to a \u003c\u003cPDF, PDF\u003e\u003e file, which they can then"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "use as their shopping list at the supermarkets."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "The cart exporting mechanism is facilitated by `CookbookExportCommand`, which extends the `Command` abstract class."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "The format is as follows: `cart export`."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command was implemented to bridge the (current, v1.4) inadequacy of Cooking Papa, which is that it is not"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "portable (yet). It was still not convenient _enough_ to be able to organize cart ingredients. Evenutally, users had"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "to go outside to the supermarket, and Cooking Papa is a desktop-only application. By allowing users to export the"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "ingredients in their cart to a PDF file, they can then print it out, or transfer it to their mobile devices, and"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "bring them along as shopping lists. Additionally, the layout and content of the generated PDF file is simple,"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "informational, and easy for users to extend, allowing them to add (handwritten or  annotated) remarks."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "// tag::cartexport[]"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Below is a step by step sequence of what happens when a user enters this command:"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". The user enters a cart export command using the command line input `cart export`."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `CookingPapaParser` parses the user input and checks if it is valid. If it is invalid, i.e. an unknown command"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "category, a `ParseException` will be thrown. If the input is valid, with the command category `cart`, a new"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "`CartCommandParser` is created."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `CartCommandParser` then parses `export`. If it is invalid, i.e. an unknown command word, a `ParseException` will be"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "thrown. If the input is valid, with the command category `export`, a new `CookbookExportCommandParser` is created."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `CartExportCommandParser` parses the user input and checks if the argument passed to it is an empty String, as the"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "command takes in no extra parameters."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "+"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Note that if the String is not empty, a `ParseException` will be thrown:"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "+"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "----"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    return new CartExportCommand();"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "} else {"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CartExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "----"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "+"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This means that `cart export ingredient` will not work."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `CartExportCommandParser` then returns a `CartExportCommand` to `LogicManager`."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `LogicManager` calls `CartExportCommand#execute()` calls the static method of `PdfExporter`,"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "`PdfExporter#exportCart()`, which takes in the `ObservableList\u003cIngredient\u003e` stored in `Cart`"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". Step 4 is executed within a try-catch block. If a previously generated pdf (saved as `cart.pdf` by default) is"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "opened in another program, or there is an issue writing to the PDF file, a `CommandResult` with an error"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "message will returned to `LogicManager` (skipping step 7 and 8):"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "+"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "----"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "try {"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    PdfExporter.exportCart(model.getCart().getIngredientList());"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "} catch (IOException e) {"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    return new CommandResult(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "----"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". The ingredients in the `Cart` is passed to the static method `PdfExporter#exportCart()`, which then makes use of"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "the library, `PDFbox`, to parse the data."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". Within `PdfExporter`, `PdfExporter#getTextFromCart` parse the data and splits them manually, in order to wrap the"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "text (this has to be done due to the inadequacy of `PDFbox`). The method returns a `List\u003cString\u003e`, where each string"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "represents a new line on the PDF file."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". Subsequently, `PdfExporter` checks if the number of `String` s in the list in step 7 is greater than the number of"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "lines a single page of the PDF can accomodate. If it is, it adds a new page, and adds lines to the PDF until the"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "limit is hit. This repeats until all the lines are added to the PDF."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". A `CommandResult` with the text to display to the user will be returned to `LogicManager`. The"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "`CommandResult` is then passed back to `MainWindow`, which displays it to the user on the CLI and GUI: `resultDisplay"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".setFeedbackToUser(commandResult.getFeedbackToUser())`. The text displayed will notify the user on whether"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "their addition was successful."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "//end::cartexport[]"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "// tag::cartexportsequence[]"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "The following sequence diagram shows how the function of exporting ingredients in the cart to a PDF file works:"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".Sequence diagram for CartExportCommand"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "image::CartExportCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "The following activity diagram shows a possible flow of events for a user using this command:"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".Activity diagram for CartExportCommand"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::CartExportActivityDiagram.png[]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "// end::cartexportsequence[]"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 1: File format to export ingredients in cart to"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "[cols\u003d\"16%,42%,42%\"]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "||Design A (current choice): .pdf|Design B: .txt"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Description|Exports it to a flexible pdf file|Exports it to a txt file"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Pros"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "a|"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Easier to format with `Apache PDFbox` \u0027s vast library and API"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- More versatile in that images can be added if the function was to be extended to include images of the ingredients"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "a|"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Simple to implement"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Cons"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "a|"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- More formatting code required"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- May take slightly longer to export as compared to design B"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "a|"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Lack of design/formatting flexibility"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 2: What information to export"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "[cols\u003d\"16%,42%,42%\"]"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "||Design A (current choice): Export the ingredient names and quantities in the cart|Design B: Export the entirety of"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Cooking Papa"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "(cookbook, inventory, cart)"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Description|Allow exporting of just the cart|Allow exporting of the cart, inventory, and cookbook"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Pros"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "a|"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Easier to implement as there will be less information to parse"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Keeps the exported PDF short and sweet"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Ingredients in the inventory and recipes in the cookbook generally correlates (and are consequential of) with the"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "ingredients in the cart, so exporting the inventory as well as the cookbook is likely to be redundant."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".A sample shopping list generated by the command"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "image::CookbookExportExample2.png[]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "a|"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Provides users an all-in-one file containing all the information they entered into Cooking Papa"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Allows user to reproduce hard-copy recipe books using Cooking Papa"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Cons"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "a|"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Certain information may be needed and not exportable by the user, i.e. recipes"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "a|"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Slightly more difficult to implement"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- May be providing users with unnecessary information"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* has a need to manage a significant number of recipes"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* has a need to manage food resources efficiently"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* prefer desktop apps over other types of apps"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "gohkh"
        },
        "content": "*Value proposition*: manage recipes and food resources faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "gohkh"
        },
        "content": "[width\u003d\"75%\",cols\u003d\"\u003c15%,\u003c25%,\u003c30%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|Priority |As a ... |I want to ... |So that ..."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`* * *` |beginner cook |find new recipes easily |I don\u0027t waste time searching though recipes from different sources"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`* * *` |regular cook |record my own recipes |I can refer to them easily in future"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`* * *` |forgetful person |add ingredients for my planned meals to a grocery list easily |I know what I need to get when shopping"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`* * *` |disorganized person |keep track of the ingredients I have at home |I can plan my meals better"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`* * *` |busy student |cook a meal with the ingredients I already have |I don\u0027t waste time on grocery shopping"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`* * *` |low-income individual |cook a meal with the ingredients I already have |I can save money"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`* * *` |person with food allergies |cook meals that I am not allergic to |I do not have an allergic reaction"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`* *` |regular cook |edit recipes |I can tweak a recipe to my liking"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`* *` |regular cook |set a timer during meal preparation |I can control the quality of my meal"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`* *` |CS student |cook a quick meal |I can spend more doing CS2103T"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`* *` |vegetarian |find recipes that don\u0027t contain meat |I can keep to my diet constraints"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`* *` |picky eater |choose recipes that only contain the food I like |I can enjoy the meals I cook"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`* *` |working adult |plan meals for the next week |I can buy all the ingredients I need in one trip"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`* *` |person with health issues |record the meals I eat |I can share the information with my doctor easily"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`*` |health-conscious person |keep track of the nutritional value of the food I eat |I can meet my nutritional goals"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`*` |regular gym-goer |keep track of my dietary intake |I can meet my fitness goals"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`*` |obesity fighter |keep track of my calorie and fat intake |I can lose weight"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`*` |stay-at-home parent |plan a variety of meals for the week |I can make sure that my family eats healthily"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`*` |kiasu parent |know how much ingredients I need for 2 weeks |ensure my family never runs out of food"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`*` |party host |scale recipe ingredients by the number of servings |I can prepare meals for large groups"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`*` |cafe manager |keep track of the expiry dates of my ingredients |I know what ingredients I need to stock up on"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "(For all use cases below, the *System* is `Cooking Papa` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Use case: UC01 - Create a recipe"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "hans555"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "gohkh"
        },
        "content": "1. User chooses to create a recipe."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "gohkh"
        },
        "content": "2. Cooking Papa requests for details of the recipe."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "gohkh"
        },
        "content": "3. User enters the requested details."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "gohkh"
        },
        "content": "4. Cooking Papa creates the recipe and stores it in the cookbook, and displays the newly created recipe."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "hans555"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "hans555"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    3a. Cooking Papa detects an error in the entered data."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        3a1. Cooking Papa shows an error message."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        3a2. Cooking Papa requests for the correct data."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        3a3. User enters new data."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Steps 3a1 to 3a3 are repeated until the data entered is correct."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Use case resumes from step 4."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    *a. At any time, User chooses to end the creation of a recipe."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        *a1. Cooking Papa cancels creation of a recipe."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Use Case: UC02 - Search for recipes"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "gohkh"
        },
        "content": "1. User chooses to search recipes."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "gohkh"
        },
        "content": "2. Cooking Papa requests for the tag to be searched."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "gohkh"
        },
        "content": "3. User enters the tag."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "gohkh"
        },
        "content": "4. Cooking Papa displays recipes with the corresponding tag."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Use Case: UC03 - View a recipe"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "gohkh"
        },
        "content": "1. User chooses to view recipes."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "gohkh"
        },
        "content": "2. Cooking Papa requests for the index of the recipe."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "gohkh"
        },
        "content": "3. User enters the requested index."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "gohkh"
        },
        "content": "4. Cooking Papa displays the entire recipe with the corresponding index."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    3a. The given index is invalid."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        3a1. Cooking Papa shows an error message."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        3a2. Cooking Papa requests for the correct index."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        3a3. User enters the new index."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Steps 3a1-3a3 are repeated until the index entered is valid."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Use case resumes from step 4."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Use case: UC04 - Add a recipe\u0027s ingredients to the cart"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "gohkh"
        },
        "content": "1. User chooses to add a recipe\u0027s ingredients to the cart."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "gohkh"
        },
        "content": "2. Cooking Papa requests for the index of the recipe."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "gohkh"
        },
        "content": "3. User enters the requested index."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "gohkh"
        },
        "content": "4. Cooking Papa add the ingredients to the cart."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    3a. The given index is invalid."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        3a1. Cooking Papa shows an error message."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        3a2. Cooking Papa requests for the correct index."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        3a3. User enters the new index."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Steps 3a1-3a3 are repeated until the index entered is valid."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Use case resumes from step 4."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".  Should be able to hold up to 500 recipes without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "[[PDF]] PDF::"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "A file format for capturing and sending electronic documents in exactly the intended format."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "These instructions only provide a starting point for testers to work on, and are in no way exhaustive."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Below are some test inputs for manual testing, please note that these test inputs are *only* valid for the sample"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "cookbook, cart, and inventory data, i.e. the data that is present when Cooking Papa is opened for the first time. If"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the data has been modified prior to using these commands, please delete the `.json` files in `/data` (`cookbook"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                                                                                       .json`, `inventory.json`, `cart.json`)."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "   Expected: Shows the GUI with a set of sample cookbook, inventory, and cart."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Adding a recipe to the cookbook"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Please note that these cases are to be tested individually, i.e. should test case"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a be executed, executing test case e will not be valid as there is already an existing recipe with the recipe name"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\"Name\". In such cases, please remove the existing recipe in the cookbook using `cookbook remove recipe INDEX`."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".. Prerequisites: List all recipes in the cookbook using the `cookbook list` command, and *using the sample cookbook*."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".. Test case: `cookbook add recipe n/Name d/Description i/Ingredient q/1 s/Step 1 t/Tag` +"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "   Expected: a new recipe is added to the cookbook, and displayed as the index 3 (one-based index) in the cookbook"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "panel."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".. Test case: `cookbook add recipe n/Name d/Description i/Ingredient q/1 s/Step 1 t/Tag` (a duplicate recipe) +"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "   Expected: no recipe will be added, and an error message indicating that there is already an existing recipe with"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the same name in the cookbook will"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "be displayed."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".. Test case: `cookbook add recipe n/Name d/Description i/Ingredient q/1 s/Step 1 s/Step 1 t/Tag` (a recipe with"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "duplicated"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "steps) +"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "   Expected: no recipe will be added, and an error message indicating that there is a duplicate step  in the command"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "will"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "be displayed."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".. Test case: `cookbook add recipe n/Name d/Description i/Ingredient q/1 i/Ingredient q/1 s/Step 1t/Tag` (a recipe with"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "duplicated"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "ingredients) +"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "   Expected: a new recipe is added to the cookbook, with the duplicate ingredients being added to one another. The"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "new recipe will be displayed as the index 3 (one-based index) in the cookbook panel."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Remove a recipe from the cookbook"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Please note that these test cases are to be tested individually, i.e. should test case a be executed, executing test"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "case a again will remove a different recipe from the cookbook. In this case, after executing test case a once, to"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "execute it again, please add back the removed recipe using `cookbook add recipe ...` or by deleting the `.json` files."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".. Prerequisites: List all recipes in the cookbook using the `cookbook list` command, and *using the sample"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "cookbook*."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".. Test case: `cookbook remove recipe 1` +"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    Expected: a recipe (Aglio Olio) will be removed from the cookbook."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".. Test case: `cookbook remove recipe 0` and `cookbook remove recipe 5` +"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    Expected: since the indices in the recipe panel are one-based, i.e. starting from 1, the former command is"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "out-of-bounds; the latter command is out-of-bounds because there are only 4 recipes in the cookbook. Both commands"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "will show an error message reflecting the invalid recipe indices provided."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Search for recipes by tags"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Please note for this search command, with more tags being included, the number of results returned will be greater, i"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".e. if"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "there are three tags included, the recipes returned do not have to be tagged with all three tags."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".. Prerequisites: List all recipes in the cookbook using the `cookbook list` command, and *using the sample cookbook*."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".. Test case: `cookbook search tag t/Simple` +"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    Expected: the recipe panel will be updated to show only two recipes, both which are tagged with \"Simple\"."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".. Test case: `cookbook search tag t/Simple t/Celebrity`"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    Expected: the recipe panel will be updated to show only three recipes, of these three recipes, they are either"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "tagged with \"Simple\" or \"Celebrity\"."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Add an ingredient to a recipe"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Please note that the results of these test cases are based on the sample cookbook. The tests can be performed in any order."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".. Prerequisites: List all recipes in the cookbook with the `cookbook list` command, and view all the ingredients in recipe 1 with the `cookbook view recipe INDEX` command, *using the sample cookbook*."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".. Test case: `recipe 1 add ingredient i/Olive Oil q/1 tbsp` +"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "   Expected: 1 tbsp of olive oil is added to the recipe, and the ingredient quantity of olive oil is changed from 1 to 2 tbsp."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".. Test case: `recipe 1 add ingredient i/Olive Oil q/1 tsp` (an ingredient with incompatible units) +"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "   Expected: the specified ingredient will not be added, and an error message indicating that the existing ingredient in the recipe has a different unit will be displayed."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".. Test case: `recipe 1 add ingredient i/Ingredient q/1` (a new ingredient) +"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "   Expected: the specified ingredient is added to the recipe."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003d\u003d\u003d Removing an ingredient from a recipe"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Please note that the results of these test cases are based on the sample cookbook. The tests can be performed in any order."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".. Prerequisites: List all recipes in the cookbook with the `cookbook list` command, and view all the ingredients in recipe 1 with the `cookbook view recipe INDEX` command, *using the sample cookbook*."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".. Test case: `recipe 1 remove ingredient i/Olive Oil q/1/2 tbsp` +"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "   Expected: 1/2 tbsp of olive oil is removed from the recipe, and the ingredient quantity of olive oil is changed from 1 to 1/2 tbsp."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".. Test case: `recipe 1 remove ingredient i/Olive Oil q/1 tsp` (an ingredient with incompatible units) +"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "   Expected: the specified ingredient will not be removed, and an error message is shown indicating that the existing ingredient in the recipe has a different unit will be displayed."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".. Test case: `recipe 1 remove ingredient i/Ingredient q/1` (an ingredient that is not in the recipe) +"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "gohkh"
        },
        "content": "   Expected: the ingredient is not removed, and an error message is shown indicating that the ingredient is not in the recipe"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".. Test case: `recipe 1 remove ingredient i/Olive Oil q/10 tbsp` (ingredient quantity too high) +"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "   Expected: the ingredient is not removed, and an error message is shown indicating that the specified quantity is greater than that in the recipe"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".. Test case: `recipe 1 remove ingredient i/Cheese` (no quantity specified) +"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "gohkh"
        },
        "content": "   Expected: cheese is removed from the recipe entirely, and the recipe no longer contains any cheese"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Export the cart to a PDF file"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Please note that for the export command, the result is based on the sample cart."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a. Prerequisite: have the sample cart data in `cart.json`, if the file has been modified, please exit Cooking Papa,"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "and delete it in `/data`, and run Cooking Papa again."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".. Test case: `cart export`"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    Expected: a PDF file will be created in the same folder as Cooking Papa, and the content should look like:"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".Content of cart.pdf created from sample cart data"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::CookbookExportExample2.png[]"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".. Test case: `cart export`, with a previously created `cart.pdf` open in a program"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    Expected: an error will be thrown, as `PdfExporter` is unable to modify a file that is currently open in another"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "program. Closing the file and executing the command will return the same result (assuming the cart data is the same"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "as the sample cart data)"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "as test case a."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d Effort"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "[cols\u003d\"25%,65%,10%\"]"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Achievements/ challenges|Effort required|Difficulty level (out of `\\***` )"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Greater number of entities than AB3|As AB3 only had one overarching entity (`Person`), it was a challenge to extract"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the implementation for `Person` and apply it to three overarching entities (`Cart`, `Cookbook`, `Inventory`). Much"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "time was spent refactoring to our needs, but was not too tough given the great documentation and clarity in AB3\u0027s"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "code.|`**`"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Development of the GUI | As the team had not much experience with regards to CSS and JavaFX, it took awhile to get"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "rolling and adapt the aesthetics to Cooking Papa\u0027s needs. Moreover, one challenge faced was ensuring that the GUI ran"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "as expected on Windows, MacOS, and Linux."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Additionally, the use of SceneBuilder was encouraged, however, it led to many unintended changes and extra variables"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "which made troubleshooting a lot more complex (especially to a novice)."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|`**`"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Integrating `cookbook view command` with a button on the GUI|We wanted to make the command more of a toggle instead"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "of something users *had* to type, as it was not intuitive. While implementing the button was rather trivial, one"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "requirement of the app was that it had to be testable via the command line. Connecting the command from the command"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "line (`Logic`) to the `UI` was a big challenge, especially while trying to maintain the abstraction between the"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "two."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "In hindsight, perhaps greater experience with GUIs would have made this process easier, but our team were"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "all novices in that aspect, and being able to pull this off, especially when we could have simply left it as the"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "status quo, is a huge achievement.|`\\***`"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Refactoring `cart export` code|As the original PDF library used (iTextPDF) has not permitted due to its license, the"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "whole code had to be refactored to use the current PDF library (Apache PDFbox). The challenge was the lack of"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "features in PDFbox, i.e. tables were not a feature, and had to be drawn using lines. This was a huge hinder in"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "achieving the intended output PDF file. Eventually, it was decided to simply create a list in the PDF instead of a"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "table due to the lack of time, and the payoff for tinkering with PDFbox was not worth the effort.|`**`"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "gohkh": 226,
      "teo-jun-xiong": 424,
      "shanecsj": 28,
      "hans555": 88,
      "-": 238,
      "tzihiang": 248
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all persons who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The above method can be used to get a printable string representing a bunch of person details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "-": 215
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d Cooking Papa - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-F11-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "By: `Team F11-4`      Since: `Jan 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Cooking Papa is an all-in-one, easy-to-use application that acts as a personalised cookbook, with *your* favourite"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "recipes!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Cooking Papa aims to help university students who live alone. It aim to make learning how to cook more convenient,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "contributing to the variety of meals of these university students. With Cooking Papa, users can easily edit recipes, keep track of ingredients"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "they currently have at home and have a shopping list that assists them in their grocery shopping process."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "CookingPapa consists of 3 main features:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "* *Cookbook*: Stores all your recipes, including the ingredients and steps for each recipe. +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Cookbook commands can be seen here: \u003c\u003cCookbook\u003e\u003e +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Cookbook is supplemented with recipe commands, which can be seen here: \u003c\u003cRecipe\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "* *Inventory*: Keeps stock of all the ingredients you currently have. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Inventory commands can be seen here: \u003c\u003cInventory\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "* *Cart*: Acts as a shopping list for ingredients you may wish to purchase. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Cart commands can be seen here: \u003c\u003cCart\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Do away with thick, confusing, and expensive cookbooks, and start cooking with Cooking Papa today!"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d Quick Start and Use of Application"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ".  Download the latest `cookingpapa.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Cooking Papa."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".CookingPapa User Interface"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". CookingPapa uses the *command box* for all of its commands. You can see a comprehensive view of all"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "the commands given in \u003c\u003cFeatures\u003e\u003e."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".Cooking Papa User Interface; marked: command box"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::Example1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". Whenever a command is entered, feedback will be given in the *result display*, and the message displayed varies with the type of"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "command given by the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".Cooking Papa User Interface; marked: result display"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::Example2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ". Here are the components of Cooking Papa\u0027s user interface:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".The UI components of Cooking Papa"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::Example3.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Cooking Papa accepts the following command formats for its application. It is important to follow these guidelines"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "for smooth usage of the application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user. +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "(e.g. in `inventory add ingredient i/INGREDIENT`, `INGREDIENT`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "is a parameter which can be used as `inventory add ingredient i/Bacon q/10`)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "* Words in square brackets are optional. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " (e.g in `cookbook add recipe n/NAME d/DESCRIPTION [i/INGREDIENT]... [q/QUANTITY]... [s/STEP]... [t/TAG]...` can be"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "used as"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "`cookbook add recipe n/Cheesecake d/Delicious New York cheesecake t/Dessert`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "or as `cookbook add recipe n/Cheesecake d/Delicious New York cheesecake` as tags are optional)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "* Words with `…`​ after them can be included multiple times. +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "(e.g. `cookbook add recipe n/NAME d/DESCRIPTION [i/INGREDIENT]... [q/QUANTITY]... [s/STEP]... [t/TAG]...` can be used"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "to add multiple ingredients and its respective quantities in the same command: `cookbook add recipe n/Sandwich"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "d/Delicious Sandwich i/Bread q/2 pieces i/Ham q/3 slices i/Cheese q/2 slices`)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "* Parameters can be in any order. +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "(e.g. if the command specifies `i/INGREDIENT q/QUANTITY`, `q/QUANTITY i/INGREDIENT` is a valid command)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "* Command and delimiter (eg. i/, q/) formats given in the lowercase are *case-sensitive*. (eg `cookbook` is given as"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "all lowercase. `Cookbook` or `COOKBOOK` or `cOoKbOoK` are not valid.)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Additionally, parameters also cannot start with spaces. *Please follow the format given carefully for a seamless"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "experience.*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "A table of parameters and their associated constraints:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| Parameter type | Constraint"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|`INDEX`, `STEP_INDEX`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|Must be a whole number."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|`NAME`,`DESCRIPTION`, `STEP`, `INGREDIENT`, `KEYWORD`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Can contain alphabet letters, numbers, and spaces, as well as the symbols `\u0027`, `-`, and `%`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|`QUANTITY`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Must start with a numerical value, which can contain decimal points or slashes to represent a fraction."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "The value can be followed by an optional unit that only consists of alphabet letters, which may be separated by spaces."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "A quarter cup of milk can be represented in a command as: `i/Milk q/1/4 cup`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|`TAG`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Can only contain alphabet letters and numbers. *No spaces are permitted*."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "[[Cookbook]]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d Cookbook Commands https://github.com/shanecsj[(by Chan Shun Jie)]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "//tag::shanecsj[]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Cookbook commands are commands that allow users to add and remove recipes from the cookbook,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "as well as view recipes stored in the cookbook. More commands can be done with recipes, and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "are covered in \u003c\u003cRecipe\u003e\u003e."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d View a recipe from the cookbook"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "This command allows you to view a recipe, the ingredients required, and the steps to cook it."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `cookbook view recipe INDEX`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`cookbook view recipe 1`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a|"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::CookbookViewExample2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Note: you must have added a recipe to the cookbook, otherwise Cooking Papa will not be able to show you"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the details of the recipe."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "A recipe\u0027s details can also be viewed by pressing the \"eye\" icon, without the need to type in the command above:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::CookbookViewExample1.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Add a new recipe to the cookbook"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "This command allows you to add (and store) a new recipe with the provided recipe details to the cookbook."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Format: `cookbook add recipe n/NAME d/DESCRIPTION [i/INGREDIENT]... [q/QUANTITY]... [s/STEP]... [t/TAG]...`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hans555"
        },
        "content": "- Examples:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Command | Result"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`cookbook add recipe n/Bacon Carbonara d/Best cream pasta made in Italy`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a| Adds a recipe with only its name and description specified. +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "New recipe added: Bacon Carbonara"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Description: Best cream pasta made in Italy"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Ingredients:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Preparation Steps:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Tags:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`cookbook add recipe n/Chicken Ham Sandwich d/Juicy ham sandwiched between crispy toasted bread."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "i/Chicken Ham q/1 slice i/White Bread q/2 slices s/Toast the bread s/Grill the ham."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "t/sandwich t/easy`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a|"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Adds a recipe with its name, description, ingredients, steps, and tags specified."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "New recipe (index 1) added: Chicken Ham Sandwich"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Note: the number of ingredient names provided must be the same as the number of ingredient quantities provided,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "otherwise Cooking Papa will not be able to add the recipe."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Remove a recipe from the cookbook"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "This command allows you to remove a recipe of the specified index from the cookbook."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `cookbook remove recipe INDEX`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`cookbook remove recipe 1`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a|"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Removed recipe: Bacon Carbonara from the cookbook"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "----"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Note: you must have added a recipe to the cookbook, otherwise Cooking Papa will not be able to remove the recipe."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Note: you must have added a recipe to the cookbook, otherwise Cooking Papa will not be able to remove the recipe."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Search recipes by keyword"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "This command allows you to search for recipes by keywords, returning a list of recipes."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Note: Adding more keywords will not narrow the search results, but will expand the search results to return any recipe"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "that contains any of the given keywords. Moreover, only full words will be searched, for example, if there is a"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "recipe named \"ABCD\" in the cookbook, searching with the parameter `k/AB` will *not* return the mentioned recipe as a"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "result."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Format: `cookbook search recipe k/KEYWORD...`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|`cookbook search recipe k/Carbonara`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Searches the cookbook for recipes with names matching the keyword \u0027Carbonara\u0027."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|`cookbook search recipe k/Carbonara k/Simple k/Cheesy`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Searches the cookbook for recipes with names matching the keywords \u0027Carbonara\u0027, or `Simple`, or `Cheesy`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Search recipes by tag"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "This command allows you to search for recipes by tags, returning a list of recipes."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Note: Adding more tags will not narrow the search results, but will expand the search results to return any"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "recipe that contains any of the given tags."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hans555"
        },
        "content": "- Format: `cookbook search tag t/TAG…`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Examples:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hans555"
        },
        "content": "|`cookbook search tag t/Easy`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hans555"
        },
        "content": "|Searches the cookbook for recipes wisth tags matching \u0027Easy\u0027."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|`cookbook search tag t/Pasta t/Cream t/Easy`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Searches the cookbook for recipes with tags matching \u0027Pasta\u0027, or \u0027Cream\u0027, or \u0027Easy\u0027."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Search recipes by ingredients owned"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "This command allows you to see search for recipes you can cook with your current inventory of ingredients."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Format: `cookbook search inventory`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|`cookbook search inventory`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Searches the cookbook for recipes which ingredients are available in the inventory."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hans555"
        },
        "content": "\u003d\u003d\u003d\u003d List all recipes in the cookbook"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "This commands allows you to view the whole collection of recipes in the cookbook. Additionally, it can be used after"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "using the search commands to view all the recipes."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hans555"
        },
        "content": "- Format: `cookbook list`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hans555"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hans555"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hans555"
        },
        "content": "|`cookbook list`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hans555"
        },
        "content": "|Lists all recipes in the cookbook"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hans555"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "//end::shanecsj[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gohkh"
        },
        "content": "//tag::gohkh[]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "[[Recipe]]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d Recipe Commands https://github.com/gohkh[(by Goh Ka Hui)]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Recipe commands are commands that change an existing recipe in the cookbook, which can be indicated using the index of"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gohkh"
        },
        "content": "the recipe. You can use these commands to to add and remove ingredients or steps from a recipe in the cookbook. You may"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gohkh"
        },
        "content": "also tag your recipes to make it easier for you to find them."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Add an ingredient to a recipe"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command allows you to add ingredients to an existing recipe in the cookbook."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gohkh"
        },
        "content": "You can increase the quantity of an ingredient that is already in the recipe, as long as you provide a quantity with"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gohkh"
        },
        "content": "the same unit. Otherwise, Cooking Papa will not add the ingredient."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Ingredient quantities are case-sensitive, but ingredient names are not, when you adding to an existing ingredient in a"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gohkh"
        },
        "content": "recipe. If you indicate multiple ingredient names or quantities, Cooking Papa will only add an ingredient with the last"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gohkh"
        },
        "content": "name and quantity indicated in your command."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `recipe INDEX add ingredient i/INGREDIENT q/QUANTITY`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gohkh"
        },
        "content": "- Examples:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`recipe 1 add ingredient i/Garlic q/3 cloves`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|Adds 3 cloves of garlic to the first recipe\u0027s list of ingredients. +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Sample command feedback: +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`New ingredient added for Aglio olio: 2 cloves Garlic`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`recipe 2 add ingredient i/Eggs q/2`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|Adds 2 eggs to the second recipe\u0027s list of ingredients. +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Sample command feedback: +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`New ingredient added for Carbonara: 2 Eggs`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Remove an ingredient from a recipe"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command allows you to remove ingredients from an existing recipe in the cookbook."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gohkh"
        },
        "content": "If you wish to remove an ingredient from the recipe entirely, do not indicate any quantity."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Cooking Papa will then remove all of the specified ingredient from the recipe."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gohkh"
        },
        "content": "If you want to reduce the quantity of an ingredient that is already in the recipe, provide a quantity with the same unit"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gohkh"
        },
        "content": "as in the recipe. The value must be less than that of the corresponding ingredient in the recipe. Otherwise, Cooking Papa"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gohkh"
        },
        "content": "will not remove the ingredient."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gohkh"
        },
        "content": "- Format: `recipe INDEX remove ingredient i/INGREDIENT [q/QUANTITY]`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gohkh"
        },
        "content": "- Examples:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| `recipe 1 remove ingredient i/Eggs`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|Removes all eggs from the list of ingredients in recipe 1. +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Sample command feedback: +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`All Eggs removed from recipe 1`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|`recipe 2 remove ingredient i/Milk q/200 ml`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|Removes 200 ml of milk from the list of ingredients in recipe 2, provided that the original quantity of milk in the recipe is greater than 200 ml. +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Sample command feedback: +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`200 ml milk removed from recipe 2`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Add a preparation step to a recipe"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command allows you to add a step to an existing recipe in the cookbook."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gohkh"
        },
        "content": "For this command, you have to specify the index of the step that you wish to add,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "gohkh"
        },
        "content": "which must be positive, and at most 1 more than the current number of steps currently in your chosen recipe."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "gohkh"
        },
        "content": "For example, if there are currently 5 steps in the recipe you are trying to add to,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "gohkh"
        },
        "content": "you can only choose an index from 1 to 6."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command pushes back the original step at your specified step index and any subsequent steps, if any."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gohkh"
        },
        "content": "You can use `next` as a substitute for the largest possible step index, to add a step to the end of the selected recipe\u0027s list of steps."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `recipe INDEX add step x/STEP_INDEX s/STEP_DESCRIPTION`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| `recipe 1 add step x/1 s/Bring the water to boil.`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|Adds \"Bring water to boil.\" to recipe 1 as the first step. +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Sample command feedback: +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`New step added for Aglio olio: Bring the water to boil.`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| `recipe 1 add step x/next s/Serve the pasta topped with the remaining cheese.`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|Adds \"Serve the pasta topped with the remaining cheese.\" to recipe 1 as the last step. +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Sample command feedback: +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`New step added for Aglio olio: Serve the pasta topped with the remaining cheese.`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Remove a preparation step from a recipe"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command allows you to remove a step to an existing recipe in the cookbook."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Similar to the previous command, you have to specify the index of the step that you wish to add,"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "gohkh"
        },
        "content": "which must be positive, and at most 1 more than the current number of steps currently in your chosen recipe."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gohkh"
        },
        "content": "In this case, you cannot use `next` as a substitute for the largest step index."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `recipe INDEX remove step x/STEP_INDEX`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hans555"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`recipe 1 remove step x/1`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|Removes step 1 in recipe 1. +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Sample command feedback: +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "gohkh"
        },
        "content": "`Step deleted for Aglio olio: Bring water to boil.`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Add a tag to a recipe"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command allows you to add a tag to an existing recipe in the cookbook."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Only one tag is accepted at a time. If you provide multiple steps, Cooking Papa"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "gohkh"
        },
        "content": "will only add the last tag in your command."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `recipe INDEX add tag t/TAG`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hans555"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`recipe 1 add tag t/Pasta`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|Adds a tag \"Pasta\" to the recipe 1."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Remove a tag from a recipe"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command allows you to remove a tag from an existing recipe in the cookbook."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Only one tag is accepted at a time. If you provide multiple steps, Cooking Papa"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "gohkh"
        },
        "content": "will only remove the last tag in your command."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `recipe INDEX remove tag t/TAG`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hans555"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`recipe 1 remove tag t/Spicy`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|Removes the tag \"Spicy\" from the recipe 1."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "gohkh"
        },
        "content": "---"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "gohkh"
        },
        "content": "*Example Scenario*"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "gohkh"
        },
        "content": "With all these recipe commands, you are equipped to modify any recipe in the cookbook to your liking!"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Below outlines a scenario where you might find these commands useful."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Imagine that you have just added a new recipe for instant ramen via the `cookbook add recipe` command, which now has the"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "gohkh"
        },
        "content": "index 3."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "gohkh"
        },
        "content": ".Cooking Papa with the recipe for instant ramen at index 3."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "gohkh"
        },
        "content": "image::RecipeCommand0.png[width\u003d750]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "gohkh"
        },
        "content": "You have provided the name and description for the recipe, but have yet to add ingredients and steps to the recipe."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Here are the steps you can follow to modify the recipe:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Step 1: To add an ingredient to the instant ramen recipe, type `recipe 3 add ingredient i/Instant ramen q/1 packet` into the command box and press kbd:[Enter] on the keyboard."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Cooking Papa indicates that cucumber has been added to the recipe."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "gohkh"
        },
        "content": "image::RecipeCommand1.png[width\u003d350]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "gohkh"
        },
        "content": "image::RecipeCommand2.png[width\u003d350]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Step 2: Repeat step 1 for all the ingredients you need for the instant ramen."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Step 3: To add the first step the instant ramen recipe, type `recipe 3 add step x/next s/Add the oil, garlic, and ginger to a small sauce pot and saute over medium for about one minute.` into the command box and press kbd:[Enter] on the keyboard."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Cooking Papa indicates that the new step has been added to the recipe."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "gohkh"
        },
        "content": "image::RecipeCommand3.png[width\u003d350]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "gohkh"
        },
        "content": "image::RecipeCommand4.png[width\u003d350]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Step 4: Repeat step 3 for all the steps, following chronological order."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Step 5: After adding the ingredients and steps, you can also add tags to the recipe so that you can search for it easily in future."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Type `recipe 3 add tag t/Easy t/Healthy` to add the tags \"Easy\" and \"Healthy\" to the recipe. Upon pressing kbd:[Enter],"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Cooking Papa indicates that the tags have been added."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "gohkh"
        },
        "content": "image::RecipeCommand5.png[width\u003d350]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "gohkh"
        },
        "content": "image::RecipeCommand6.png[width\u003d350]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Step 6: The recipe is finally ready for use. Type `cookbook view recipe 3` into the command box to view the recipe and and press kbd:[Enter]."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Cooking Papa shows the full recipe for instant ramen, and you can now use it to prepare your meal."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "gohkh"
        },
        "content": "image::RecipeCommand7.png[width\u003d350]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Step 7: After trying the recipe, if you find that there was too much of ginger for your liking,"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "gohkh"
        },
        "content": "type `recipe 3 remove ingredient i/Grated ginger q/1/2 tsp` into the command box and press kbd:[Enter] to remove half a teaspoon of grated ginger from the recipe."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Cooking Papa indicates that half a teaspoon of grated ginger has been removed from the recipe."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "gohkh"
        },
        "content": "image::RecipeCommand8.png[width\u003d350]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "gohkh"
        },
        "content": "image::RecipeCommand9.png[width\u003d350]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "gohkh"
        },
        "content": "//end::gohkh[]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hans555"
        },
        "content": "//tag::hansheng[]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "[[Inventory]]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d Inventory Commands https://github.com/hans555[(by Ong Han Sheng)]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Inventory commands are commands that update the user\u0027s very own inventory at home."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "These commands include adding, remove and viewing the current inventory database."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Add an ingredient to the inventory"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This commands allows you to add ingredients to your inventory. Ingredient names added are case-insensitive."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Ingredient names such as \u0027Bacon\u0027 and \u0027bacon\u0027 will be recognised by CookingPapa as \u0027Bacon\u0027."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `inventory add ingredient i/INGREDIENT q/QUANTITY`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Examples:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`inventory add ingredient i/Eggs q/10`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds 10 eggs into your inventory."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`inventory add ingredient i/Butter q/200g`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds 200g of butter into your inventory."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Remove an ingredient from the inventory"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command allows you to remove ingredients from the inventory."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "gohkh"
        },
        "content": "You can indicate the quantity you want to remove for an ingredient, which should not be greater that than the"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "gohkh"
        },
        "content": "ingredient\u0027s quantity."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Please ensure that the unit of the quantity matches the ingredient\u0027s unit in the inventory."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Note: If you do not indicate any quantity, all entries in the inventory that have the specified ingredient name will be"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "gohkh"
        },
        "content": "removed regardless of the unit."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "gohkh"
        },
        "content": "- Format: `inventory remove ingredient i/INGREDIENT [q/QUANTITY]`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Examples:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "hans555"
        },
        "content": "|`inventory remove ingredient i/Bacon`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes all bacon from your inventory."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`inventory remove ingredient i/Butter q/200g`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Removes 200g of butter from your inventory."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hans555"
        },
        "content": "_(If your inventory had 500 g of butter, it will be subtracted and updated to 300 g of butter)_"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Remove all ingredients from the inventory."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command allows you to remove all ingredients from the inventory."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `inventory clear`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`inventory clear`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes all ingredients from the inventory"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "hans555"
        },
        "content": "\u003d\u003d\u003d\u003d Cook a recipe using the ingredients in the inventory"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "hans555"
        },
        "content": "This command allows you to remove the selected\u0027s recipe ingredients from the inventory after"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "hans555"
        },
        "content": "cooking a delicious meal."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "hans555"
        },
        "content": "- Format: `inventory cook recipe INDEX`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "hans555"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "hans555"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "hans555"
        },
        "content": "| Parameters | Result"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "hans555"
        },
        "content": "|`inventory cook recipe 3`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "hans555"
        },
        "content": "|Removes all ingredients required to cook recipe 3 from the inventory"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "hans555"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "hans555"
        },
        "content": "//end::hansheng[]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "[[Cart]]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d Cart Commands http://github.com/tzihiang[(by Tay Zi Hiang Willis)]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Cart commands are commands that allow you to easily add ingredients needed for a recipe"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "into a shopping cart. This provides convenience for your grocery shopping needs."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Add ingredients in a recipe to the cart"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "This command allows you to add all the ingredients in a recipe to the cart."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `cart add recipe INDEX`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`cart add recipe 1`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds all the ingredients required of recipe 1 to the cart."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Add ingredients to the cart"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "This command allows you to add ingredients to the cart."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `cart add ingredient i/INGREDIENT q/QUANTITY`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`cart add ingredient i/Eggs q/5`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds 5 eggs to the cart."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Remove ingredients from the cart"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "This command allows you to remove ingredients from the cart."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "gohkh"
        },
        "content": "You can indicate the quantity you want to remove for an ingredient, which should not be greater that than the"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "gohkh"
        },
        "content": "ingredient\u0027s quantity."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Please ensure that the unit of the quantity matches the ingredient\u0027s unit in the cart."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Note: If you do not indicate any quantity, all entries in the cart that have the specified ingredient name will be removed"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "gohkh"
        },
        "content": "regardless of the unit."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "gohkh"
        },
        "content": "- Format: `cart remove ingredient i/INGREDIENT [q/QUANTITY]`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|`cart remove ingredient i/Eggs`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|Removes all eggs from the cart"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`cart remove ingredient i/Milk q/200ml`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes 200ml of milk from the cart."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "_(If your cart had 500 ml of milk, it will be subtracted and updated to 300 ml of milk)_"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d\u003d Clear all the items in the cart"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "This command allows you to clear all the items in the cart. It can be used to discard an unwanted cart,"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "or to clear the cart after completing the purchase."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Format: `cart clear`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`cart clear`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Clears the cart of all items."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Move all ingredients currently in the cart to inventory"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command allows you to move all the ingredients from the cart into your inventory. This command also"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "empties your cart. This is helpful after the user has finished shopping and wish to conveniently move all"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "the ingredients to the inventory."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `cart move`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`cart move`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Moves all ingredients from the cart into the inventory. Also clears the cart of all items."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d\u003d Export ingredients in cart to PDF file"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "This command allows you to export all the ingredients in the cart to a PDF file. The PDF file will be located in the"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "same folder as Cooking Papa."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Note: if a previous version of the PDF file, `cart.pdf` is open in another program (Internet browser, Adobe PDF),"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Cooking Papa will not be able to export the cart."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Format: `cart export`"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| `cart export`"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "a|image::CookbookExportExample1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "_The exported PDF file will be in the same folder where Cooking Papa is located._"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::CookbookExportExample2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "_An example of the PDF file exported from the sample cart in Cooking Papa._"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "//tag::help[]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003d\u003d\u003d Help Command https://github.com/teo-jun-xiong[(by Teo Jun Xiong)]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command shows a popup window with a URL to Cooking Papa\u0027s user guide (what you are reading now). This is for access"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "should you need some help executing a certain action in Cooking Papa."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "There are 2 ways a user can access the help window:"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Type `help`."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Click on the `Help` button on the top left corner of Cooking Papa, and then click on the `Help` button in the"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "dropdown menu. You can then click the `Copy URL` button which can then be pasted into a web browser to access Cooking"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Papa\u0027s user guide."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".Cooking Papa \u0027Help\u0027 button to access the Help window"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::CookbookHelpExample.png[width\u003d\"80\"]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ".Cooking Papa Help window and \u0027Copy URL\u0027 button"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::CookbookHelpExample2.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "//end::help[]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "//tag::exit[]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003d\u003d\u003d Exit Command https://github.com/teo-jun-xiong[(by Teo Jun Xiong)]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "There are 3 ways a user can exit Cooking Papa:"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Type `exit`."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Click on the `x` button on the top right corner of the Cooking Papa."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "- Click on the `File` button on the top left corner of Cooking Papa, and then click on the `Exit` button in the dropdown menu."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".Cooking Papa \u0027X\u0027 button to exit the application."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "image::ExitExample.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "//end::exit[]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d Version 2.0 Features"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "These features are not implemented yet, but we plan to do so moving forward with the application."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "gohkh"
        },
        "content": "// tag::gohkh[]"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003d\u003d\u003d Edit Recipe Commands [v2.0] https://github.com/gohkh?tab\u003drepositories[(by Goh Ka Hui)]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "The following commands allow you to edit the details of the recipes that are currently in the cookbook."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Edit an ingredient in a recipe"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command allows you to edit an ingredient in an existing recipe in the cookbook."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "gohkh"
        },
        "content": "It replaces the original quantity of the ingredient with the new quantity that you specify in the command."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `recipe INDEX edit i/INGREDIENT q/QUANTITY`"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Examples:"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "gohkh"
        },
        "content": "| `recipe 1 edit i/Eggs q/2`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|Changes the quantity of eggs to 2 in the first recipe\u0027s list of ingredients."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`recipe 2 edit i/Milk q/100 ml`"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|Changes the quantity of milk to 100 ml in the second recipe\u0027s list of ingredients."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Edit a preparation step in a recipe"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "gohkh"
        },
        "content": "This command allows you to edit a step in an existing recipe in the cookbook."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Format: `recipe INDEX edit step x/STEP_INDEX s/STEP_DESCRIPTION`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|`recipe 1 edit step x/2 s/Fry the eggs`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Changes preparation step 2 to \u0027Fry the eggs\u0027 in recipe 1"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "gohkh"
        },
        "content": "// end::gohkh[]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "//tag::calendar[]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Calendar commands [v2.0] https://github.com/teo-jun-xiong[(by Teo Jun Xiong)]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Calendar commands are commands that allow you to set date-related commands, such as reminders and"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "recipe of the day"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Add a recipe to cook on a certain day"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Reminds the user to cook a certain recipe on a certain day."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: ``calendar set DD-MM-YYYY cook recipe INDEX``"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| `calendar set 10-10-2020 cook recipe 1`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Adds recipe 1 to your calendar for cooking on 10th October 2020."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d View recipes to cook on a certain day"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "User can view the recipes they were supposed to cook on a certain day. The date input can"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "be replaced with \u0027today\u0027 for the current date, or \u0027tomorrow\u0027 for the next day."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: ``calendar view recipes DD-MM-YYYY``"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| `calendar view recipes 10-10-2020`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Shows the recipes scheduled for cooking on 10th October 2020."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| `calendar view recipes today`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Shows the recipes scheduled for cooking on the current day."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| `calendar view recipes tomorrow`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "| Shows the recipes scheduled for cooking on the day after the current day."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "//end::calendar[]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "hans555"
        },
        "content": "//tag::hansheng[]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d Recipe of the day generator [v2.0] https://github.com/hans555[(by Ong Han Sheng)]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "hans555"
        },
        "content": "This command allows CookingPapa to recommend a recipe to cook based on the recipes currently in the cookbook."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: ``generate recipe of the day``"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| `generate recipe of the day`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Displays the recipe of the day"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "hans555"
        },
        "content": "//end::hansheng[]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "//tag::faq[]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d Frequently Asked Questions https://github.com/teo-jun-xiong[(by Teo Jun Xiong)]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous CookingPapa folder."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "*Q*: Where can I install the latest version of CookingPapa? +"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "*A*: You can find the latest release https://github.com/AY1920S2-CS2103T-F11-4/main/releases[here]. Please download"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the latest version of CookingPapa.jar to enjoy the most udpated features."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "*Q*: Do I need to be connected to the internet to access this application? +"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "*A*: All information is stored locally in your own computer. No internet connection is required."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "*Q*: Something is not working as expected. Who can I contact? +"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "*A*: You may report your bugs here https://github.com/AY1920S2-CS2103T-F11-4/main/issues[here]. Bug reports are highly"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "appreciated!"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "*Q*: Is this application free? +"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "*A*: Yes! This application is open-source under the MIT license. You may feel free to modify, contribute and share"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "this application with the community!"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "//end::faq[]"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d Command Summary https://github.com/tzihiang[(by Tay Zi Hiang Willis)]"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "[cols\u003d\"2,3,5a\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| Category | Addtional Parameters | Result"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ".8+|``cookbook``"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``view recipe INDEX``"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Shows recipe at given INDEX."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``add recipe n/NAME d/DESCRIPTION``"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Adds a new empty recipe with the given NAME and DESCRIPTION."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|``add recipe n/NAME d/DESCRIPTION [i/INGREDIENT] [q/QUANTITY] [s/STEP_DESCRIPTION] [t/TAG]``"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Adds a new recipe with the given NAME and DESCRIPTION."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "INGREDIENT and its QUANTITY, STEP, and TAG are optional parameters and will be added according to input from user."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``remove recipe INDEX``"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Removes recipe at given INDEX."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``search recipe k/KEYWORD``"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Searches for recipes by a keyword."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``search recipe t/TAG``"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Searches for recipes by tags."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``search inventory``"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Searches for recipes whose ingredients are available in the inventory."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|``list``"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Views the whole collection of recipes in the cookbook."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".6+|``recipe``"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``INDEX add ingredient i/INGREDIENT q/QUANTITY``"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Adds ingredients to a recipe at given INDEX."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``INDEX remove ingredient i/INGREDIENT q/QUANTITY``"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes the ingredient and the specified quantity from recipe at given INDEX."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``INDEX add step x/STEP_INDEX s/STEP_DESCRIPTION``"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds a step at STEP_INDEX with STEP_DESCRIPTION to the recipe at given INDEX."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``INDEX remove step x/STEP_INDEX``"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|Removes a step at STEP_INDEX from the recipe at given INDEX."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``INDEX add tag t/TAG``"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds a tag \u0027TAG\u0027 to the recipe at given INDEX."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``INDEX remove tag t/TAG``"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes a tag \u0027TAG\u0027 to the recipe at given INDEX."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".4+|``inventory``"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``add ingredient  i/INGREDIENT q/QUANTITY``"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds QUANTITY of INGREDIENTS into your inventory."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``remove ingredient i/INGREDIENT q/QUANTITY``"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes QUANTITY of INGREDIENTS from your inventory."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``clear``"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes all ingredients from the inventory."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``cook recipe INDEX``"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes the ingredients and its\u0027 corresponding quantities of recipe INDEX from the inventory."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".6+|``cart``"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``add recipe INDEX``"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds all ingredients required of recipe at given INDEX to the cart."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``add ingredient i/INGREDIENT q/QUANTITY``"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds QUANTITY of INGREDIENTS into your cart."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``remove ingredient i/INGREDIENT q/QUANTITY``"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes QUANTITY of INGREDIENTS from your cart."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``clear``"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Clears the cart of all ingredients."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``move``"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Moves all the ingredients from the cart to the inventory, clearing the cart in the process."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``export``"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Exports current cart into a PDF."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "gohkh": 152,
      "teo-jun-xiong": 213,
      "shanecsj": 73,
      "hans555": 45,
      "-": 76,
      "tzihiang": 261
    }
  },
  {
    "path": "docs/team/gohkh.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003d Goh Ka Hui - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003d\u003d PROJECT: Cooking Papa"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "Cooking Papa is a desktop cookbook application used to manage recipes and ingredients for cooking."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "It consists of a Cookbook containing recipes, an Inventory containing a users ingredients, and a Cart containing ingredients that a user needs to buy."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 15 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* *Major enhancement*: added *the ability to search for recipes based on the ingredients in the inventory*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "** What it does: allows the user to find recipes that match the inventory ingredients best, sorted by the similarity to the inventory ingredients."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "** Justification: This feature improves the product significantly because a user may not know what to cook with their ingredients, and the app should provide a convenient way to find the most suitable recipes to cook with the available ingredients."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "** Highlights: This enhancement required an in-depth analysis of design alternatives. The implementation too was challenging as it required a robust way of handling ingredient quantities."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "** Credits: https://commons.apache.org/proper/commons-math/[Apache Commons Math] (The `Fraction` class was used in implementing ingredient quantities)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* *Other enhancements*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "** Contributed to basic features involving ingredients, including adding and removing ingredients from recipes, and the inventory and cart"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "** Contributed to a feature that added the ability to add ingredients from a recipe to the cart when a user wants get ingredients for a new recipe"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "** Contributed to a feature that added the ability to move ingredients from the cart to the inventory after a user has finished shopping"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dgohkh[Link]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "*** Helped the team to set up and maintain the forking workflow in this project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "*** Managed the milestones `v1.2` and `v1.3` on Github"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "*** Handled arithmetic of ingredient quantities to allow adding and removing ingredients with the same units"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-F11-4/main/pull/60[#60])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "*** Set up the structure of the new commands and parsers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-F11-4/main/pull/82[#82])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "*** Integrated new classes to the architecture components of the app (Pull requests"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/96[#96],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/114[#114])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "*** Wrote tests for the `Inventory` and `Cart`, as well as `Ingredient`-related code in the Model(Pull requests"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/78[#60],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/78[#78],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/230[#230])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "*** Fixed a major GUI bug that caused Linux users not to be able to see the components of the app window properly"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-F11-4/main/pull/234[#234])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "*** Wrote the Recipe Commands section and the Edit Recipe Commands section of the user guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "*** Updated UML class diagrams of the `Logic`, `Model` and `Storage` components from the Address Book Level 3 diagrams in the developer guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "*** Added manual testing instructions for adding and removing ingredients in a recipe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "*** Added user stories"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "*** PRs reviewed (with non-trivial comments):"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/18[#18],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/57[#57],"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/61[#61],"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/90[#90],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/92[#92],"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/99[#99],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/113[#113],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/122[#122],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/131[#131],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/139[#139],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/160[#160],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/208[#208],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/245[#245]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "*** Integrated a third-party library, https://commons.apache.org/proper/commons-math/[Apache Commons Math], to the project (https://github.com/AY1920S2-CS2103T-F11-4/main/pull/60[#60])"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dgohkh]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dgohkh]"
      }
    ],
    "authorContributionMap": {
      "gohkh": 92
    }
  },
  {
    "path": "docs/team/hans555.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "\u003d Ong Han Sheng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "\u003d\u003d PROJECT: Cooking Papa"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "Cooking Papa is a desktop cookbook application used to manage recipes and ingredients for cooking. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 15 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "* *Major enhancement*: Added the ability to cook a recipe using inventory ingredients"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "** What it does: Allows the user to remove the ingredients in the inventory after cooking a specific recipe inside CookingPapa."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "** Justification: This feature improves the product significantly because it allows the user to remove recipe\u0027s ingredients effectively without"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "having the user to remove the each ingredient separately."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "** Highlights: This enhancement will be one of the most used feature as this application is mainly to aid cooking experience."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "This enhancement helps to integrate the `Cookbook` and `Inventory` systems together to provide a all-in-one application"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "which make this enhancement challenging also."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "** Credits: The implementation of the `Inventory` and `Cookbook` classes was a team effort which is vital to the successful"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "implementation of this feature."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "** Contributed to basic structure of `Step` and `Tag` classes in recipe."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "** Contributed to basic `Recipe` command classes such as managing tag and steps in a recipe."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dhans555\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[by @hans555]]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "*** Kept track of deadlines of project milestones"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "*** Managed bug features for v1.2 (Issue https://github.com/AY1920S2-CS2103T-F11-4/main/issues/118[#118])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "*** Added several tests for existing features"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "(Pull Requests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/57[#57],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/142[142],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/237[#237])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "*** Updated basic parser format to improve clarity"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "(Pull Requests"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/133[#133],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/142[#142])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "*** Updated the existing user guide:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/22[#22]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/132[#132]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "*** Updated the existing development guide:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/43[#43]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "*** Reviewed PRs of team members before merging"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "*** Reported bugs and provided suggestions for other teams in the class (example: https://github.com/hans555/ped/issues[1])"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "include::../UserGuide.adoc[tag\u003dhansheng]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hans555"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hans555"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hans555"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hans555"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dhansheng]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hans555": 81
    }
  },
  {
    "path": "docs/team/shanecsj.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d Chan Shun Jie - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d PROJECT: Cooking Papa"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Cooking Papa is a desktop cookbook application used to manage recipes and ingredients for cooking. The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "It is written in Java, and has about 15 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "* *Major enhancement*: Implemented `inventory cook recipe` command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "** What it does: Allows the user to remove all ingredients of a specified recipe from their inventory after cooking it."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "** Justification: This feature improves the usability of the application significantly as users need to"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "remove the used ingredients from their inventory after preparing a recipe. The application should thus provide"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "a convenient command to assist the user in accomplishing this task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "** Highlights: This feature will be frequently used as it allows users to update their inventory after preparing a recipe."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "** Credits: The implementation and testing of the `Ingredient`, `IngredientList`, `Inventory` and `Cookbook` classes was a team effort which is vital to the successful"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "implementation of this feature."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "* *Minor enhancement*: Implemented commands under `cookbook` category"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "** Implemented the add, remove and view commands and their parsers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "** Implemented skeleton classes for the search commands and their parsers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dshanecsj\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dshanecsj\u0026tabRepo\u003dAY1920S2-CS2103T-F11-4%2Fmain%5Bmaster%5D[Code contributed by @shanecsj]]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "*** Kept track of deadlines and requirements for milestone submissions"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "*** Managed bugs for v1.4 [Issue https://github.com/AY1920S2-CS2103T-F11-4/main/issues/241[#241]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "*** Fixed discrepancies in some commands"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-F11-4/main/pull/243[#243])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-F11-4/main/pull/138[#138])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "*** Updated existing contents of the User Guide: https://github.com/AY1920S2-CS2103T-F11-4/main/pull/31[#31], https://github.com/AY1920S2-CS2103T-F11-4/main/pull/245[#245]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "*** Updated existing contents of the Developer Guide: https://github.com/AY1920S2-CS2103T-F11-4/main/pull/146[#146], https://github.com/AY1920S2-CS2103T-F11-4/main/pull/253[#253]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "*** Reviewed team members\u0027 PR before merging"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "*** Reported Developer Guide suggestions for other teams (Example: https://github.com/AY1920S2-CS2103T-W13-4/main/issues/84[1])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d Cookbook Commands"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Cookbook commands are commands that allow users to add and remove recipes from the cookbook,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "as well as view recipes stored in the cookbook. More commands can be done with recipes, and"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "are covered in \u003c\u003cRecipe\u003e\u003e."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d View a recipe from the cookbook"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "This command allows you to view a recipe, the ingredients required, and the steps to cook it."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Format: `cookbook view recipe INDEX`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|`cookbook view recipe 1`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "a|"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "image::CookbookViewExample2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Note: you must have added a recipe to the cookbook, otherwise Cooking Papa will not be able to show you"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "the details of the recipe."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "A recipe\u0027s details can also be viewed by pressing the \"eye\" icon, without the need to type in the command above:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "image::CookbookViewExample1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Add a new recipe to the cookbook"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "This command allows you to add (and store) a new recipe with the provided recipe details to the cookbook."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Format: `cookbook add recipe n/NAME d/DESCRIPTION [i/INGREDIENT]... [q/QUANTITY]... [s/STEP]... [t/TAG]...`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Examples:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Command | Result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|`cookbook add recipe n/Bacon Carbonara d/Best cream pasta made in Italy`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "a| Adds a recipe with only its name and description specified. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "New recipe added: Bacon Carbonara"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Description: Best cream pasta made in Italy"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Ingredients:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Preparation Steps:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Tags:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "----"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|`cookbook add recipe n/Chicken Ham Sandwich d/Juicy ham sandwiched between crispy toasted bread."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "i/Chicken Ham q/1 slice i/White Bread q/2 slices s/Toast the bread s/Grill the ham."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "t/sandwich t/easy`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "a|"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Adds a recipe with its name, description, ingredients, steps, and tags specified."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "----"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "New recipe (index 1) added: Chicken Ham Sandwich"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "----"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Note: the number of ingredient names provided must be the same as the number of ingredient quantities provided,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "otherwise Cooking Papa will not be able to add the recipe."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Remove a recipe from the cookbook"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "This command allows you to remove a recipe of the specified index from the cookbook."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Format: `cookbook remove recipe INDEX`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|`cookbook remove recipe 1`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "a|"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "----"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Removed recipe: Bacon Carbonara from the cookbook"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "----"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Note: you must have added a recipe to the cookbook, otherwise Cooking Papa will not be able to remove the recipe."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Note: you must have added a recipe to the cookbook, otherwise Cooking Papa will not be able to remove the recipe."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Search recipes by keyword"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "This command allows you to search for recipes by keywords, returning a list of recipes."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Note: Adding more keywords will not narrow the search results, but will expand the search results to return any recipe"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "that contains any of the given keywords."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Format: `cookbook search recipe k/KEYWORD...`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|`cookbook search recipe k/Carbonara`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Searches the cookbook for recipes with names matching the keyword \u0027Carbonara\u0027."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|`cookbook search recipe k/Carbonara k/Simple k/Cheesy`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Searches the cookbook for recipes with names matching the keywords \u0027Carbonara\u0027, or `Simple`, or `Cheesy`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Search recipes by tag"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "This command allows you to search for recipes by tags, returning a list of recipes."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Note: Adding more tags will not narrow the search results, but will expand the search results to return any"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "recipe that contains any of the given tags."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Format: `cookbook search tag t/TAG…`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Examples:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|`cookbook search tag t/Easy`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Searches the cookbook for recipes wisth tags matching \u0027Easy\u0027."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|`cookbook search tag t/Pasta t/Cream t/Easy`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Searches the cookbook for recipes with tags matching \u0027Pasta\u0027, or \u0027Cream\u0027, or \u0027Easy\u0027."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Search recipes by ingredients owned"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "This command allows you to see search for recipes you can cook with your current inventory of ingredients."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Format: `cookbook search inventory`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|`cookbook search inventory`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Searches the cookbook for recipes whose ingredients are available in the inventory."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d List all recipes in the cookbook"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "This commands allows you to view the whole collection of recipes in the cookbook. Additionally, it can be used after"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "using the search commands to view all the recipes."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Format: `cookbook list`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|`cookbook list`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Lists all recipes in the cookbook"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d Remove ingredients of a recipe from the inventory"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "The mechanism is facilitated by `InventoryCookCommand`, which extends the `Command` abstract class. The format of the command is as follows: `inventory cook recipe INDEX`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "This command was implemented to allow users to remove multiple ingredients and their quantities found in a recipe from their inventory."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "If the inventory contains an ingredient that has a higher quantity than specified in the selected recipe, its quantity will be subtracted accordingly."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "If the ingredient has a lower quantity than specified in the selected recipe or if there is a missing ingredient in the inventory, the feature will not be executed and an error will be thrown."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Without this command, users can only remove ingredients through the `inventory remove ingredient` command one at a time."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Moreover, they have to constantly cross-check the ingredient quantities in the recipe for accuracy."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Therefore, this command provides convenience after users have prepared a recipe and wish to update their inventory ingredients through a single step."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Below is a step-by-step sequence of what happens when a user enters this command:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ". The user enters an inventory cook command `inventory cook recipe INDEX` using the command line input."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ". `InventoryCookCommandParser` parses the input to check and verify the input provided by the user. If the input provided is invalid, a `ParseException` will be thrown."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ". The valid index is then passed to `InventoryCookCommand` as an `Index` object."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ". `LogicManager` calls `InventoryCookCommand#execute()` and checks if the `Index` provided is within bounds and if the specified `Recipe` contains ingredients."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "Otherwise, a `CommandException` is thrown."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ". Subsequently, two checks are performed to check if the inventory contains all of the ingredients specified and whether those quantities are sufficient to be subtracted."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ". If all the checks passed, `model#removeInventoryIngredient` is called through a `stream()` to remove the ingredients of a selected recipe from the inventory."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "+"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "----"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "selectedRecipe.getIngredients().stream().forEach(model::removeInventoryIngredient);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ". A `CommandResult` with a success message is returned to `LogicManager` and passed back to `MainWindow` which displays the text to the user through the GUI."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "The following sequence diagram shows how the command `inventory cook recipe 1` works:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ".Sequence Diagram for InventoryCookCommand"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "image::InventoryCookRecipeSequenceDiagram.png[]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Allowing users to execute the `inventory cook recipe` command when there are missing or insufficient ingredients in the inventory."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ".Design considerations for the `inventory cook recipe` command"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "[cols\u003d\"12%,44%,44%\"]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "||Design A: Allow the execution of `inventory cook recipe` command regardless of missing or insufficient ingredients in the inventory  | Design B (Current choice): Do not allow execution of `inventory cook recipe` command when there are missing or insufficient ingredients in the inventory"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Description"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Allow the users to execute the command regardless of missing or insufficient ingredients in the inventory. Missing ingredients will be ignored and ingredients with insufficient quantities will be entirely removed."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|When there are missing or insufficient ingredients in the inventory, the execution of the command will throw an error to warn users whether they have missing ingredients or insufficient ingredients in their inventory."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Pros"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Straightforward for users to use the command as they do not have to check whether they have all the ingredients in sufficient quantities."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Enhances user experience. The application can notify users that they have missing or insufficient ingredients when they attempt to prepare a recipe through this command."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Cons"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|Reduces code readability as more methods and steps are needed to check and isolate a list of missing and insufficient ingredients. This list of ingredients are also to be treated differently from the other ingredients when removing from the inventory."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|A potential hassle for users as they have to ensure that all ingredients are present and are sufficient in their inventory to use the command."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d Miscellaneous"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d UML Diagrams"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Sequence Diagram"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ".Sequence diagram for InventoryCookCommand"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "image::InventoryCookRecipeSequenceDiagram.png[]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Activity Diagram"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ".Activity diagram when user enters `inventory cook recipe` command"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "image::InventoryCookRecipeActivityDiagram.png[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "\u003d\u003d\u003d\u003d Class Diagram"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ".Class diagram for `Cookbook` class"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "image::CookbookClassDiagram.png[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shanecsj": 265
    }
  },
  {
    "path": "docs/team/teo-jun-xiong.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d Teo Jun Xiong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d PROJECT: Cooking Papa"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Cooking Papa is a desktop cookbook application used to manage recipes and ingredients for cooking. The user interacts"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "with it using a CLI (Command Line Input), and it has a GUI (Graphical User Interface) created with JavaFX. It is written"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "in"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Java, and has about"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "15 kLoC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "* *Major enhancement*: implemented and developed Cooking Papa\u0027s GUI"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "** What it does: developed Cooking Papa\u0027s GUI to better reflect its casual usage and more cheerful nature, rather than"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the base"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "AB3\u0027s dark"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "theme."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "** Justification: This feature improves the product significantly because the color scheme is more in line with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Cooking Papa\u0027s use, with the bright yet muted colors complementing the fun font styles, giving off a casual vibe, and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "invites users to use Cooking Papa."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "** Highlights: This enhancement required a lot of understanding of the interactions between various JavaFX objects,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "as well as the base CSS stylesheets provided by AB3, and integrating them together, which took many hours of"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "trial-and-error,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "as well"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "as"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Googling."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "While constraints meant that Cooking Papa would be tested from the command line, a well-designed GUI was imperative"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "to convey the application\u0027s casual nature."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Coordinating various colors proved to be a challenge, and the color scheme went through three rounds of reiterations,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "before settling on the current one. Moving away from the rigid sharp edges of AB3 was also a challenge, and required"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "various UI elements and color choices to \"soften\" the overall aesthetics of Cooking Papa."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "** Credits: _JavaFX 11_ as well as _SceneBuilder_ helped immensely in the development of the GUI."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "* *Major enhancement*: integrated `cookbook view recipe` command into the GUI"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "** Justification: This feature improves the product significantly because it integrated the GUI seamlessly with the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "** Highlights: This enhancement arose due to the lack of connection between the existing `cookbook view recipe`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "command, which shows users the details of a recipe, and the GUI. It was initially displayed as a plain text result in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the result display box of the GUI, and this causes command results (errors, success messages, usage messages), to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "appear in the same UI component as the recipe details, which meant that the component had two uses."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "The idea to make `cookbook view recipe` a button on the GUI that could be toggled surfaced to improve user experience."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Developing a button that"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "could toggle the details shown was trivial, however, limiting the command to just a button on the GUI meant that it"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "would not be testable on the command line. Therefore, the challenge was to connect the GUI to the Logic component,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "and typing `cookbook view recipe` on the command line (or in the command box of the GUI) would trigger the button."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "The result was a GUI much more interactive and functional, but it was still testable on"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "the command line."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "** Credits: _JavaFX 11_ as well as _SceneBuilder_ helped immensely in the development of the `cookbook view recipe`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "button."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "* *Minor enhancement*: added an command which allowed users to export the ingredients in their cart to a PDF file,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "which allows them bring along with them to the supermarkets. This feature solved the constraint of the application"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "being desktop-only, and with it, Cooking Papa can _still_ help users when they are away from their computers."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "Credits: _Apache PDFbox_ and user  _mkl_ on"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://stackoverflow.com/questions/19635275/how-to-generate-multiple-lines-in-pdf-using-apache-pdfbox[StackOverflow]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "for a great example on using `PDFbox`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "* *Minor enhancement*: regularly reviewed source code, and carried out testing and bug fixing. This includes the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "standardisation of coding style and messages shown to the user ("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/122[#122],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/228[#228],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/242[#242])."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003df11\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dteo-jun-xiong\u0026tabRepo\u003dAY1920S2-CS2103T-F11-4%2Fmain%5Bmaster%5D[Source code]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "*** Managed releases `v1.2.1`, `v1.3`, and `v1.4` (3 releases) out of 5 releases(`v1.1`, `v1.2`, `v.1.2.1`, `v1.3`, `v1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                                                                                                .4`) on"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "GitHub"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "*** Managed features development under Project on GitHub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "(https://github.com/AY1920S2-CS2103T-F11-4/main/projects/1[features])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "*** Updated the GUI color scheme and designed GUI layout:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/137[#137]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 56% to 77%:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/131[#131]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "*** Integrated button with `cookbook view recipe` command:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/208[#208]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "*** Implemented core features:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/115[#115],"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/139[#139],"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/254[#254]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "*** Removed instances of AB3 in user guide:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/13[#13]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "*** Added UML diagrams and document implementation of core features:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/121[#121]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "*** Reviewed user and developer guide and enforced standardisation:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/228[#228]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/22[#22],"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/44[#44],"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/57[#57],"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/61[#61],"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/131[#131],"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/220[#220],"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/221[#221],"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-4/main/pull/222[#222]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "*** Contributed to forum discussions:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/nus-cs2103-AY1920S2/forum/issues/15[15]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "https://github.com/nus-cs2103-AY1920S2/forum/issues/65[65]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "*** Integrated a third party library (Apache PDFbox) to the project"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "(https://github.com/AY1920S2-CS2103T-F11-4/main/pull/212[#212])"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "*** Integrated new Github plugins to the team repo: TravisCI, AppVeyor, Coveralls, Codacy"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "include::../UserGuide.adoc[tag\u003dhelp]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexit]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcalendar]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfaq]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Cooking Papa UI component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dui]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Implementation of a core feature: `cookbook add recipe`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddrecipe]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d UML Diagrams for `cookbook add recipe`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddrecipesequence]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Design Considerations for `cookbook add recipe`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddrecipedesign]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Implementation of a core feature: `cart export`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcartexport]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d UML Diagrams for `cart export`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcartexportsequence]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d Implementation of a core feature: `cookbook view recipe`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dviewrecipe]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003d\u003d\u003d UML Sequence Diagrams for `cookbook view recipe`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dviewrecipesequence]"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 166
    }
  },
  {
    "path": "docs/team/tzihiang.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d Tay Zi Hiang Willis - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d PROJECT: Cooking Papa"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "CookingPapa acts is an application targeted towards university students that want to learn how to cook by themselves. Users will interact with the application with a CLI, integrated with a GUI created with JavaFX. It acts as storage for recipes, keeps track of an inventory of your current ingredients and also has a shopping list to remind users what to buy on their next trip to the supermarket."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "* *Major enhancement*: Cart move to inventory"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "** What it does: With one command, the user is able to migrate all the ingredients from the cart to the inventory. From there, the inventory will"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "be updated with the added ingredients and the cart will be empty."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "** Justification: This enhancement will allow the user to skip the need to update their own inventory after their shopping trip. Instead of having"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "to keep track what ingredients they have to add from cart to the inventory and eventually delete everything in the cart, this command will do it all in"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "one line."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "** Highlights: This command will be frequently used, since cart serves as a convenient shopping list for our users. After shopping, it is common to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "update your inventory of ingredients and this feature can accomplish this need easily."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "** Credits: Ingredient checks and tests are a group effort. The whole team contributed in allowing the `Ingredient` class to be built well, which"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "is a key part of our project."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "* *Minor enhancement*: Adding an ingredient to the cart"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "** What it does: Allows the user to add an ingredient with a specified quantity into the cart. If the ingredient name already exists, it"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "adds on to the quantity of the ingredient in the cart (Provided that the unit given in the quantity is the same)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "** Justification: This feature allows the user to add ingredients to the cart so that they can be reminded of what to but at their next trip to the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "supermarket."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "** Highlights: This enhancement allows users to choose the number of ingredients they would actually need to complete their recipe. For example."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "if the recipe calls for 3 eggs while the user only has 1 in their inventory, they can simply add 2 more manually into the cart."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "** Credits: Ingredient checks and tests are a group effort. The whole team contributed in allowing the `Ingredient` class to be built well, which"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "is a key part of our project."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dtzihiang\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[tzihiang\u0027s contribution to CookingPapa on *Github*]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "*** Kept track of deadlines to meet for the team"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "*** Brainstormed together with team the application, what it does and its main features."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "**** Added to several test cases for added features: https://github.com/AY1920S2-CS2103T-F11-4/main/pull/215[#215]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "*** Added on to the UG and created a summary table for all commands: https://github.com/AY1920S2-CS2103T-F11-4/main/pull/221[#221]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "*** Added on to the DG, with updated UML tables: https://github.com/AY1920S2-CS2103T-F11-4/main/pull/227[#227]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "*** Reviewed PRs before merging"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "*** Asked questions and answered questions regarding project with team mates."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "*** Contributed to bug reports during PE Dry Run using CATcher."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "[[Cart]]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d Cart Commands http://github.com/tzihiang[(by Tay Zi Hiang Willis)]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Cart commands are commands that allow you to easily add ingredients needed for a recipe"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "into a shopping cart. This provides convenience for your grocery shopping needs."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Add ingredients in a recipe to the cart"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command allows you to add all the ingredients in a recipe to the cart."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `cart add recipe INDEX`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`cart add recipe 1`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds all the ingredients required of recipe 1 to the cart."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Add ingredients to the cart"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command allows you to add ingredients to the cart."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `cart add ingredient i/INGREDIENT q/QUANTITY`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`cart add ingredient i/Eggs q/5`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds 5 eggs to the cart."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Remove ingredients from the cart"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command allows you to remove ingredients from the cart."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "You can indicate the quantity you want to remove for an ingredient, which should not be greater that than the"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "ingredient\u0027s quantity."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Please ensure that the unit of the quantity matches the ingredient\u0027s unit in the cart."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Note: If you do not indicate any quantity, all entries in the cart that have the specified ingredient name will be removed"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "regardless of the unit."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `cart remove ingredient i/INGREDIENT [q/QUANTITY]`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`cart remove ingredient i/Eggs`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes all eggs from the cart"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`cart remove ingredient i/Milk q/200ml`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes 200ml of milk from the cart."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "_(If your cart had 500 ml of milk, it will be subtracted and updated to 300 ml of milk)_"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Clear all the items in the cart"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command allows you to clear all the items in the cart. It can be used to discard an unwanted cart,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "or to clear the cart after completing the purchase."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `cart clear`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`cart clear`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Clears the cart of all items."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Move all ingredients currently in the cart to inventory"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command allows you to move all the ingredients from the cart into your inventory. This command also"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "empties your cart. This is helpful after the user has finished shopping and wish to conveniently move all"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "the ingredients to the inventory."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `cart move`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Example:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|`cart move`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Moves all ingredients from the cart into the inventory. Also clears the cart of all items."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Export ingredients in cart to PDF file"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command allows you to export all the ingredients in the cart to a PDF file. The PDF file will be located in the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "same folder as Cooking Papa."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Note: if a previous version of the PDF file, `cart.pdf` is open in another program (Internet browser, Adobe PDF),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Cooking Papa will not be able to export the cart."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "- Format: `cart export`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| Command | Result"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| `cart export`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "a|image::CookbookExportExample1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "_The exported PDF file will be in the same folder where Cooking Papa is located._"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "image::CookbookExportExample2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "_An example of the PDF file exported from the sample cart in Cooking Papa._"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d Command Summary https://github.com/tzihiang[(by Tay Zi Hiang Willis)]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "[cols\u003d\"2,3,5a\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| Category | Addtional Parameters | Result"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".8+|``cookbook``"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``view recipe INDEX``"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Shows recipe at given INDEX."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``add recipe n/NAME d/DESCRIPTION``"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds a new empty recipe with the given NAME and DESCRIPTION."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``add recipe n/NAME d/DESCRIPTION [i/INGREDIENT] [q/QUANTITY] [s/STEP] [t/TAG]``"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds a new recipe with the given NAME and DESCRIPTION."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "INGREDIENT and its QUANTITY, STEP, and TAG are optional parameters and will be added according to input from user."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``remove recipe INDEX``"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Remove recipe at given INDEX."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``search recipe k/KEYWORD``"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Search for recipes by a keyword."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``search recipe t/TAG``"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Search for recipes by tags."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``search inventory``"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Search for recipes whose ingredients are available in the inventory."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``list``"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Views the whole collection of recipes in the cookbook."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".6+|``recipe``"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``INDEX add ingredient i/INGREDIENT q/QUANTITY``"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Add ingredients to a recipe at given INDEX."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``INDEX remove ingredient i/INGREDIENT q/QUANTITY``"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes the ingredient and the specified quantity from recipe at given INDEX."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``INDEX add step x/STEP_INDEX s/STEP_DESCRIPTION``"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds a step at STEP_INDEX with STEP_DESCRIPTION to the recipe at given INDEX."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``INDEX remove step x/STEP_INDEX``"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Remove a step at STEP_INDEX from the recipe at given INDEX."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``INDEX add tag t/TAG``"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds a tag \u0027TAG\u0027 to the recipe at given INDEX."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``INDEX remove tag t/TAG``"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes a tag \u0027TAG\u0027 to the recipe at given INDEX."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".4+|``inventory``"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``add ingredient  i/INGREDIENT q/QUANTITY``"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds QUANTITY of INGREDIENTS into your inventory."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``remove ingredient i/INGREDIENT q/QUANTITY``"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes QUANTITY of INGREDIENTS from your inventory."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``clear``"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes all ingredients from the inventory."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``cook recipe INDEX``"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes the ingredients and its\u0027 corresponding quantities of recipe INDEX from the inventory."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".6+|``cart``"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``add recipe INDEX``"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds all ingredients required of recipe at given INDEX to the cart."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``add ingredient i/INGREDIENT q/QUANTITY``"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Adds QUANTITY of INGREDIENTS into your cart."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``remove ingredient i/INGREDIENT q/QUANTITY``"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Removes QUANTITY of INGREDIENTS from your cart."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``clear``"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Clears the cart of all ingredients."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``move``"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Moves all the ingredients from the cart to the inventory, clearing the cart in the process."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|``export``"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Exports current cart into a PDF."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d Adding ingredients to inventory and cart"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "The inventory and cart acts as storage for `Ingredient` classes. They are facilitated by `InventoryCommand` and `CartCommand`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "respectively, which extends the `Command` abstract class. Since `CartAddCommand` and `InventoryAddCommand` both serve the"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "same purpose in different contexts of `Cart` and `Inventory` respectively, they will be mentioned together in tandem. +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command was implemented to allow the user know to add an ingredient to the cart or inventory respectively."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "An ingredient only has two main components - its name and quantity. We allow the user to use their own measurement up to their own"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "preferences and do not force any fixed unit of measurement. Although similar, `Cart` and `Ingredients` differ in certain functions"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "from a user\u0027s point of view. For a user to immediately sort where they wish to sort the ingredient they are adding, `Cart` and"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Below is a step-by-step sequence of what happens when the command `cart add ingredient i/INGREDIENT_NAME q/INGREDIENT_QUANTITY` is added."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". The user adds a ingredient to the cart by entering the command `cart  add ingredient i/INGREDIENT_NAME q/INGREDIENT_QUANTITY` in the command line input."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `CartAddCommandParser` parsers the input to check and verify that the input provided for `i/INGREDIENT_NAME` amd `q/INGREDIENT_QUANTITY`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "are correct. Otherwise a `ParseException` will be thrown."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". The fields are then passed to `CartAddIngredientCommand` as an `Ingredient` object and is returned to `LogicManager`."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `LogicManager` calls `CartAddIngredientCommand#execute()` and checks if the `Ingredient` object given has the same `INGREDIENT_NAME` and"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "`INGREDIENT_QUANTITY` unit. If that `Ingredient` exists, it will simply add on to the quantity of that ingredient. Otherwise,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "a new instance of that `Ingredient` will be added to the Cart."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". If `CommandException` is not thrown, `Model#addCartIngredient` will be executed, with the given `Ingredient` as the parameter"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `Model#addCartIngredient` then executes, adding the `Ingredient` to the local cart storage and updates with"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "`Model#updateFilteredCartIngredientList()`."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". A `CommandResult` with the successful text message is returned to `LogicManager` and will be displayed to the user via the GUI to feedback to the"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "user that the `Ingredient` has been successfully added."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "The above implementation is the same for `Inventory` with the command `inventory  add ingredient i/INGREDIENT_NAME q/INGREDIENT_QUANTITY`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "The following sequence diagram shows how the function of adding ingredients to cart work (full command omitted for brevity):"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".Sequence diagram for CartAddIngredientCommand"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "image::CartAddIngredientSequenceDiagram.png[]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: The need for many parsers for this command"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".Design considerations for the need for many parsers for this command"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "[cols\u003d\"12%,44%,44%\"]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| |Design A (Current choice): Create parsers for every individual action | Design B: Create parsers for each specific action"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Description"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|The command will go through the parsers in the following order: `CookingPapaParser` -\u003e `CartCommandParser` -\u003e `CartAddCommandParser`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "-\u003e `CartAddIngredientParser` before finally returning `CartAddIngredientCommand`. We eventually went with this as we wanted the add"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "functionality to be expanded, namely to be able to add all the ingredients of cookbook recipes into the cart."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| `CartAddCommand` will not be created to facilitate `CartAddIngredientCommand` and `CartAddRecipeIngredientCommand`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Pros"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|More organised and can do more with `cart add` as the prefix."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|The classes can be more specific and atomic in their actions."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Cons"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Many parser classes to make and keep track of."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Might lead to disorganisation during troubleshooting with so many classes to keep track."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d Moving ingredients from cart to inventory"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "The user may use this command after their shopping trip. With this one command, all ingredients will be shifted from the cart to the inventory."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command is implemented to ease the process of having the user adding every single ingredient to their inventory after they have bought ingredients from their cart"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "and eventually deleting the cart after that tedious process. These gives a convenience to users that frequently use our application and we forsee"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "that such an action will be used very often by these users. As this command only performs an atomic action, no extra"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "arguments are needed to further supplement the use of this command."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "This command is facilitated by `CartMoveCommand`, which extends the `Command` class. The format of the command is as follows:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "`cart move`."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "Below is a step by step sequence of what happens when the user executes this command."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". The user enters the command `cart move` in to the command line input."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `CartMoveCommandParser` then ensures that the user does not enter any other commands after `cart clear`."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `CartMoveCommandParser` then returns a `CartMoveCommand` and returns it to `LogicManager`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `LogicManager` calls `CartMoveCommand#execute()`. If there are other commands after `cart clear`, a `CommandException`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "will be thrown."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". If `CommandException` is not thrown, `Model#cartMoveIngredients()` will be executed."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". `Model#cartMoveIngredients()` will move every ingredient from the `cart` and add it into the `inventory`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ". A `CommandResult` with the success message text will be returned to `LogicManager`, which will then be passed to `MainWindow`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "and will then feedback to the user."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "The following sequence diagram shows how this function works (full command omitted for brevity):"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".Sequence Diagram for CartMoveCommand"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "image::CartMoveSequenceDiagram.png[]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Allowing users to move some or all ingredients from cart to inventory"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ".Design considerations for allowing users to move some or all ingredients from cart to inventory"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "[cols\u003d\"12%,44%,44%\"]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| |Design A (Current choice): Move all ingredients | Design B: Allow users to move individually or exclude some ingredients when moving"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Description"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|There was a consideration to allow the user to move the ingredients by individual ingredients. Eventually the options was"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "not given as we know that typical users will want to move all the ingredients except for individual ingredients."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "| The use cases of such an action happening is very little and the user can simply manually remove the few"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "ingredients they do not wish to add to the inventory after using the `cart move` command. The user can also manually"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "add back the ingredients to the cart after it is cleared if they wish to."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Pros"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Straightforward to implement"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Lesser implementations, more time to focus on other parts of the project"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Cons"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Lesser functionality to users that really want to only move certain ingredients"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|Poorer user experience for users that do not want to move all ingredients from the cart to inventory on a regular basis,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "|\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 343
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.CartStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.CookbookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.InventoryStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonCartStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonCookbookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonInventoryStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CookingPapa ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CookbookStorage cookbookStorage \u003d new JsonCookbookStorage(userPrefs.getCookbookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryStorage inventoryStorage \u003d new JsonInventoryStorage(userPrefs.getInventoryFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartStorage cartStorage \u003d new JsonCartStorage(userPrefs.getCartFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storage \u003d new StorageManager(cookbookStorage, inventoryStorage, cartStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s cookbook, inventory, cart and"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The data from the sample cookbook, inventory or cart will be used instead if {@code storage}\u0027s respective data"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * is not found, or an empty cookbook, inventory and cart will be used instead if errors occur when reading"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code storage}\u0027s data."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cReadOnlyCookbook\u003e cookbookOptional;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cReadOnlyInventory\u003e inventoryOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cReadOnlyCart\u003e cartOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyCookbook initialCookbook;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyInventory initialInventory;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyCart initialCart;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            cookbookOptional \u003d storage.readCookbook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            inventoryOptional \u003d storage.readInventory();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            cartOptional \u003d storage.readCart();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!cookbookOptional.isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Cookbook\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!inventoryOptional.isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Inventory\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!cartOptional.isPresent()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Cart\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCookbook \u003d cookbookOptional.orElseGet(SampleDataUtil::getSampleCookbook);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialInventory \u003d inventoryOptional.orElseGet(SampleDataUtil::getSampleInventory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCart \u003d cartOptional.orElseGet(SampleDataUtil::getSampleCart);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Cooking Papa\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialInventory \u003d new Inventory();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCart \u003d new Cart();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Cooking Papa\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialInventory \u003d new Inventory();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCart \u003d new Cart();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new ModelManager(initialCookbook, initialInventory, initialCart, userPrefs);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Cooking Papa\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.info(\"Starting Cooking Papa \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Cooking Papa ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 54,
      "teo-jun-xiong": 2,
      "-": 158
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return \"Current log level : \" + logLevel"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nPreference file Location : \" + userPrefsFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String LOG_FILE \u003d \"cookingpapa.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX \u003d \"The recipe index provided is out of bounds \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\n %s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_INVALID_STEP_DISPLAYED_INDEX \u003d \"The step index provided is out of bounds\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STEPS \u003d \"This step already exists in the recipe\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"This tag already exists in the recipe\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG \u003d \"The Tag provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_RECIPES_LISTED_OVERVIEW \u003d \"%1$d recipe(s) listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_DIFFERENT_NUMBER_OF_INPUTS \u003d \"The number of ingredient names provided (%d)\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \" should be equal to the number of ingredient quantities (%d) provided.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 6,
      "hans555": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/fraction/MixedFraction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.commons.core.fraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.math.BigInteger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.apache.commons.math3.fraction.Fraction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a mixed fraction."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class MixedFraction extends Fraction {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUM_OF_PARTS_IN_PURE_FRACTION \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int WHOLE_PART_OF_PURE_FRACTION \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int FRACTIONAL_PART_POSITION_IN_PURE_FRACTION \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUM_OF_PARTS_IN_MIXED_FRACTION \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int WHOLE_PART_POSITION_IN_MIXED_FRACTION \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int FRACTIONAL_PART_POSITION_IN_MIXED_FRACTION \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUM_OF_PARTS_IN_FRACTION \u003d 2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUMERATOR_POSITION \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int DENOMINATOR_POSITION \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a {@code MixedFraction} from a {@code Fraction}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public MixedFraction(Fraction f) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(f.getNumerator(), f.getDenominator());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a {@code MixedFraction} from a numerator and a denominator."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public MixedFraction(int num, int den) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(num, den);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the string argument as an unsigned mixed fraction."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param s a {@code String} containing the {@code MixedFraction} representation to be parsed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the mixed fraction value represented by the argument."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws NumberFormatException if the string does not contain a parsable unsigned mixed fraction."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static MixedFraction parseUnsignedMixedFraction(String s) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (s \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new NumberFormatException(\"null\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int wholePart;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int fractionalPartPosition;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String[] splitInput \u003d s.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (splitInput.length \u003d\u003d NUM_OF_PARTS_IN_PURE_FRACTION) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            wholePart \u003d WHOLE_PART_OF_PURE_FRACTION;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            fractionalPartPosition \u003d FRACTIONAL_PART_POSITION_IN_PURE_FRACTION;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (splitInput.length \u003d\u003d NUM_OF_PARTS_IN_MIXED_FRACTION) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            wholePart \u003d Integer.parseInt(splitInput[WHOLE_PART_POSITION_IN_MIXED_FRACTION]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            fractionalPartPosition \u003d FRACTIONAL_PART_POSITION_IN_MIXED_FRACTION;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new NumberFormatException(s);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String[] splitFraction \u003d splitInput[fractionalPartPosition].split(\"/\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (splitFraction.length !\u003d NUM_OF_PARTS_IN_FRACTION) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new NumberFormatException(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int numerator \u003d Integer.parseInt(splitFraction[NUMERATOR_POSITION]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int denominator \u003d Integer.parseInt(splitFraction[DENOMINATOR_POSITION]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        numerator +\u003d wholePart * denominator;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new MixedFraction(numerator, denominator);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the {@code MixedFraction} representation of a {@code BigDecimal} value."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param value the {@code BigDecimal} value."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the {@code MixedFraction} representation of the {@code BigDecimal} value."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static MixedFraction getFromBigDecimal(BigDecimal value) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String stringRepresentation \u003d value.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        boolean hasFractionalPart \u003d stringRepresentation.split(\"\\\\.\").length \u003e 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int wholePart \u003d Integer.parseInt(stringRepresentation.split(\"\\\\.\")[0]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int numerator \u003d wholePart;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int denominator \u003d 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (hasFractionalPart) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String fractionalPartString \u003d stringRepresentation.split(\"\\\\.\")[1];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            denominator \u003d new BigInteger(\"10\").pow(fractionalPartString.length()).intValue();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (numerator \u003e\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                numerator \u003d wholePart * denominator + Integer.parseInt(fractionalPartString);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                numerator \u003d wholePart * denominator - Integer.parseInt(fractionalPartString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new MixedFraction(numerator, denominator);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds the specified mixed fraction."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public MixedFraction add(MixedFraction mixedFraction) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new MixedFraction(super.add(mixedFraction));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Subtracts the specified mixed fraction."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public MixedFraction subtract(MixedFraction mixedFraction) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new MixedFraction(super.subtract(mixedFraction));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Divides this mixed fraction by the specified mixed fraction."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public MixedFraction divide(MixedFraction mixedFraction) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new MixedFraction(super.divide(mixedFraction));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int wholePart \u003d intValue();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int numerator \u003d getNumerator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int denominator \u003d getDenominator();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (numerator \u003e 0) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            numerator \u003d numerator - (wholePart * denominator);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (wholePart \u003c 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            numerator \u003d (wholePart * denominator) - numerator;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (numerator \u003d\u003d 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return String.format(\"%d\", wholePart);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (wholePart \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return String.format(\"%d/%d\", numerator, denominator);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"%d %d/%d\", wholePart, numerator, denominator);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the Cookbook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see seedu.address.model.Model#getCookbook()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyCookbook getCookbook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the Inventory."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see seedu.address.model.Model#getInventory()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyInventory getInventory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the Cart."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see seedu.address.model.Model#getCart()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyCart getCart();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of cookbook recipes */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of inventory ingredients */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredInventoryIngredientList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of cart ingredients */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredCartIngredientList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered cart */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredCart();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 cookbook file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCookbookFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 cart file path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCartFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 38,
      "teo-jun-xiong": 7,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.CookingPapaParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final CookingPapaParser cookingPapaParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cookingPapaParser \u003d new CookingPapaParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        logger.info(\"USER COMMAND: \" + commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Command command \u003d cookingPapaParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            storage.saveCookbook(model.getCookbook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            storage.saveInventory(model.getInventory());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            storage.saveCart(model.getCart());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ReadOnlyCookbook getCookbook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getCookbook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ReadOnlyInventory getInventory() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getInventory();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ReadOnlyCart getCart() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getCart();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredCookbookRecipeList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredInventoryIngredientList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getFilteredInventoryIngredientList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredCartIngredientList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getFilteredCartIngredientList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredCart() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return model.getFilteredCartIngredientList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCookbookFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getCookbookFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getInventoryFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCartFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getCartFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 40,
      "teo-jun-xiong": 15,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * The application should expand the view for a recipe."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final boolean view;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * The index of the recipe to view;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final Index recipeIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.view \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipeIndex \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean view, Index recipeIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.view \u003d view;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean isViewRecipe() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return view;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public Index getRecipeIndex() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return recipeIndex;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 30,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \": exits CookingPapa.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof ExitCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "teo-jun-xiong": 1,
      "hans555": 7,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \": shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof HelpCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "teo-jun-xiong": 1,
      "hans555": 6,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Adds ingredients to the cart."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public abstract class CartAddCommand extends CartCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" ingredient\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": adds an ingredient to your cart.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" ingredient \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"10\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" recipe INDEX\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": adds all the ingredients from a recipe to your cart.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Parameters: INDEX (must be a valid positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" recipe 1\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 5,
      "teo-jun-xiong": 2,
      "tzihiang": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartAddIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Adds an ingredient to the cart"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartAddIngredientCommand extends CartAddCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ingredient\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ingredient added: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": adds ingredients to your cart.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"10\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private final Ingredient toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a CartAddIngredientCommand to add the specified {@code Ingredient} to the cart"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartAddIngredientCommand(Ingredient toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.addCartIngredient(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof CartAddIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                \u0026\u0026 toAdd.equals(((CartAddIngredientCommand) other).toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 3,
      "hans555": 1,
      "tzihiang": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartAddRecipeIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Adds all the ingredients from the indexed recipe to cart"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartAddRecipeIngredientCommand extends CartAddCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recipe\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Ingredients from recipe %1$s added.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + CartAddCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": adds all the ingredients from a recipe to your cart.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"10\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index recipeIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a CartAddIngredientCommand to add the specified {@code Ingredient} to the cart"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public CartAddRecipeIngredientCommand(Index recipeIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (recipeIndex.getZeroBased() \u003e\u003d model.getCookbook().getRecipeList().size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe targetedRecipe \u003d model.getCookbook().getRecipeList().get(recipeIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        targetedRecipe.getIngredients().stream().forEach(model::addCartIngredient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetedRecipe.getName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || (other instanceof CartAddRecipeIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 (recipeIndex.equals(((CartAddRecipeIngredientCommand) other).recipeIndex)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "teo-jun-xiong": 27,
      "hans555": 13,
      "tzihiang": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Removes all ingredients from the cart"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartClearCommand extends CartCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All ingredients from cart cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_SUCCESS_EMPTY \u003d \"Your cart is empty.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": removes all ingredients from your cart.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Creates a CartClearCommand to clear the cart"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartClearCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        boolean isEmpty \u003d model.getCart().getIngredientList().size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.setCart(new Cart());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return isEmpty ? new CommandResult(MESSAGE_SUCCESS_EMPTY) : new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || other instanceof CartClearCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 18,
      "shanecsj": 1,
      "tzihiang": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.CompatibleIngredientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Represents an Cart command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public abstract class CartCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"cart\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Stores the details to edit the cart with."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static class EditIngredientDescriptor {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private CompatibleIngredientList ingredients;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        public EditIngredientDescriptor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public EditIngredientDescriptor(EditIngredientDescriptor toCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            setIngredients(toCopy.ingredients);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Creates and returns a {@code Cart} with the details of {@code CartToEdit}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * edited with {@code editCartDescriptor}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public static Cart createEditedCart(Cart cartToEdit, EditIngredientDescriptor editCartDescriptor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            assert cartToEdit !\u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            CompatibleIngredientList updatedIngredients \u003d editCartDescriptor.getIngredients()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(cartToEdit.getCompatibleIngredientList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new Cart((ReadOnlyCart) updatedIngredients);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return CollectionUtil.isAnyNonNull(ingredients);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setIngredients(CompatibleIngredientList ingredients) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cCompatibleIngredientList\u003e getIngredients() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return Optional.ofNullable(ingredients);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            if (!(other instanceof CartCommand.EditIngredientDescriptor)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            EditIngredientDescriptor e \u003d (EditIngredientDescriptor) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return getIngredients().equals(e.getIngredients());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 8,
      "teo-jun-xiong": 3,
      "tzihiang": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartExportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.util.PdfExporter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Exports the ingredients in cart to a pdf file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartExportCommand extends CartCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All cart ingredients have been exported to a pdf file!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": exports all ingredients inside the cart to a PDF file located in the same folder\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"as Cooking Papa\\n. Parameters:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String MESSAGE_FILE_NOT_FOUND \u003d \"\u0027cart.pdf\u0027 is opened in another application. Please close \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"it and try again.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CartExportCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            PdfExporter.exportCart(model.getCart().getIngredientList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return new CommandResult(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || other instanceof CartExportCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartMoveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * This command moves all ingredients from the cart to inventory"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartMoveCommand extends CartCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"move\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All ingredients from cart successfully added to your inventory!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_SUCCESS_EMPTY \u003d \"Your cart is empty.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": adds all your ingredients from the cart to your inventory.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"This also empties the cart in the process.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a CartMoveCommand to move the ingredients in the cart to the inventory"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CartMoveCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        boolean isEmpty \u003d model.getCart().getIngredientList().size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.getCart().getIngredientList().forEach(model::addInventoryIngredient);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.setCart(new Cart());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return isEmpty ? new CommandResult(MESSAGE_SUCCESS_EMPTY) : new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || other instanceof CartMoveCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 3,
      "teo-jun-xiong": 5,
      "tzihiang": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartRemoveIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.NonPositiveIngredientQuantityException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Removes an ingredient from the cart"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartRemoveIngredientCommand extends CartCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INGREDIENT_KEYWORD \u003d \"ingredient\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String ALL_KEYWORD \u003d \"All\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s removed from cart\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_INGREDIENT_QUANTITY_TOO_HIGH \u003d \"The quantity specified is too large\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_INGREDIENT_NOT_FOUND \u003d \"The cart does not contain %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": removes ingredients from your cart.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"Examples:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \" + PREFIX_INGREDIENT_QUANTITY + \"10\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final IngredientName ingredientName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Optional\u003cIngredientQuantity\u003e ingredientQuantity;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Creates a CartRemoveIngredientCommand to remove an ingredient with the specified {@code IngredientName} and"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code IngredientQuantity} (if any) to the cart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CartRemoveIngredientCommand(IngredientName ingredientName,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                       Optional\u003cIngredientQuantity\u003e ingredientQuantity) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientQuantity \u003d ingredientQuantity;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            ingredientQuantity.map(x -\u003e new Ingredient(ingredientName, x))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .ifPresentOrElse(model::removeCartIngredient, () -\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                        model.removeCartIngredient(ingredientName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String ingredientRemoved \u003d ingredientQuantity.map(x -\u003e new Ingredient(ingredientName, x).toString())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElseGet(() -\u003e ALL_KEYWORD + \" \" + ingredientName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, ingredientRemoved));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IngredientNotFoundException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INGREDIENT_NOT_FOUND, ingredientName));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (NonPositiveIngredientQuantityException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INGREDIENT_QUANTITY_TOO_HIGH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof CartRemoveIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 ingredientName.equals(((CartRemoveIngredientCommand) other).ingredientName)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 ingredientQuantity.equals(((CartRemoveIngredientCommand) other).ingredientQuantity));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 42,
      "teo-jun-xiong": 6,
      "tzihiang": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Adds a recipe into the cookbook."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookAddCommand extends CookbookCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD + \" \" + \"recipe\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": adds a new recipe to the cookbook.\\n\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_NAME + \"INGREDIENT_NAME] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_QUANTITY + \"INGREDIENT_QUANTITY] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"[\" + PREFIX_STEP_DESCRIPTION + \"STEP_DESCRIPTION] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\\n\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Examples:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"- \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + RECIPE_KEYWORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_NAME + \"Bacon Carbonara \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + \"Best cream pasta made in Italy.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"- \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + RECIPE_KEYWORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_NAME + \"Chicken Ham Sandwich \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + \"Juicy ham sandwiched between crispy toasted bread. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Chicken Ham \" + PREFIX_INGREDIENT_QUANTITY + \"1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"White Bread \" + PREFIX_INGREDIENT_QUANTITY + \"2 slices \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_STEP_DESCRIPTION + \"Toast the bread \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_STEP_DESCRIPTION + \"Grill the ham \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_TAG + \"Sandwich \" + PREFIX_TAG + \"Easy\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New recipe (index %2$d) added: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe (%1$s) already exists in the cookbook.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final Recipe toAdd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Creates a CookbookAddCommand to add a new {@code recipe} to the cookbook"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookAddCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        toAdd \u003d recipe;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (model.hasCookbookRecipe(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_RECIPE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    toAdd.getName().fullRecipeName));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.addCookbookRecipe(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getName().fullRecipeName,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                model.getCookbook().getRecipeList().indexOf(toAdd) + 1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof CookbookAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 toAdd.equals(((CookbookAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "shanecsj": 68,
      "teo-jun-xiong": 4,
      "hans555": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a cookbook command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class CookbookCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"cookbook\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String RECIPE_KEYWORD \u003d \"recipe\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 12,
      "shanecsj": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.RecipeDefaultComparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Shows all the recipes in the cookbook."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookListCommand extends CookbookCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": shows the list of recipes in the cookbook.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showing all recipes in the cookbook.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.sortCookbook(new RecipeDefaultComparator());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.updateFilteredCookbookRecipeList(Model.PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || other instanceof CookbookListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "teo-jun-xiong": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookRemoveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Removes a recipe identified using it\u0027s displayed index from the cookbook."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookRemoveCommand extends CookbookCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_WORD + \" \" + RECIPE_KEYWORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": remove the recipe of the specified index from the cookbook\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive valid integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + RECIPE_KEYWORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted recipe: %1$s from the cookbook\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookRemoveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    CookbookRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Recipe recipeToRemove \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.removeCookbookRecipe(recipeToRemove);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, recipeToRemove.getName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof CookbookRemoveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((CookbookRemoveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "shanecsj": 47,
      "teo-jun-xiong": 8,
      "hans555": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookSearchByInventoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RECIPES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeContainsInventoryIngredientsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.RecipeInventoryIngredientsSimilarityComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookSearchByInventoryCommand extends CookbookSearchCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \"\\n\" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + SEARCH_INVENTORY_COMMAND + \": finds all\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    + \" recipes whose ingredient lists contain ingredients in the inventory, and displays them as a \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    + \"list with index numbers. The list is sorted by the level of similarity between the ingredients\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    + \" in the recipe and the ingredients in the inventory.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    + \"Parameters: \" + SEARCH_INVENTORY_COMMAND"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + SEARCH_INVENTORY_COMMAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookSearchByInventoryCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyInventory inventory \u003d model.getInventory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.sortCookbook(new RecipeInventoryIngredientsSimilarityComparator(inventory));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.updateFilteredCookbookRecipeList(new RecipeContainsInventoryIngredientsPredicate(inventory));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                String.format(MESSAGE_RECIPES_LISTED_OVERVIEW, model.getFilteredCookbookRecipeList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || other instanceof CookbookSearchByInventoryCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 5,
      "shanecsj": 23,
      "teo-jun-xiong": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookSearchByKeywordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RECIPES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEARCH_KEYWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookSearchByKeywordCommand extends CookbookSearchCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_WORD + \" \" + RECIPE_KEYWORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": finds all recipes whose recipe names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as an alphabetically sorted list with \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: \" + PREFIX_SEARCH_KEYWORD + \"KEYWORD\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Example:\" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_WORD + \" \" + RECIPE_KEYWORD + \" \" + PREFIX_SEARCH_KEYWORD + \"bacon\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final RecipeNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookSearchByKeywordCommand(RecipeNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        model.updateFilteredCookbookRecipeList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                String.format(MESSAGE_RECIPES_LISTED_OVERVIEW, model.getFilteredCookbookRecipeList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof CookbookSearchByKeywordCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 predicate.equals(((CookbookSearchByKeywordCommand) other).predicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shanecsj": 39,
      "teo-jun-xiong": 7,
      "hans555": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookSearchByTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeContainsTagsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookSearchByTagCommand extends CookbookSearchCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD + \" \" + SEARCH_TAG_COMMAND"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": Finds all recipes whose recipe names contain any of the specified tags (case-insensitive) and\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \" displays them as an alphabetically sorted list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Parameters: \" + PREFIX_TAG + \"TAG\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + SEARCH_TAG_COMMAND + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_TAG + \"breakfast\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final RecipeContainsTagsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CookbookSearchByTagCommand(RecipeContainsTagsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.updateFilteredCookbookRecipeList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                String.format(Messages.MESSAGE_RECIPES_LISTED_OVERVIEW, model.getFilteredCookbookRecipeList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || (other instanceof CookbookSearchByTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u0026\u0026 (predicate.equals(((CookbookSearchByTagCommand) other).predicate)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shanecsj": 29,
      "teo-jun-xiong": 14,
      "hans555": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookSearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEARCH_KEYWORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Searches for a recipe in the cookbook based on inventory/keyword/tag."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public abstract class CookbookSearchCommand extends CookbookCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String SEARCH_INVENTORY_COMMAND \u003d \"inventory\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String SEARCH_TAG_COMMAND \u003d \"tag\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": searches the cookbook by keyword(s), tag(s) or your inventory.\\n\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters for searching the cookbook by keyword(s): \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + RECIPE_KEYWORD + \" \" + PREFIX_SEARCH_KEYWORD + \"KEYWORD\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + RECIPE_KEYWORD + \" \" + PREFIX_SEARCH_KEYWORD + \"carbonara\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters for searching the cookbook by tag(s): \" + SEARCH_TAG_COMMAND + \" \" + PREFIX_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + SEARCH_TAG_COMMAND + \" \" + PREFIX_TAG + \"breakfast\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Parameters for searching the cookbook by the ingredients in your inventory: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + SEARCH_INVENTORY_COMMAND + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + SEARCH_INVENTORY_COMMAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 19,
      "teo-jun-xiong": 4,
      "hans555": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * View a recipe identified using it\u0027s displayed index from the cookbook."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookViewCommand extends CookbookCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_WORD + \" \" + RECIPE_KEYWORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": views the recipe identified by the index number used in the displayed recipe list.\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive valid integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + RECIPE_KEYWORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Viewing recipe %1$d (%2$s)\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    CookbookViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "                lastShownList.get(targetIndex.getZeroBased()).getName().fullRecipeName),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "                true, targetIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof CookbookViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((CookbookViewCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "shanecsj": 45,
      "teo-jun-xiong": 7,
      "hans555": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/inventory/InventoryAddIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Adds an ingredient to the inventory"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryAddIngredientCommand extends InventoryCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String INGREDIENT_KEYWORD \u003d \"ingredient\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ingredient added: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + INGREDIENT_KEYWORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": adds ingredients to your inventory.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_WORD + \" \" + INGREDIENT_KEYWORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"10\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private final Ingredient toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a InventoryAddIngredientCommand to add the specified {@code Ingredient} to the inventory"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public InventoryAddIngredientCommand(Ingredient toAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addInventoryIngredient(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof InventoryAddIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                \u0026\u0026 toAdd.equals(((InventoryAddIngredientCommand) other).toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 5,
      "teo-jun-xiong": 10,
      "tzihiang": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/inventory/InventoryClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Removes all ingredients from the inventory"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryClearCommand extends InventoryCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All ingredients from inventory cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_SUCCESS_EMPTY \u003d \"Your inventory is empty.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": removes all ingredients from your inventory.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a InventoryClearCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public InventoryClearCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        boolean isEmpty \u003d model.getInventory().getIngredientList().size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.setInventory(new Inventory());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return isEmpty ? new CommandResult(MESSAGE_SUCCESS_EMPTY) : new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || other instanceof InventoryClearCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 6,
      "shanecsj": 5,
      "tzihiang": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/inventory/InventoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.CompatibleIngredientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents an inventory command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class InventoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"inventory\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Stores the details to edit the inventory with."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static class EditIngredientDescriptor {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private CompatibleIngredientList ingredients;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        public EditIngredientDescriptor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public EditIngredientDescriptor(EditIngredientDescriptor toCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            setIngredients(toCopy.ingredients);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Creates and returns a {@code Inventory} with the details of {@code inventoryToEdit}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * edited with {@code editInventoryDescriptor}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public static Inventory createEditedInventory(Inventory inventoryToEdit,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                                                      EditIngredientDescriptor editInventoryDescriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            assert inventoryToEdit !\u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            CompatibleIngredientList updatedIngredients \u003d editInventoryDescriptor.getIngredients()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(inventoryToEdit.getCompatibleIngredientList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new Inventory((ReadOnlyInventory) updatedIngredients);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return CollectionUtil.isAnyNonNull(ingredients);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setIngredients(CompatibleIngredientList ingredients) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cCompatibleIngredientList\u003e getIngredients() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return Optional.ofNullable(ingredients);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            if (!(other instanceof InventoryCommand.EditIngredientDescriptor)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            EditIngredientDescriptor e \u003d (EditIngredientDescriptor) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return getIngredients().equals(e.getIngredients());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 19,
      "teo-jun-xiong": 3,
      "tzihiang": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/inventory/InventoryCookCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.RecipeInventoryIngredientsSimilarityComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Removes all the ingredients of the selected recipe from the inventory"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class InventoryCookCommand extends InventoryCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cook\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String RECIPE_KEYWORD \u003d \"recipe\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All ingredients from recipe %1$s removed from inventory\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_MISSING_INGREDIENT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            \"Your inventory does not contain all the ingredients of recipe %1$s.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_QUANTITY \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            \"Your inventory contains insufficient quantities of the ingredients in recipe %1$s.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_NO_INGREDIENT_IN_RECIPE \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "            \"Recipe %1$s does not require any ingredients to cook.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + RECIPE_KEYWORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": removes all ingredients of a specified recipe from your inventory.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer)\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + RECIPE_KEYWORD + \" 1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Creates a InventoryCookRecipeCommand to remove all the {@code Ingredient} of a recipe from the inventory"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public InventoryCookCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireAllNonNull(targetIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns true if all the ingredients in recipe exist in the inventory"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private boolean hasInventoryIngredients(ReadOnlyInventory inventory, Recipe recipe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(inventory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ObservableList\u003cIngredient\u003e inventoryList \u003d inventory.getIngredientList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ObservableList\u003cIngredient\u003e recipeIngredients \u003d recipe.getIngredients();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return recipeIngredients.stream().map(recipeIngredient -\u003e inventoryList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .stream().map(inventoryIngredient -\u003e inventoryIngredient.isCompatibleWith(recipeIngredient))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .reduce(false, (x, y) -\u003e x || y, (x , y) -\u003e x || y))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .allMatch(isCompatible -\u003e isCompatible.equals(true));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Returns true if all ingredients\u0027s quantity in recipe is lesser than or equal to the ingredient\u0027s quantity"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * in inventory"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * The ingredients in the recipe must exist in the inventory."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private boolean hasSufficientInventoryIngredients(ReadOnlyInventory inventory, Recipe recipe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(inventory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return RecipeInventoryIngredientsSimilarityComparator.calculateSimilarity(recipe, inventory) \u003d\u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        List\u003cRecipe\u003e recipeList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d recipeList.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    InventoryCookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Recipe selectedRecipe \u003d recipeList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (selectedRecipe.getIngredients().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_INGREDIENT_IN_RECIPE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    selectedRecipe.getName().toString()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!hasInventoryIngredients(model.getInventory(), selectedRecipe)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_MISSING_INGREDIENT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    selectedRecipe.getName().toString()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } else if (!hasSufficientInventoryIngredients(model.getInventory(), selectedRecipe)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INSUFFICIENT_QUANTITY,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    selectedRecipe.getName().toString()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        selectedRecipe.getIngredients().stream().forEach(model::removeInventoryIngredient);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof InventoryCookCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((InventoryCookCommand) other).targetIndex));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 4,
      "shanecsj": 77,
      "hans555": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/inventory/InventoryRemoveIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.NonPositiveIngredientQuantityException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Creates an InventoryRemoveIngredientCommand to remove an ingredient with the specified {@code IngredientName} and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * {@code IngredientQuantity} (if any) from the inventory"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryRemoveIngredientCommand extends InventoryCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INGREDIENT_KEYWORD \u003d \"ingredient\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String ALL_KEYWORD \u003d \"All\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s removed from inventory\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_INGREDIENT_QUANTITY_TOO_HIGH \u003d \"The quantity specified is too large\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_INGREDIENT_NOT_FOUND \u003d \"The inventory does not contain %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + INGREDIENT_KEYWORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \":removes ingredients to your inventory.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"Examples:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + INGREDIENT_KEYWORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \" + PREFIX_INGREDIENT_QUANTITY + \"10\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final IngredientName ingredientName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Optional\u003cIngredientQuantity\u003e ingredientQuantity;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a InventoryAddIngredientCommand to add the specified {@code Ingredient} to the inventory"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public InventoryRemoveIngredientCommand(IngredientName ingredientName,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                            Optional\u003cIngredientQuantity\u003e ingredientQuantity) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientQuantity \u003d ingredientQuantity;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            ingredientQuantity.map(x -\u003e new Ingredient(ingredientName, x))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .ifPresentOrElse(model::removeInventoryIngredient, () -\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                        model.removeInventoryIngredient(ingredientName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String ingredientRemoved \u003d ingredientQuantity.map(x -\u003e new Ingredient(ingredientName, x).toString())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElseGet(() -\u003e ALL_KEYWORD + \" \" + ingredientName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, ingredientRemoved));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IngredientNotFoundException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INGREDIENT_NOT_FOUND, ingredientName));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (NonPositiveIngredientQuantityException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INGREDIENT_QUANTITY_TOO_HIGH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof InventoryRemoveIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 ingredientName.equals(((InventoryRemoveIngredientCommand) other).ingredientName)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 ingredientQuantity.equals(((InventoryRemoveIngredientCommand) other).ingredientQuantity));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 44,
      "teo-jun-xiong": 10,
      "tzihiang": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Adds a step/ingredient/tag to a recipe inside the cookbook"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class RecipeAddCommand extends RecipeCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" INDEX \" + COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": adds an ingredient, a step, or a tag to a recipe with the given INDEX.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for adding an ingredient: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + INGREDIENT_KEYWORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"12\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for adding a step: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_STEP_INDEX + \"STEP_INDEX \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_STEP_DESCRIPTION + \"STEP_DESCRIPTION\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + STEP_KEYWORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_STEP_INDEX + \"1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_STEP_DESCRIPTION + \"Add potatoes and water to a large pot, and bring to a boil.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for adding a tag: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + TAG_KEYWORD + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_TAG + \"Pasta\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 25,
      "shanecsj": 5,
      "teo-jun-xiong": 4,
      "hans555": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeAddIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IncompatibleIngredientException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Adds an ingredient to a recipe."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class RecipeAddIngredientCommand extends RecipeAddCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ingredient added for %2$s: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_INCOMPATIBLE_UNITS \u003d \"%1$s has different units in %2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Ingredient toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Creates a RecipeAddIngredientCommand to add the specified {@code Ingredient} to the recipe"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public RecipeAddIngredientCommand(Index index, Ingredient toAdd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireAllNonNull(index, toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert index.getZeroBased() \u003c lastShownList.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.setIngredients(recipeToEdit.getIngredients());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            ingredients.add(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            editRecipeDescriptor.setIngredients(ingredients.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd, editedRecipe.getName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IncompatibleIngredientException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INCOMPATIBLE_UNITS, toAdd, recipeToEdit.getName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                || (other instanceof RecipeAddIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RecipeAddIngredientCommand) other).toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 70,
      "teo-jun-xiong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeAddStepCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STEP_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Adds a step to a recipe."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class RecipeAddStepCommand extends RecipeAddCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New step added for %1$s: %2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String NEXT_KEYWORD \u003d \"next\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index recipeIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Optional\u003cIndex\u003e stepIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Step toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeAddStepCommand(Index recipeIndex, Optional\u003cIndex\u003e stepIndex, Step toAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(recipeIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.stepIndex \u003d stepIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (recipeIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(recipeIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList targetStepList \u003d recipeToEdit.getSteps();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (targetStepList.contains(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(((Messages.MESSAGE_DUPLICATE_STEPS)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (stepIndex.isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "            if (stepIndex.get().getZeroBased() \u003e targetStepList.asUnmodifiableObservableList().size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "                // ensure the step index is valid"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_STEP_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "            targetStepList.add(stepIndex.get(), toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "            targetStepList.add(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert stepIndex.isPresent();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editRecipeDescriptor.setSteps(targetStepList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedRecipe.getName().fullRecipeName, toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof RecipeAddStepCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RecipeAddStepCommand) other).toAdd)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 stepIndex.equals(((RecipeAddStepCommand) other).stepIndex));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 17,
      "teo-jun-xiong": 8,
      "hans555": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeAddTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Adds a tag to a recipe."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class RecipeAddTagCommand extends RecipeAddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tag added: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index recipeIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Tag toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeAddTagCommand(Index recipeIndex, Tag toAdd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(recipeIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (recipeIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert recipeIndex.getZeroBased() \u003c lastShownList.size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(recipeIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Set\u003cTag\u003e targetTagSet \u003d recipeToEdit.getTags();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!targetTagSet.add(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editRecipeDescriptor.setTags(targetTagSet);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof RecipeAddTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RecipeAddTagCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "hans555": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a recipe command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class RecipeCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"recipe\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String STEP_KEYWORD \u003d \"step\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String INGREDIENT_KEYWORD \u003d \"ingredient\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String TAG_KEYWORD \u003d \"tag\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" INDEX \" + \"add\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": adds an ingredient, a step, or a tag to a recipe with the given INDEX.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for adding an ingredient: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"add\" + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + INGREDIENT_KEYWORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"12\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for adding a step: \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_STEP_INDEX + \"STEP_INDEX \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_STEP_DESCRIPTION + \"STEP_DESCRIPTION\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"add\" + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + STEP_KEYWORD + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_STEP_INDEX + \"1 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_STEP_DESCRIPTION + \"Add potatoes and water to a large pot, and bring to a boil.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for adding a tag: \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"add\" + \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + TAG_KEYWORD + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_TAG + \"Pasta\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"\\n\" + COMMAND_CATEGORY + \" INDEX \" + \"remove\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": removes an ingredient, a step, or a tag from a recipe with the given INDEX.\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"\\nParameters for removing an ingredient: \\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY]\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"remove\" + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"12\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"* if no quantity is specified, all instances of the specified ingredient will be removed.\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for removing a step: \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_STEP_INDEX + \"STEP_INDEX\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"remove\" + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_STEP_INDEX + \"1\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for removing a tag: \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"remove\" + \" \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_TAG + \"Pasta\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Stores the details to edit the recipe with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * corresponding field value of the recipe."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static class EditRecipeDescriptor {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private RecipeName name;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private RecipeDescription description;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private ObservableList\u003cIngredient\u003e ingredients;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private UniqueStepList steps;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        public EditRecipeDescriptor() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public EditRecipeDescriptor(EditRecipeDescriptor toCopy) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setIngredients(toCopy.ingredients);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setSteps(toCopy.steps);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Creates and returns a {@code Recipe} with the details of {@code recipeToEdit}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * edited with {@code editRecipeDescriptor}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public static Recipe createEditedRecipe(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            assert recipeToEdit !\u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            RecipeName updatedName \u003d editRecipeDescriptor.getName()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(recipeToEdit.getName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            RecipeDescription updatedDescription \u003d editRecipeDescriptor.getDescription()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(recipeToEdit.getDescription());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            UniqueIngredientList updatedIngredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            updatedIngredients.setIngredients(editRecipeDescriptor.getIngredients()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(recipeToEdit.getIngredients()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            UniqueStepList updatedSteps \u003d editRecipeDescriptor.getSteps()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(recipeToEdit.getSteps());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Set\u003cTag\u003e updatedTags \u003d editRecipeDescriptor.getTags()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(recipeToEdit.getTags());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new Recipe(updatedName, updatedDescription, updatedIngredients, updatedSteps, updatedTags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description, ingredients, steps, tags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setName(RecipeName name) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cRecipeName\u003e getName() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setDescription(RecipeDescription description) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cRecipeDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setIngredients(ObservableList\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cObservableList\u003cIngredient\u003e\u003e getIngredients() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.ofNullable(ingredients);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setSteps(UniqueStepList steps) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.steps \u003d steps;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cUniqueStepList\u003e getSteps() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.ofNullable(steps);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!(other instanceof EditRecipeDescriptor)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            EditRecipeDescriptor e \u003d (EditRecipeDescriptor) other;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    \u0026\u0026 getIngredients().equals(e.getIngredients())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    \u0026\u0026 getSteps().equals(e.getSteps())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 150,
      "teo-jun-xiong": 44,
      "shanecsj": 14,
      "hans555": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeRemoveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Remove a step/ingredient/tag in a recipe inside the cookbook."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "public abstract class RecipeRemoveCommand extends RecipeCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" INDEX \" + COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": removes an ingredient, a step, or a tag from a recipe with the given INDEX.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"\\nParameters for removing an ingredient: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY]\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"12\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"* if no quantity is specified, all instances of the specified ingredient will be removed.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for removing a step: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_STEP_INDEX + \"STEP_INDEX\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_STEP_INDEX + \"1\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for removing a tag: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_TAG + \"Pasta\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 4,
      "teo-jun-xiong": 3,
      "hans555": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeRemoveIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IncompatibleIngredientException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.NonPositiveIngredientQuantityException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Removes an ingredient from a recipe."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class RecipeRemoveIngredientCommand extends RecipeRemoveCommand {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String ALL_KEYWORD \u003d \"All\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s removed from %2$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_INGREDIENT_QUANTITY_TOO_HIGH \u003d \"The quantity specified is too large\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_INCOMPATIBLE_UNITS \u003d \"%1$s has different units in %2$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_INGREDIENT_NOT_FOUND \u003d \"%2$s does not contain %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final IngredientName ingredientName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final Optional\u003cIngredientQuantity\u003e ingredientQuantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Creates a RecipeRemoveIngredientCommand to remove the specified {@code Ingredient} from the recipe"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeRemoveIngredientCommand(Index index, IngredientName ingredientName,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                                         Optional\u003cIngredientQuantity\u003e ingredientQuantity) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireAllNonNull(index, ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.ingredientQuantity \u003d ingredientQuantity;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert (index.getZeroBased() \u003c lastShownList.size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.setIngredients(recipeToEdit.getIngredients());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            ingredientQuantity.map(x -\u003e new Ingredient(ingredientName, x))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    .ifPresentOrElse(ingredients::remove, () -\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        ingredients.remove(ingredientName));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            editRecipeDescriptor.setIngredients(ingredients.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            String ingredientRemoved \u003d ingredientQuantity.map(x -\u003e new Ingredient(ingredientName, x).toString())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElseGet(() -\u003e ALL_KEYWORD + \" \" + ingredientName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, ingredientRemoved,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    recipeToEdit.getName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IngredientNotFoundException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INGREDIENT_NOT_FOUND,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    ingredientName, recipeToEdit.getName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IncompatibleIngredientException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INCOMPATIBLE_UNITS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    ingredientName, recipeToEdit.getName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (NonPositiveIngredientQuantityException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INGREDIENT_QUANTITY_TOO_HIGH));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || (other instanceof RecipeRemoveIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 ingredientName.equals(((RecipeRemoveIngredientCommand) other).ingredientName)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 ingredientQuantity.equals(((RecipeRemoveIngredientCommand) other).ingredientQuantity));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 27,
      "teo-jun-xiong": 40,
      "shanecsj": 23,
      "hans555": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeRemoveStepCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Removes a step from a recipe."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class RecipeRemoveStepCommand extends RecipeRemoveCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Step deleted for %1$s: %2$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index recipeIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index stepIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeRemoveStepCommand(Index recipeIndex, Index stepIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(recipeIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(stepIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.stepIndex \u003d stepIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (recipeIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(recipeIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList targetStepList \u003d recipeToEdit.getSteps();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (stepIndex.getZeroBased() \u003e\u003d targetStepList.asUnmodifiableObservableList().size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "            // ensure the step index is valid"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert (stepIndex.getZeroBased() \u003c targetStepList.asUnmodifiableObservableList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Step toRemove \u003d targetStepList.remove(stepIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editRecipeDescriptor.setSteps(targetStepList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedRecipe.getName().fullRecipeName, toRemove));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof RecipeRemoveStepCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 stepIndex.equals(((RecipeRemoveStepCommand) other).stepIndex));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 8,
      "hans555": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeRemoveTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Removes a tag to a recipe."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class RecipeRemoveTagCommand extends RecipeRemoveCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tag deleted: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index recipeIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Tag toRemove;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeRemoveTagCommand(Index recipeIndex, Tag toRemove) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(recipeIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.toRemove \u003d toRemove;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (recipeIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert (recipeIndex.getZeroBased() \u003c lastShownList.size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(recipeIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Set\u003cTag\u003e targetTagSet \u003d recipeToEdit.getTags();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!targetTagSet.remove(toRemove)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException((Messages.MESSAGE_INVALID_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editRecipeDescriptor.setTags(targetTagSet);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toRemove));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof RecipeRemoveTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 toRemove.equals(((RecipeRemoveTagCommand) other).toRemove));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 2,
      "hans555": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean arePrefixesPresent(Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e this.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 5,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final Prefix PREFIX_SEARCH_KEYWORD \u003d new Prefix(\"k/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final Prefix PREFIX_RECIPE_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final Prefix PREFIX_RECIPE_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_NAME \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Prefix PREFIX_STEP_INDEX \u003d new Prefix(\"x/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Prefix PREFIX_STEP_DESCRIPTION \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 4,
      "shanecsj": 7,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CookingPapaParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.cart.CartCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.cookbook.CookbookCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.inventory.InventoryCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.recipe.RecipeCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CookingPapaParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandCategory\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses user input into a command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final String commandCategory \u003d matcher.group(\"commandCategory\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        switch (commandCategory) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case CookbookCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new CookbookCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case RecipeCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new RecipeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case InventoryCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new InventoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case CartCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case ExitCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new ExitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case HelpCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 64,
      "hans555": 2,
      "tzihiang": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExitCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Parses input arguments and creates a new ExitCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class ExitCommandParser implements Parser\u003cExitCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern EXIT_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExitCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a ExitCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public ExitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d EXIT_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    ExitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Parses input arguments and creates a new HelpCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern HELP_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HelpCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a HelpCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public HelpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d HELP_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hans555": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DIFFERENT_NUMBER_OF_INPUTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses a {@code String recipeName} into a {@code RecipeName}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the given {@code recipeName} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static RecipeName parseRecipeName(String recipeName) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(recipeName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String trimmedRecipeName \u003d recipeName.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!RecipeName.isValidRecipeName(trimmedRecipeName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(RecipeName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new RecipeName(trimmedRecipeName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses a {@code String recipeDescription} into a {@code RecipeDescription}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the given {@code recipeDescription} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static RecipeDescription parseRecipeDescription(String recipeDescription) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(recipeDescription);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String trimmedRecipeDescription \u003d recipeDescription.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!RecipeDescription.isValidRecipeDescription(trimmedRecipeDescription)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(RecipeName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new RecipeDescription(trimmedRecipeDescription);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses an {@code String ingredientName} into an {@code IngredientName}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the given {@code ingredientName} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static IngredientName parseIngredientName(String ingredientName) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String trimmedIngredientName \u003d ingredientName.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!IngredientName.isValidIngredientName(trimmedIngredientName)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(IngredientName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new IngredientName(trimmedIngredientName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses an {@code String ingredientQuantity} into an {@code IngredientQuantity}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the given {@code ingredientQuantity} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static IngredientQuantity parseIngredientQuantity(String ingredientQuantity) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredientQuantity);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String trimmedIngredientQuantity \u003d ingredientQuantity.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!IngredientQuantity.isValidIngredientQuantity(trimmedIngredientQuantity)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(IngredientQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new IngredientQuantity(trimmedIngredientQuantity);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses an {@code String stepDescription} into an {@code Step}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hans555"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the given {@code Step} is invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static Step parseStep(String stepDescription) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(stepDescription);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String trimmedStepDescription \u003d stepDescription.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!Step.isValidStep(trimmedStepDescription)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(Step.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new Step(trimmedStepDescription);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Parses {@code List\u003cString\u003e ingredientNames} into a {@code List\u003cIngredientName\u003e}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static List\u003cIngredientName\u003e parseIngredientNames(List\u003cString\u003e ingredientNames) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(ingredientNames);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredientNames.stream().map(IngredientName::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Parses {@code List\u003cString ingredientQuantities} into a {@code List\u003cIngredientQuantity\u003e}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static List\u003cIngredientQuantity\u003e parseIngredientQuantities(List\u003cString\u003e ingredientQuantities) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(ingredientQuantities);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredientQuantities.stream().map(IngredientQuantity::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Parses the given {@code List\u003cIngredientName\u003e names} and {@code List\u003cIngredientQuantity\u003e quantities}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * into a {@code UniqueIngredientList}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @throws ParseException if the size of the two lists are different."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static List\u003cIngredient\u003e parseIngredients(List\u003cIngredientName\u003e names, List\u003cIngredientQuantity\u003e quantities)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (names.size() !\u003d quantities.size()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    String.format(MESSAGE_DIFFERENT_NUMBER_OF_INPUTS, names.size(), quantities.size()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return IntStream.range(0, names.size())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .mapToObj(i -\u003e new Ingredient(names.get(i), quantities.get(i)))"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Parses {@code List\u003cString\u003e stepDescriptions} into a {@code UniqueStepList}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static UniqueStepList parseSteps(List\u003cString\u003e stepDescriptions) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(stepDescriptions);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        UniqueStepList steps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (String stepDescription : stepDescriptions) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            steps.add(new Step(stepDescription));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return steps;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 25,
      "teo-jun-xiong": 51,
      "shanecsj": 16,
      "hans555": 17,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddRecipeIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new CartAddCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartAddCommandParser implements Parser\u003cCartAddCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern CART_ADD_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\" *(?\u003ccategory\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartAddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartAddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d CART_ADD_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CartAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String category \u003d matcher.group(\"category\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "        switch (category) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case CartAddIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new CartAddIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case CartAddRecipeIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new CartAddRecipeIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CartAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "hans555": 19,
      "tzihiang": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartAddIngredientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddIngredientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new CartAddIngredientCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartAddIngredientCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartAddIngredientCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartAddIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    CartAddIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_NAME).isPresent();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_QUANTITY).isPresent();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientQuantity ingredientQuantity \u003d ParserUtil.parseIngredientQuantity(argMultimap"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_QUANTITY).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        Ingredient ingredient \u003d new Ingredient(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new CartAddIngredientCommand(ingredient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 4,
      "tzihiang": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartAddRecipeIngredientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddRecipeIngredientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new CartAddRecipeIngredientCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartAddRecipeIngredientCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartAddRecipeIngredientCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartAddRecipeIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Index recipeIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "            recipeIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    CartAddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new CartAddRecipeIngredientCommand(recipeIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 5,
      "hans555": 12,
      "tzihiang": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartClearCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses no input to return a CartClearCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartClearCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses no arguments in the context of the CartCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartClearCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartClearCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartClearCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    CartClearCommand.MESSAGE_SUCCESS_EMPTY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 3,
      "tzihiang": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartExportCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartMoveCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartRemoveIngredientCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "* Parses input arguments and into a {@code CartCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static final Pattern CART_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .compile(\" *(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a CartCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final Matcher matcher \u003d CART_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        // For now, implementation will only be done for the whole ingredient, and not quantity"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        case CartAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new CartAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case CartRemoveIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartRemoveIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case CartClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case CartMoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartMoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        case CartExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return new CartExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 12,
      "shanecsj": 2,
      "tzihiang": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartExportCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartExportCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Parses input arguments and creates a new CartExportCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartExportCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * and returns a CartExportCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CartExportCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return new CartExportCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CartExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartMoveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartMoveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses no input to return a CartDoneCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartMoveCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartMoveCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartMoveCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CartMoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartRemoveIngredientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartRemoveIngredientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryAddIngredientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new CartAddIngredientCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartRemoveIngredientCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Pattern CART_REMOVE_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .compile(CartRemoveIngredientCommand.INGREDIENT_KEYWORD + \"*(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartRemoveIngredientCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartRemoveIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final Matcher matcher \u003d CART_REMOVE_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    InventoryAddIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    CartRemoveIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_NAME).isPresent();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cIngredientQuantity\u003e ingredientQuantity \u003d argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_QUANTITY)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                ? Optional.of(ParserUtil.parseIngredientQuantity(argMultimap.getValue(PREFIX_INGREDIENT_QUANTITY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    .get()))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new CartRemoveIngredientCommand(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 5,
      "shanecsj": 15,
      "teo-jun-xiong": 4,
      "tzihiang": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cookbook/CookbookAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookAddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Parses input arguments and creates a new CookbookAddCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookAddCommandParser implements Parser\u003cCookbookAddCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern COOKBOOK_ADD_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\" *recipe(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookAddCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookAddCommand object for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d COOKBOOK_ADD_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    CookbookAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RECIPE_NAME, PREFIX_RECIPE_DESCRIPTION, PREFIX_INGREDIENT_NAME,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        PREFIX_INGREDIENT_QUANTITY, PREFIX_STEP_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_RECIPE_NAME, PREFIX_RECIPE_DESCRIPTION)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    CookbookAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_RECIPE_NAME, PREFIX_RECIPE_DESCRIPTION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_RECIPE_NAME).isPresent();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_RECIPE_DESCRIPTION).isPresent();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        RecipeName recipeName \u003d ParserUtil.parseRecipeName(argMultimap.getValue(PREFIX_RECIPE_NAME).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        RecipeDescription recipeDescription \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                ParserUtil.parseRecipeDescription(argMultimap.getValue(PREFIX_RECIPE_DESCRIPTION).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        List\u003cIngredientName\u003e ingredientNames \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                ParserUtil.parseIngredientNames(argMultimap.getAllValues(PREFIX_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        List\u003cIngredientQuantity\u003e ingredientQuantities \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                ParserUtil.parseIngredientQuantities(argMultimap.getAllValues(PREFIX_INGREDIENT_QUANTITY));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.setIngredients(ParserUtil.parseIngredients(ingredientNames, ingredientQuantities));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        UniqueStepList steps \u003d ParserUtil.parseSteps(argMultimap.getAllValues(PREFIX_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CookbookAddCommand(new Recipe(recipeName, recipeDescription, ingredients, steps, tags));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "shanecsj": 41,
      "teo-jun-xiong": 27,
      "hans555": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cookbook/CookbookCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookRemoveCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookSearchCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookViewCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* Parses input arguments and into a {@code CookbookCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CookbookCommandParser implements Parser\u003cCookbookCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Pattern COOKBOOK_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\" *(?\u003ccommandWord\u003e\\\\S+) *(?\u003ccategory\u003erecipe|tag|inventory)?(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a CookbookCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a CookbookCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CookbookCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final Matcher matcher \u003d COOKBOOK_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String category \u003d matcher.group(\"category\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        case CookbookAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new CookbookAddCommandParser().parse(category + \" \" + arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        case CookbookRemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new CookbookRemoveCommandParser().parse(category + \" \" + arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        case CookbookSearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new CookbookSearchCommandParser().parse(category + \" \" + arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        case CookbookViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new CookbookViewCommandParser().parse(category + \" \" + arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        case CookbookListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new CookbookListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                CookbookSearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 19,
      "teo-jun-xiong": 6,
      "shanecsj": 26,
      "hans555": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cookbook/CookbookListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Parses input arguments and creates a new CookbookListCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class CookbookListCommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern COOKBOOK_LIST_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\"\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookListCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a CookbookListCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public CookbookListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d COOKBOOK_LIST_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    CookbookListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new CookbookListCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 2,
      "hans555": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cookbook/CookbookRemoveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookRemoveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Parses input arguments and creates a new CookbookRemoveCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookRemoveCommandParser implements Parser\u003cCookbookRemoveCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern COOKBOOK_REMOVE_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\" *recipe *(?\u003carguments\u003e\\\\d+)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookRemoveCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookRemoveCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookRemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d COOKBOOK_REMOVE_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    CookbookRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new CookbookRemoveCommand(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    CookbookRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 26,
      "teo-jun-xiong": 6,
      "hans555": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cookbook/CookbookSearchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEARCH_KEYWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookSearchByInventoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookSearchByKeywordCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookSearchByTagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookSearchCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeContainsTagsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Parses input arguments and creates a new CookbookSearchCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookSearchCommandParser implements Parser\u003cCookbookSearchCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern COOKBOOK_SEARCH_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\" *(?\u003ccategory\u003erecipe|tag|inventory)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookSearchCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookSearchCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookSearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d COOKBOOK_SEARCH_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    CookbookSearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String category \u003d matcher.group(\"category\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        switch(category) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case CookbookSearchCommand.SEARCH_INVENTORY_COMMAND:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseSearchByInventory(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        case CookbookSearchCommand.RECIPE_KEYWORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseSearchByKeyword(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case CookbookSearchCommand.SEARCH_TAG_COMMAND:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseSearchByTag(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    CookbookSearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookSearchByKeywordCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookSearchByKeywordCommand object for execution."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookSearchByKeywordCommand parseSearchByKeyword(String args) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SEARCH_KEYWORD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_SEARCH_KEYWORD) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                CookbookSearchByKeywordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_SEARCH_KEYWORD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        List\u003cString\u003e trimmedArgs \u003d argMultimap.getAllValues(PREFIX_SEARCH_KEYWORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CookbookSearchByKeywordCommand(new RecipeNameContainsKeywordsPredicate(trimmedArgs));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookSearchByTagCommand"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookSearchByTagCommand object for execution."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookSearchByTagCommand parseSearchByTag(String args) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_TAG) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                CookbookSearchByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_TAG);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        List\u003cString\u003e trimmedArgs \u003d argMultimap.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CookbookSearchByTagCommand(new RecipeContainsTagsPredicate(trimmedArgs));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookSearchByInventoryCommand"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookSearchByInventoryCommand object for execution."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CookbookSearchByInventoryCommand parseSearchByInventory(String args) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new CookbookSearchByInventoryCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 76,
      "teo-jun-xiong": 18,
      "hans555": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cookbook/CookbookViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookViewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Parses input arguments and creates a new CookbookViewCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookViewCommandParser implements Parser\u003cCookbookViewCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern COOKBOOK_VIEW_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\" *recipe *(?\u003carguments\u003e\\\\d+)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookViewCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookViewCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d COOKBOOK_VIEW_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    CookbookViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new CookbookViewCommand(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    CookbookViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 27,
      "teo-jun-xiong": 5,
      "hans555": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/inventory/InventoryAddIngredientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryAddIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new InventoryAddIngredientCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryAddIngredientCommandParser implements Parser\u003cInventoryCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Pattern INVENTORY_ADD_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .compile(InventoryAddIngredientCommand.INGREDIENT_KEYWORD + \"*(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the InventoryCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a InventoryAddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public InventoryAddIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final Matcher matcher \u003d INVENTORY_ADD_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    InventoryAddIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    InventoryAddIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_NAME).isPresent();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_QUANTITY).isPresent();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientQuantity ingredientQuantity \u003d ParserUtil.parseIngredientQuantity(argMultimap"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_QUANTITY).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        Ingredient ingredient \u003d new Ingredient(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new InventoryAddIngredientCommand(ingredient);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 16,
      "teo-jun-xiong": 6,
      "tzihiang": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/inventory/InventoryClearCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses no input to return a InventoryClearCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryClearCommandParser implements Parser\u003cInventoryCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses no arguments in the context of the InventoryCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a InventoryClearommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public InventoryClearCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new InventoryClearCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    InventoryClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "tzihiang": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/inventory/InventoryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryAddIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCookCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryRemoveIngredientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* Parses input arguments and into a {@code InventoryCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class InventoryCommandParser implements Parser\u003cInventoryCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static final Pattern INVENTORY_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .compile(\" *(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a InventoryCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a InventoryCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public InventoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final Matcher matcher \u003d INVENTORY_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case InventoryAddIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new InventoryAddIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case InventoryRemoveIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new InventoryRemoveIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        case InventoryCookCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new InventoryCookCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case InventoryClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new InventoryClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 18,
      "teo-jun-xiong": 4,
      "shanecsj": 4,
      "hans555": 1,
      "tzihiang": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/inventory/InventoryCookCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCookCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Parses input arguments and creates a new InventoryCookRecipeCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class InventoryCookCommandParser implements Parser\u003cInventoryCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Pattern INVENTORY_COOK_RECIPE_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .compile(InventoryCookCommand.RECIPE_KEYWORD + \" *(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the InventoryCookRecipeCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns an InventoryCookRecipeCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public InventoryCookCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final Matcher matcher \u003d INVENTORY_COOK_RECIPE_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    InventoryCookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new InventoryCookCommand(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    InventoryCookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 48,
      "teo-jun-xiong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/inventory/InventoryRemoveIngredientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryRemoveIngredientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new InventoryRemoveIngredientCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryRemoveIngredientCommandParser implements Parser\u003cInventoryCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Pattern INVENTORY_REMOVE_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .compile(InventoryRemoveIngredientCommand.INGREDIENT_KEYWORD + \"*(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the InventoryCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a InventoryRemoveIngredientCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public InventoryRemoveIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final Matcher matcher \u003d INVENTORY_REMOVE_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    InventoryRemoveIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    InventoryRemoveIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_NAME).isPresent();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cIngredientQuantity\u003e ingredientQuantity \u003d argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_QUANTITY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                ? Optional.of(ParserUtil.parseIngredientQuantity(argMultimap.getValue(PREFIX_INGREDIENT_QUANTITY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .get()))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new InventoryRemoveIngredientCommand(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 9,
      "teo-jun-xiong": 31,
      "shanecsj": 13,
      "tzihiang": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/recipe/RecipeAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddIngredientCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddStepCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddTagCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Parses input arguments and creates a new RecipeAddCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class RecipeAddCommandParser implements Parser\u003cRecipeAddCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern RECIPE_ADD_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\"(?\u003cindex\u003e\\\\d+) *(?\u003ccategory\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeAddCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a RecipeAddCommand object for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public RecipeAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d RECIPE_ADD_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String index \u003d matcher.group(\"index\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String category \u003d matcher.group(\"category\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "        switch (category) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case RecipeCommand.INGREDIENT_KEYWORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseAddIngredient(index + \" \" + arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case RecipeCommand.STEP_KEYWORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseAddStep(index + \" \" + arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case RecipeCommand.TAG_KEYWORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseAddTag(index + \" \" + arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeAddIngredientCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a RecipeAddIngredientCommand object for execution."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    RecipeAddIngredientCommand parseAddIngredient(String args) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_NAME).isPresent();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_QUANTITY).isPresent();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity ingredientQuantity \u003d ParserUtil.parseIngredientQuantity(argMultimap"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_QUANTITY).get());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient ingredient \u003d new Ingredient(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new RecipeAddIngredientCommand(index, ingredient);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeAddStepCommand"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a RecipeAddStepCommand object for execution."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public RecipeAddStepCommand parseAddStep(String args) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Index recipeIndex;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hans555"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_STEP_INDEX, PREFIX_STEP_DESCRIPTION);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hans555"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hans555"
        },
        "content": "            recipeIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_STEP_INDEX, PREFIX_STEP_DESCRIPTION)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_STEP_INDEX, PREFIX_STEP_DESCRIPTION);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_STEP_INDEX).isPresent();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Optional\u003cIndex\u003e stepIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Step toAdd;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String stepVariable \u003d argMultimap.getValue(PREFIX_STEP_INDEX).get();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!stepVariable.equals(RecipeAddStepCommand.NEXT_KEYWORD)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hans555"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hans555"
        },
        "content": "                stepIndex \u003d Optional.of(ParserUtil.parseIndex(stepVariable));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hans555"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hans555"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        RecipeAddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hans555"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_STEP_DESCRIPTION).isPresent();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hans555"
        },
        "content": "        toAdd \u003d ParserUtil.parseStep(argMultimap"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .getValue(PREFIX_STEP_DESCRIPTION).get());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new RecipeAddStepCommand(recipeIndex, stepIndex, toAdd);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeAddTagCommand"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a RecipeAddTagCommand object for execution."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeAddTagCommand parseAddTag(String args) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Tag toAdd;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Index recipeIndex;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hans555"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hans555"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hans555"
        },
        "content": "            recipeIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_TAG)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_TAG);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_TAG).isPresent();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        toAdd \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new RecipeAddTagCommand(recipeIndex, toAdd);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    boolean containsIngredient(String args) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return args.contains(PREFIX_INGREDIENT_NAME.toString())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_INGREDIENT_QUANTITY.toString());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    boolean containsStep(String args) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return args.contains(PREFIX_STEP_INDEX.toString()) \u0026\u0026 args.contains(PREFIX_STEP_DESCRIPTION.toString());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    boolean containsTag(String args) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return args.contains(PREFIX_TAG.toString());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 83,
      "teo-jun-xiong": 21,
      "hans555": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/recipe/RecipeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Parses input arguments and into a {@code RecipeCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class RecipeCommandParser implements Parser\u003cRecipeCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Pattern RECIPE_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\"(?\u003cindex\u003e\\\\d+) +(?\u003ccommandWord\u003e\\\\S+) +(?\u003ccategory\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a RecipeCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a RecipeCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public RecipeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final Matcher matcher \u003d RECIPE_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final String index \u003d matcher.group(\"index\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String category \u003d matcher.group(\"category\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case RecipeAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new RecipeAddCommandParser().parse(index + \" \" + category + \" \" + arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case RecipeRemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new RecipeRemoveCommandParser().parse(index + \" \" + category + \" \" + arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 39,
      "teo-jun-xiong": 4,
      "hans555": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/recipe/RecipeRemoveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveIngredientCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveStepCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveTagCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Parses input arguments and creates a new RecipeRemoveCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class RecipeRemoveCommandParser implements Parser\u003cRecipeRemoveCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern RECIPE_ADD_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\"(?\u003cindex\u003e\\\\d+) *(?\u003ccategory\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeRemoveCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a RecipeRemoveCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeRemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d RECIPE_ADD_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String index \u003d matcher.group(\"index\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String category \u003d matcher.group(\"category\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "        switch (category) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case RecipeCommand.INGREDIENT_KEYWORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseRemoveIngredient(index + \" \" + arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case RecipeCommand.STEP_KEYWORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseRemoveStep(index + \" \" + arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case RecipeCommand.TAG_KEYWORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseRemoveTag(index + \" \" + arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeRemoveIngredientCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a RecipeRemoveIngredientCommand object for execution."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    RecipeRemoveIngredientCommand parseRemoveIngredient(String args) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_NAME).isPresent();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Optional\u003cIngredientQuantity\u003e ingredientQuantity \u003d argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_QUANTITY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                ? Optional.of(ParserUtil.parseIngredientQuantity(argMultimap.getValue(PREFIX_INGREDIENT_QUANTITY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    .get()))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new RecipeRemoveIngredientCommand(index, ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeRemoveStepCommand"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a RecipeRemoveStepCommand object for execution."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeRemoveStepCommand parseRemoveStep(String args) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hans555"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STEP_INDEX);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Index recipeIndex;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hans555"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hans555"
        },
        "content": "            recipeIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hans555"
        },
        "content": "                RecipeRemoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_STEP_INDEX)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_STEP_INDEX);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_STEP_INDEX).isPresent();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Index stepIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STEP_INDEX).get());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new RecipeRemoveStepCommand(recipeIndex, stepIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeRemoveTagCommand"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a RecipeRemoveTagCommand object for execution."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeRemoveTagCommand parseRemoveTag(String args) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hans555"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Index recipeIndex;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hans555"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hans555"
        },
        "content": "            recipeIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeRemoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_TAG)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_TAG);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_TAG).isPresent();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Tag toRemove \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new RecipeRemoveTagCommand(recipeIndex, toRemove);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    boolean containsIngredient(String args) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return args.contains(PREFIX_INGREDIENT_NAME.toString());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    boolean containsStep(String args) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return args.contains(PREFIX_STEP_INDEX.toString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    boolean containsTag(String args) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return args.contains(PREFIX_TAG.toString());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 49,
      "shanecsj": 7,
      "hans555": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Cart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Wraps all data at the cart level"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Cart extends SortedIngredientList implements ReadOnlyCart {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public Cart() {}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public Cart(ReadOnlyCart toBeCopied) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Resets the existing data of this {@code Cart} with {@code newData}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Called in constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData(ReadOnlyCart newData) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setIngredients(newData.getIngredientList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return getIngredientList().size() + \" ingredients\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof Cart // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 this.getCompatibleIngredientList().equals(((Cart) other).getCompatibleIngredientList()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 15,
      "teo-jun-xiong": 1,
      "tzihiang": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Cookbook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.RecipeDefaultComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.UniqueRecipeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Wraps all data at the cookbook level."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Duplicates are not allowed (by .isSameRecipe comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Cookbook implements ReadOnlyCookbook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final UniqueRecipeList recipes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Cookbook() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Creates an Cookbook using the Recipes in the {@code toBeCopied}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Cookbook(ReadOnlyCookbook toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the contents of the recipe list with {@code recipes}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.recipes.setRecipes(recipes);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Resets the existing data of this {@code Cookbook} with {@code newData}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData(ReadOnlyCookbook newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setRecipes(newData.getRecipeList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    //// recipe-level operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the cookbook."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return recipes.contains(recipe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds a recipe to the cookbook."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The recipe must not already exist in the cookbook."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes.add(recipe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes.sort(new RecipeDefaultComparator());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the given recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the cookbook."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the cookbook."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(editedRecipe);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes.sort(new RecipeDefaultComparator());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes {@code key} from this {@code Cookbook}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code key} must exist in the cookbook."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeRecipe(Recipe key) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes.remove(key);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sorts the cookbook by similarity of the specified inventory\u0027s ingredients."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void sort(Comparator\u003c? super Recipe\u003e comparator) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes.sort(comparator);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return recipes.asUnmodifiableObservableList().size() + \" recipes\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return recipes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                || (other instanceof Cookbook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 recipes.equals(((Cookbook) other).recipes));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return recipes.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 119,
      "teo-jun-xiong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Inventory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Wraps all data at the inventory level"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Inventory extends SortedIngredientList implements ReadOnlyInventory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public Inventory() {}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Inventory(ReadOnlyInventory toBeCopied) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Resets the existing data of this {@code Inventory} with {@code newData}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Called in constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData(ReadOnlyInventory newData) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setIngredients(newData.getIngredientList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return getIngredientList().size() + \" ingredients\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof Inventory // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 this.getCompatibleIngredientList().equals(((Inventory) other).getCompatibleIngredientList()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 18,
      "tzihiang": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Predicate\u003cRecipe\u003e PREDICATE_SHOW_ALL_RECIPES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Predicate\u003cIngredient\u003e PREDICATE_SHOW_ALL_INGREDIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 cookbook file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCookbookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sets the user prefs\u0027 cookbook file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCookbookFilePath(Path cookbookFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sets the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setInventoryFilePath(Path inventoryFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 cart file path."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCartFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sets the user prefs\u0027 cart file path."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCartFilePath(Path cartFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces cookbook data with the data in {@code cookbook}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCookbook(ReadOnlyCookbook cookbook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns the Cookbook */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyCookbook getCookbook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces inventory data with the data in {@code inventory}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setInventory(ReadOnlyInventory inventory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns the Inventory */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyInventory getInventory();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces cart data with the data in {@code cart}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCart(ReadOnlyCart cart);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns the Cart */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyCart getCart();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the cookbook."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    boolean hasCookbookRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes the given recipe."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The recipe must exist in the cookbook."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void removeCookbookRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds the given recipe."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code recipe} must not already exist in the cookbook."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void addCookbookRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the given recipe {@code target} with {@code editedRecipe}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the cookbook."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the cookbook."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCookbookRecipe(Recipe target, Recipe editedRecipe);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if an ingredient with the same identity as {@code ingredient} exists in the inventory."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    boolean hasInventoryIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes the given ingredient."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must exist in the inventory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void removeInventoryIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes ingredients with the given ingredient name."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must exist in the inventory."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void removeInventoryIngredient(IngredientName ingredientName);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds the given ingredient."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code ingredient} must not already exist in the inventory."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void addInventoryIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the given ingredient {@code target} with {@code editedIngredient}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the inventory."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient identity of {@code editedIngredient} must not be the same as another existing ingredient in the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * inventory."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setInventoryIngredient(Ingredient target, Ingredient editedIngredient);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if an ingredient with the same identity as {@code ingredient} exists in the cart."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    boolean hasCartIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes the given ingredient."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must exist in the cart."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void removeCartIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes ingredients with the given ingredient name."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must exist in the cart."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void removeCartIngredient(IngredientName ingredientName);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds the given ingredient."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code ingredient} must not already exist in the cart."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void addCartIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the given ingredient {@code target} with {@code editedIngredient}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the cart."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient identity of {@code editedIngredient} must not be the same as another existing ingredient in the"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * cart."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCartIngredient(Ingredient target, Ingredient editedIngredient);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sorts the cookbook using the specified comparator."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void sortCookbook(Comparator\u003c? super Recipe\u003e comparator);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered cookbook recipe list */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Updates the filter of the filtered cookbook recipe list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void updateFilteredCookbookRecipeList(Predicate\u003cRecipe\u003e predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered inventory ingredient list */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredInventoryIngredientList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Updates the filter of the filtered inventory ingredient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void updateFilteredInventoryIngredientList(Predicate\u003cIngredient\u003e predicate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered cart ingredient list */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredCartIngredientList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Updates the filter of the filtered cart ingredient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void updateFilteredCartIngredientList(Predicate\u003cIngredient\u003e predicate);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 138,
      "teo-jun-xiong": 9,
      "-": 67,
      "tzihiang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Represents the in-memory model of CookingPapa\u0027s data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Cookbook cookbook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Inventory inventory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Cart cart;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e filteredCookbookRecipes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final FilteredList\u003cIngredient\u003e filteredInventoryIngredients;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final FilteredList\u003cIngredient\u003e filteredCartIngredients;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Initializes a ModelManager with the given cookbook, inventory, cart, and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public ModelManager(ReadOnlyCookbook cookbook, ReadOnlyInventory inventory,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            ReadOnlyCart cart, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(cookbook, inventory, cart, userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        logger.fine(\"Initializing with cookbook: \" + cookbook + \", inventory: \" + inventory + \", cart: \" + cart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \", and user prefs: \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cookbook \u003d new Cookbook(cookbook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.inventory \u003d new Inventory(inventory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cart \u003d new Cart(cart);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        filteredCookbookRecipes \u003d new FilteredList\u003c\u003e(this.cookbook.getRecipeList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        filteredInventoryIngredients \u003d new FilteredList\u003c\u003e(this.inventory.getIngredientList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        filteredCartIngredients \u003d new FilteredList\u003c\u003e(this.cart.getIngredientList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this(new Cookbook(), new Inventory(), new Cart(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    // User prefs methods"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    // File path methods"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCookbookFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return userPrefs.getCookbookFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbookFilePath(Path cookbookFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cookbookFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCookbookFilePath(cookbookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return userPrefs.getInventoryFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(inventoryFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setInventoryFilePath(inventoryFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCartFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return userPrefs.getCartFilePath();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartFilePath(Path cartFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cartFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCartFilePath(cartFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    // Cookbook methods"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbook(ReadOnlyCookbook cookbook) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cookbook.resetData(cookbook);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ReadOnlyCookbook getCookbook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cookbook;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean hasCookbookRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return cookbook.hasRecipe(recipe);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void removeCookbookRecipe(Recipe target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        cookbook.removeRecipe(target);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void addCookbookRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        cookbook.addRecipe(recipe);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setCookbookRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        cookbook.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Recipe} backed by the internal list of"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * {@code versionedCookbook}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredCookbookRecipeList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return filteredCookbookRecipes;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void updateFilteredCookbookRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        filteredCookbookRecipes.setPredicate(predicate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    // Inventory methods"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setInventory(ReadOnlyInventory inventory) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.inventory.resetData(inventory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public ReadOnlyInventory getInventory() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean hasInventoryIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventory.hasIngredient(ingredient);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeInventoryIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.removeIngredient(target);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeInventoryIngredient(IngredientName target) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.removeIngredient(target);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void addInventoryIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.addIngredient(ingredient);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        updateFilteredInventoryIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Ingredient} backed by the internal list of"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * {@code versionedInventory}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredInventoryIngredientList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return filteredInventoryIngredients;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void updateFilteredInventoryIngredientList(Predicate\u003cIngredient\u003e predicate) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        filteredInventoryIngredients.setPredicate(predicate);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    // Cart methods"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setCart(ReadOnlyCart cart) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.cart.resetData(cart);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public ReadOnlyCart getCart() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return cart;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean hasCartIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cart.hasIngredient(ingredient);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeCartIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.removeIngredient(target);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeCartIngredient(IngredientName target) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.removeIngredient(target);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void addCartIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.addIngredient(ingredient);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        updateFilteredCartIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void sortCookbook(Comparator\u003c? super Recipe\u003e comparator) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cookbook.sort(comparator);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Ingredient} backed by the internal list of"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code versionedCart}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredCartIngredientList() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return filteredCartIngredients;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void updateFilteredCartIngredientList(Predicate\u003cIngredient\u003e predicate) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        filteredCartIngredients.setPredicate(predicate);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return cookbook.equals(other.cookbook)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u0026\u0026 inventory.equals(other.inventory)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u0026\u0026 cart.equals(other.cart)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u0026\u0026 filteredCartIngredients.equals(other.filteredCartIngredients)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u0026\u0026 filteredCookbookRecipes.equals(other.filteredCookbookRecipes)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u0026\u0026 filteredInventoryIngredients.equals(other.filteredInventoryIngredients);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 110,
      "teo-jun-xiong": 66,
      "shanecsj": 3,
      "-": 117,
      "tzihiang": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyCart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Unmodifiable view of a shopping cart"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface ReadOnlyCart {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an unmodifiable view of the inventory."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getIngredientList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyCookbook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Unmodifiable view of a cookbook"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface ReadOnlyCookbook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an unmodifiable view of the recipe list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * This list will not contain any duplicate recipes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cRecipe\u003e getRecipeList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyInventory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Unmodifiable view of an inventory"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface ReadOnlyInventory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an unmodifiable view of the inventory."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getIngredientList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 13,
      "teo-jun-xiong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCookbookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCartFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/SortedIngredientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.CompatibleIngredientList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientDefaultComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Wraps all data at the ingredient list level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class SortedIngredientList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final CompatibleIngredientList ingredients \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the contents of the ingredient list with {@code ingredients}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code ingredients} must not contain duplicate ingredients."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients.setIngredients(ingredients);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if an ingredient with the same identity as {@code ingredient} exists in the list of ingredients."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredients.contains(ingredient);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds an ingredient to the list of ingredients."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must not already exist in the list of ingredients."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.add(ingredient);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the given ingredient {@code target} in the list with {@code editedIngredient}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the list of ingredients."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient identity of {@code editedIngredient} must not be the same as another existing ingredient in the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * list of ingredients."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(editedIngredient);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes {@code key} from this {@code ingredientList}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code key} must exist in the list of ingredients."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeIngredient(Ingredient key) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.remove(key);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes ingredients with the name {@code key} from this {@code ingredientList}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code key} must exist in the list of ingredients."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeIngredient(IngredientName key) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.remove(key);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sorts the list of ingredients using {@code IngredientDefaultComparator}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sort(new IngredientDefaultComparator());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sorts the list of ingredients using the specified comparator."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void sort(Comparator\u003c? super Ingredient\u003e comparator) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.sort(comparator);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CompatibleIngredientList getCompatibleIngredientList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredients;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getIngredientList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredients.asUnmodifiableObservableList().size() + \" ingredients\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path cookbookFilePath \u003d Paths.get(\"data\" , \"cookbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path inventoryFilePath \u003d Paths.get(\"data\" , \"inventory.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path cartFilePath \u003d Paths.get(\"data\" , \"cart.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setCookbookFilePath(newUserPrefs.getCookbookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setInventoryFilePath(newUserPrefs.getInventoryFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setCartFilePath(newUserPrefs.getCartFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCookbookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cookbookFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbookFilePath(Path cookbookFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cookbookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cookbookFilePath \u003d cookbookFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventoryFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(inventoryFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.inventoryFilePath \u003d inventoryFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCartFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cartFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartFilePath(Path cartFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cartFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cartFilePath \u003d cartFilePath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 cookbookFilePath.equals(o.cookbookFilePath)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 inventoryFilePath.equals(o.inventoryFilePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 cartFilePath.equals(o.cartFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return Objects.hash(guiSettings, cookbookFilePath, inventoryFilePath, cartFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + cookbookFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + inventoryFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + cartFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 35,
      "teo-jun-xiong": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/CompatibleIngredientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A list of ingredients that enforces compatibility in updating its elements and does not allow nulls."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * An ingredient is considered compatible with another ingredient by comparing using"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * {@code Ingredient#isCompatibleWith(Ingredient)}. As such, adding and updating of ingredients uses"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * {@code Ingredient#isSameIngredient(Ingredient)} for compatibility so as to ensure that the ingredient is being added"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * updated from an existing element if a compatible element can be found in the CompatibleIngredientList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * @see Ingredient#isCompatibleWith(Ingredient)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CompatibleIngredientList extends UniqueIngredientList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if the list contains an ingredient compatible with the given argument."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean contains(Ingredient toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isCompatibleWith);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an ingredient compatible with given argument, if the list contains a compatible ingredient."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient find(Ingredient toFind) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(contains(toFind));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return internalList.stream().filter(toFind::isCompatibleWith).findFirst().get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                || (other instanceof CompatibleIngredientList // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                        \u0026\u0026 internalList.equals(((CompatibleIngredientList) other).internalList));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 42,
      "hans555": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/Ingredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IncompatibleIngredientException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents an ingredient."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Ingredient {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final IngredientName ingredientName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final IngredientQuantity ingredientQuantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient(IngredientName ingredientName, IngredientQuantity ingredientQuantity) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientQuantity \u003d ingredientQuantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientName getName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientQuantity getQuantity() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredientQuantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds {@code toAdd} to the ingredient."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient add(Ingredient toAdd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            checkArgument(isCompatibleWith(toAdd));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new Ingredient(getName(), getQuantity().add(toAdd.getQuantity()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IncompatibleIngredientException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Subtracts {@code toSubtract} from the ingredient."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient subtract(Ingredient toSubtract) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            checkArgument(isCompatibleWith(toSubtract));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new Ingredient(getName(), getQuantity().subtract(toSubtract.getQuantity()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IncompatibleIngredientException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the proportion of {@code toCompare} with respect to the ingredient."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a double value between 0 and 1 (inclusive)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public double asProportionOf(Ingredient toCompare) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            checkArgument(isCompatibleWith(toCompare));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return getQuantity().asProportionOf(toCompare.getQuantity());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IncompatibleIngredientException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if both ingredients are compatible with each other."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * This defines whether two ingredients can be added or subtracted from each other."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean isCompatibleWith(Ingredient otherIngredient) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (otherIngredient \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return otherIngredient !\u003d null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 otherIngredient.getName().equals(getName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 otherIngredient.getQuantity().hasSameUnitAs(getQuantity());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if both ingredients have the same name."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * This defines a weaker notion of equality between two ingredients."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean isSameIngredient(Ingredient otherIngredient) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (otherIngredient \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return otherIngredient !\u003d null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 otherIngredient.getName().equals(getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public String getNoWhitespaceName() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return this.getName().ingredientName.replace(\" \", \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if both ingredients have the same name and quantity."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * This defines a stronger notion of equality between two ingredients."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!(other instanceof Ingredient)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient otherIngredient \u003d (Ingredient) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return otherIngredient.getName().equals(getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u0026\u0026 otherIngredient.getQuantity().equals(getQuantity());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return Objects.hash(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"%s %s\", ingredientQuantity, ingredientName);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 127,
      "teo-jun-xiong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/IngredientDefaultComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * The default comparator for {@code Ingredient}, which compares ingredients by their names using lexicographical order."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientDefaultComparator implements Comparator\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Compares ingredients by their names using lexicographical order."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int compare(Ingredient o1, Ingredient o2) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return o1.getName().toString().compareToIgnoreCase(o2.getName().toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/IngredientName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents the name of an ingredient."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidIngredientName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            \"Ingredient names should only contain alphanumeric characters, spaces, and punctuation, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The first character of the ingredient name must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\-\u0027% ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public final String ingredientName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs an {@code IngredientName}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param ingredientName A valid ingredient name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientName(String ingredientName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(isValidIngredientName(ingredientName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientName \u003d ingredientName.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if a given string is a valid ingredient name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static boolean isValidIngredientName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                || (other instanceof IngredientName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 ingredientName.toLowerCase()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                        .equals(((IngredientName) other).ingredientName.toLowerCase())); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredientName.toLowerCase().hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/IngredientQuantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.fraction.MixedFraction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.NonPositiveIngredientQuantityException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents the quantity of an ingredient."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientQuantity {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            \"Ingredient quantities should only contain a positive value and a unit, where the value can be \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"whole numbers, decimals, or fractions, and the unit should only contain alphabets\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String DECIMAL_REGEX \u003d \"([1-9][\\\\p{Digit}]*(\\\\.[\\\\p{Digit}]+)?)\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"|(0?\\\\.(?\u003d.*[1-9])[\\\\p{Digit}]+)\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String FRACTION_REGEX \u003d \"[1-9][\\\\p{Digit}]*( +[1-9][\\\\p{Digit}]*)?/[1-9][\\\\p{Digit}]*\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String UNIT_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient quantity must consist of a whole number, decimal, or fraction, and an optional unit."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d String.format(\"((%s)|(%s)) *(%s)?\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            DECIMAL_REGEX, FRACTION_REGEX, UNIT_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Pattern DECIMAL_PATTERN \u003d Pattern.compile(DECIMAL_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Pattern FRACTION_PATTERN \u003d Pattern.compile(FRACTION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Pattern UNIT_PATTERN \u003d Pattern.compile(UNIT_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int LARGEST_DENOMINATOR \u003d 6;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public final Number value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public final String unit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs an {@code IngredientQuantity}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param ingredientQuantity A valid ingredient quantity."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientQuantity(String ingredientQuantity) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredientQuantity);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(isValidIngredientQuantity(ingredientQuantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.value \u003d parseValue(ingredientQuantity);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.unit \u003d parseUnit(ingredientQuantity);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    IngredientQuantity(Number value, String unit) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(value, unit);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if a given string is a valid ingredient quantity."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static boolean isValidIngredientQuantity(String test) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if the specified ingredient quantity has the same unit as the ingredient quantity."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean hasSameUnitAs(IngredientQuantity other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return this.unit.equals(other.unit);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds the specified ingredient quantity to the ingredient quantity, if the ingredient quantities are compatible."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param other the ingredient quantity to be added."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a new ingredient quantity with the specified ingredient quantity added."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientQuantity add(IngredientQuantity other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(hasSameUnitAs(other));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Number newValue \u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (this.value instanceof BigDecimal \u0026\u0026 other.value instanceof BigDecimal) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((BigDecimal) this.value).add((BigDecimal) other.value);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof MixedFraction \u0026\u0026 other.value instanceof MixedFraction) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((MixedFraction) this.value).add((MixedFraction) other.value);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof BigDecimal \u0026\u0026 other.value instanceof MixedFraction) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d MixedFraction.getFromBigDecimal(((BigDecimal) this.value)).add((MixedFraction) other.value);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof MixedFraction \u0026\u0026 other.value instanceof BigDecimal) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((MixedFraction) this.value).add(MixedFraction.getFromBigDecimal(((BigDecimal) other.value)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (newValue instanceof MixedFraction \u0026\u0026 ((MixedFraction) newValue).getDenominator() \u003e LARGEST_DENOMINATOR) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            MixedFraction mixedFraction \u003d (MixedFraction) newValue;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d new BigDecimal(mixedFraction.getNumerator())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .divide(new BigDecimal(mixedFraction.getDenominator()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert newValue !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new IngredientQuantity(newValue, unit);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Subtracts the specified ingredient quantity from the ingredient quantity, if the ingredient quantities are"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * compatible."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * If the specified ingredient quantity is larger, the value of the ingredient quantity returned will be 0."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param other the ingredient quantity to be subtracted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a new ingredient quantity with the specified ingredient quantity subtracted."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientQuantity subtract(IngredientQuantity other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(hasSameUnitAs(other));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Number newValue \u003d null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (this.value instanceof BigDecimal \u0026\u0026 other.value instanceof BigDecimal) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((BigDecimal) this.value).subtract((BigDecimal) other.value);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof MixedFraction \u0026\u0026 other.value instanceof MixedFraction) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((MixedFraction) this.value).subtract((MixedFraction) other.value);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof BigDecimal \u0026\u0026 other.value instanceof MixedFraction) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d MixedFraction.getFromBigDecimal(((BigDecimal) this.value))"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .subtract((MixedFraction) other.value);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof MixedFraction \u0026\u0026 other.value instanceof BigDecimal) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((MixedFraction) this.value)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .subtract(MixedFraction.getFromBigDecimal(((BigDecimal) other.value)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (newValue instanceof MixedFraction \u0026\u0026 ((MixedFraction) newValue).getDenominator() \u003e LARGEST_DENOMINATOR) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            MixedFraction mixedFraction \u003d (MixedFraction) newValue;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d new BigDecimal(mixedFraction.getNumerator())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .divide(new BigDecimal(mixedFraction.getDenominator()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert newValue !\u003d null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (newValue.doubleValue() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new NonPositiveIngredientQuantityException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new IngredientQuantity(newValue, unit);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the proportion of {@code other} with respect to the ingredient."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a double value between 0 and 1 (inclusive)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public double asProportionOf(IngredientQuantity other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(hasSameUnitAs(other));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        double proportion \u003d 0;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (this.value instanceof BigDecimal \u0026\u0026 other.value instanceof BigDecimal) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                proportion \u003d ((BigDecimal) this.value).divide((BigDecimal) other.value).doubleValue();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            } catch (ArithmeticException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                proportion \u003d this.value.doubleValue() / other.value.doubleValue();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof MixedFraction \u0026\u0026 other.value instanceof MixedFraction) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            proportion \u003d ((MixedFraction) this.value).divide((MixedFraction) other.value).doubleValue();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof BigDecimal \u0026\u0026 other.value instanceof MixedFraction) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            proportion \u003d MixedFraction.getFromBigDecimal(((BigDecimal) this.value))"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .divide((MixedFraction) other.value).doubleValue();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof MixedFraction \u0026\u0026 other.value instanceof BigDecimal) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            proportion \u003d ((MixedFraction) this.value)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .divide(MixedFraction.getFromBigDecimal(((BigDecimal) other.value))).doubleValue();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (proportion \u003e 1) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return proportion;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the value of an ingredient\u0027s quantity."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param ingredientQuantity The given string representing an ingredient\u0027s quantity."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return The value of the ingredient\u0027s IngredientQuantity."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static Number parseValue(String ingredientQuantity) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(isValidIngredientQuantity(ingredientQuantity));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Number parsedValue \u003d null;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Matcher decimalMatcher \u003d DECIMAL_PATTERN.matcher(ingredientQuantity);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Matcher mixedFractionMatcher \u003d FRACTION_PATTERN.matcher(ingredientQuantity);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (mixedFractionMatcher.find()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            parsedValue \u003d MixedFraction.parseUnsignedMixedFraction(mixedFractionMatcher.group().trim());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (decimalMatcher.find()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            parsedValue \u003d new BigDecimal(decimalMatcher.group().trim());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (parsedValue instanceof MixedFraction"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 ((MixedFraction) parsedValue).getDenominator() \u003e LARGEST_DENOMINATOR) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            parsedValue \u003d ((MixedFraction) parsedValue).doubleValue();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert parsedValue !\u003d null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return parsedValue;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the unit of an ingredient\u0027s quantity."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param ingredientQuantity The given string representing an ingredient\u0027s quantity."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return The unit of the ingredient\u0027s IngredientQuantity."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static String parseUnit(String ingredientQuantity) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(isValidIngredientQuantity(ingredientQuantity));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Matcher unitMatcher \u003d UNIT_PATTERN.matcher(ingredientQuantity);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (unitMatcher.find()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return unitMatcher.group().trim();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (unit.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return value.toString();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"%s %s\", value, unit);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                || (other instanceof IngredientQuantity // instanceof handles nulls"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 value.equals(((IngredientQuantity) other).value)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 unit.equals(((IngredientQuantity) other).unit));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return Objects.hash(value, unit);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 239,
      "teo-jun-xiong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/UniqueIngredientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * A list of ingredients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * An ingredient is considered unique by comparing using {@code Ingredient#isSameIngredient(Ingredient)}. As such,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * adding and updating of ingredients uses {@code Ingredient#isSameIngredient(Ingredient)} for equality so as to ensure"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * that the ingredient being added or updated is unique in terms of identity in the UniqueIngredientList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * @see Ingredient#isSameIngredient(Ingredient)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class UniqueIngredientList implements Iterable\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    protected final ObservableList\u003cIngredient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    protected final ObservableList\u003cIngredient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if the list contains an ingredient equivalent to the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean contains(Ingredient toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameIngredient);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an ingredient equivalent to given argument, if the list contains an equivalent ingredient."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient find(Ingredient toFind) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(contains(toFind));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return internalList.stream().filter(toFind::isSameIngredient).findFirst().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds an ingredient to the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void add(Ingredient toAdd) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            int index \u003d internalList.indexOf(find(toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            internalList.set(index, find(toAdd).add(toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            internalList.add(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the ingredient {@code target} in the list with {@code editedIngredient}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient identity of {@code editedIngredient} must not be the same as another existing ingredient in the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!target.isSameIngredient(editedIngredient) \u0026\u0026 contains(editedIngredient)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            remove(target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            add(editedIngredient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            internalList.set(index, editedIngredient);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes the quantity of the ingredient from the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must exist in the list. If the resulting quantity is not positive, the ingredient will be removed"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * from the list entirely."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove(Ingredient toRemove) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!contains(toRemove)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient originalIngredient \u003d find(toRemove);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (toRemove.equals(originalIngredient)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            internalList.remove(originalIngredient);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Ingredient subtractedIngredient \u003d originalIngredient.subtract(toRemove);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setIngredient(originalIngredient, subtractedIngredient);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes all of the ingredient with the ingredient name from the list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must exist in the list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove(IngredientName toRemove) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        boolean hasIngredient \u003d internalList.stream().anyMatch(x -\u003e toRemove.equals(x.getName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!hasIngredient) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.setIngredients(internalList.stream()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .filter(x -\u003e !toRemove.equals(x.getName()))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void setIngredients(UniqueIngredientList replacement) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Replaces the contents of this list with {@code ingredients}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void setIngredients(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireAllNonNull(ingredients);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (Ingredient ingredient : ingredients) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            add(ingredient);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sorts the list of ingredients using the specified comparator."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void sort(Comparator\u003c? super Ingredient\u003e comparator) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Collections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public ObservableList\u003cIngredient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public Iterator\u003cIngredient\u003e iterator() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof UniqueIngredientList // instanceof handles nulls"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueIngredientList) other).internalList));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (internalList.size() \u003e 0) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            int i;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            for (i \u003d 0; i \u003c internalList.size() - 1; i++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                sb.append(internalList.get(i).toString()).append(\", \");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            sb.append(internalList.get(i).toString());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 92,
      "teo-jun-xiong": 25,
      "hans555": 5,
      "tzihiang": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/exceptions/IncompatibleIngredientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Returns that the ingredient is incompatible with an existing ingredient in the list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IncompatibleIngredientException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IncompatibleIngredientException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(\"The ingredient you are trying to modify has a different unit.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/exceptions/IngredientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Returns that the ingredient is not found within the list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class IngredientNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public IngredientNotFoundException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        super(\"Ingredient is not found in the list.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/exceptions/NonPositiveIngredientQuantityException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Returns that the ingredient quantity is not positive"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class NonPositiveIngredientQuantityException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public NonPositiveIngredientQuantityException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(\"Ingredient quantity must be positive.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Recipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.TagComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Represents a Recipe in the cookbook."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class Recipe {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final RecipeName name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final RecipeDescription description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final UniqueIngredientList ingredients;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final UniqueStepList steps;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Recipe constructor for only recipe name and description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Recipe(RecipeName name, RecipeDescription description) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireAllNonNull(name, description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.steps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Recipe constructor for optional fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Recipe(RecipeName name, RecipeDescription description,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            UniqueIngredientList ingredients, UniqueStepList steps, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this(name, description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(ingredients, steps, tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients.setIngredients(ingredients);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.steps.setSteps(steps);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeName getName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeDescription getDescription() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an immutable list of ingredients, which throws {@code UnsupportedOperationException} if modification"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * is attempted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getIngredients() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public UniqueStepList getSteps() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return steps;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public String getTagsString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        getTags().forEach(tag -\u003e sb.append(\" \").append(tag.toString()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return sb.toString().trim().replace(\"[\", \"\").replace(\"]\", \" \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public String getNoWhitespaceIngredientNamesString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (Ingredient i : getIngredients()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            sb.append(i.getName().ingredientName.replace(\" \", \"\")).append(\" \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if both recipes have the same name."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * This defines a weaker notion of equality between two recipes."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean isSameRecipe(Recipe otherRecipe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (otherRecipe \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return otherRecipe !\u003d null"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 otherRecipe.getName().equals(getName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Returns true if both recipes have the same identity and data fields."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * This defines a stronger notion of equality between two recipes."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!(other instanceof Recipe)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Recipe otherRecipe \u003d (Recipe) other;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return otherRecipe.getName().equals(getName())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 otherRecipe.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 otherRecipe.getIngredients().equals(getIngredients())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 otherRecipe.getSteps().equals(getSteps())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 otherRecipe.getTags().equals(getTags());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return Objects.hash(name, description, ingredients, steps, tags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .append(\"\\nDescription: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .append(\"\\nIngredients: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .append(getIngredients())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .append(\"\\nPreparation Steps:\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .append(getSteps())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .append(\"\\nTags:\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(getTags());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        tags.sort(new TagComparator());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        tags.forEach(tag -\u003e builder.append(\" \").append(tag.toString()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 25,
      "shanecsj": 105,
      "teo-jun-xiong": 27,
      "hans555": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeContainsInventoryIngredientsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.model.recipe.RecipeInventoryIngredientsSimilarityComparator.calculateSimilarity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Tests that a {@code Recipe}\u0027s {@code Ingredient} matches any of the ingredients in the inventory."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeContainsInventoryIngredientsPredicate implements Predicate\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final ReadOnlyInventory inventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public RecipeContainsInventoryIngredientsPredicate(ReadOnlyInventory inventory) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.inventory \u003d inventory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return calculateSimilarity(recipe, inventory) \u003e 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            || (other instanceof RecipeContainsInventoryIngredientsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u0026\u0026 inventory.equals(((RecipeContainsInventoryIngredientsPredicate) other).inventory)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 8,
      "teo-jun-xiong": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeContainsTagsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Tests that a {@code Recipe}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeContainsTagsPredicate implements Predicate\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final List\u003cString\u003e tags;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeContainsTagsPredicate(List\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return tags.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(recipe.getTagsString(), tag));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            || (other instanceof RecipeContainsTagsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u0026\u0026 tags.equals(((RecipeContainsTagsPredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeDefaultComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * The default comparator for {@code Recipe}, which compares recipes by their names using lexicographical order."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class RecipeDefaultComparator implements Comparator\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Compares recipes by their names using lexicographical order."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int compare(Recipe o1, Recipe o2) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return o1.getName().toString().compareToIgnoreCase(o2.getName().toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeDescription.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Represents a Recipe\u0027s description in the cookbook."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRecipeDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeDescription {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            \"Recipe descriptions should only contain alphanumeric characters, spaces and punctuations, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public final String fullRecipeDescription;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param description A valid Description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeDescription(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        checkArgument(isValidRecipeDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        fullRecipeDescription \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Returns true if a given string is a valid recipe Description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static boolean isValidRecipeDescription(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return fullRecipeDescription;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof RecipeDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 fullRecipeDescription.equals(((RecipeDescription) other).fullRecipeDescription)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return fullRecipeDescription.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeInventoryIngredientsSimilarityComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A comparator for {@code Recipe}, which compares recipes by their similarity to an inventory\u0027s ingredients."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class RecipeInventoryIngredientsSimilarityComparator implements Comparator\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NO_INGREDIENTS \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final double ZERO_SIMILARITY \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final double DEFAULT_SIMILARITY \u003d 0.5;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public final ReadOnlyInventory inventory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public RecipeInventoryIngredientsSimilarityComparator(ReadOnlyInventory inventory) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.inventory \u003d inventory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Compares recipes by their similarity to an inventory\u0027s ingredients."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int compare(Recipe o1, Recipe o2) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return Double.compare(calculateSimilarity(o2, inventory), calculateSimilarity(o1, inventory));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the proportion of recipe ingredients that the inventory contains."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param recipe the specified recipe"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param inventory the specified inventory"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a double value between 0 and 1 (inclusive)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static double calculateSimilarity(Recipe recipe, ReadOnlyInventory inventory) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (recipe.getIngredients().size() \u003d\u003d NO_INGREDIENTS) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return ZERO_SIMILARITY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return recipe.getIngredients().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .map(recipeIngredient -\u003e inventory.getIngredientList().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .filter(inventoryIngredient -\u003e inventoryIngredient.isCompatibleWith(recipeIngredient))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .findFirst()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .map(inventoryIngredient -\u003e inventoryIngredient.asProportionOf(recipeIngredient))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElseGet(() -\u003e (inventory.getIngredientList().stream().filter(inventoryIngredient"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                        -\u003e inventoryIngredient.isSameIngredient(recipeIngredient)).count() \u003e NO_INGREDIENTS)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            ? DEFAULT_SIMILARITY : ZERO_SIMILARITY))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .reduce(ZERO_SIMILARITY, (x, y) -\u003e x + y, (x, y) -\u003e x + y) / recipe.getIngredients().size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Represents a Recipe\u0027s name in the cookbook."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRecipeName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            \"Recipe names should only contain alphanumeric characters, spaces and punctuations, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public final String fullRecipeName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        checkArgument(isValidRecipeName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        fullRecipeName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Returns true if a given string is a valid recipe name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static boolean isValidRecipeName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return fullRecipeName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof RecipeName // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 fullRecipeName.equals(((RecipeName) other).fullRecipeName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return fullRecipeName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Tests that a {@code Recipe}\u0027s {@code RecipeName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeNameContainsKeywordsPredicate implements Predicate\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(recipe.getName().fullRecipeName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof RecipeNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 keywords.equals(((RecipeNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/UniqueRecipeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * A list of recipes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A recipe is considered unique by comparing using {@code Recipe#isSameRecipe(Recipe)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * recipes uses Recipe#isSameRecipe(Recipe) for equality so as to ensure that the recipe being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * unique in terms of identity in the UniqueRecipeList. However, the removal of a recipe uses Recipe#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * as to ensure that the recipe with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * @see Recipe#isSameRecipe(Recipe)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class UniqueRecipeList implements Iterable\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Checks if otherRecipe already exists in the list.*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @return true is otherRecipe exists, false otherwise."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean contains(Recipe otherRecipe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(otherRecipe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return internalList.stream().anyMatch(otherRecipe::isSameRecipe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Adds an recipe to the list if it does not yet exist."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void add(Recipe toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Replaces the recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!target.isSameRecipe(editedRecipe) \u0026\u0026 contains(editedRecipe)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        internalList.set(index, editedRecipe);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Replaces all the current recipes in UniqueRecipeList and replaces it with {@code replacement}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * {@code replacement} must exist."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @param replacement"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipes(UniqueRecipeList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Replaces the contents of this list with {@code recipes}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireAllNonNull(recipes);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!recipesAreUnique(recipes)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        internalList.setAll(recipes);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Removes the recipe from the list, provided it exists."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void remove(Recipe toRemove) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sorts the list of recipes using the specified comparator."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void sort(Comparator\u003c? super Recipe\u003e comparator) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Collections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public ObservableList\u003cRecipe\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public Iterator\u003cRecipe\u003e iterator() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if {@code recipes} contains only unique recipes."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private boolean recipesAreUnique(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c recipes.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                if (recipes.get(i).isSameRecipe(recipes.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || (other instanceof UniqueRecipeList // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRecipeList) other).internalList));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 17,
      "teo-jun-xiong": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/DuplicateRecipeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Signals that the operation will result in duplicate Recipes (Recipes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class DuplicateRecipeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public DuplicateRecipeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(\"Operation would result in duplicate recipes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/RecipeNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " *  Returns that the recipe is not found within the list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(\"Recipe is not found in the list.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/step/Step.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Represents a cooking step in a recipe"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStep(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class Step {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "            \"Step should only contain sentences, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The first character of the step must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public final String stepDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Constructs a {@code Step}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param step A valid step."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Step(String step) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(step);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        checkArgument(isValidStep(step), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        stepDescription \u003d step;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns true if a given string is a valid step."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static boolean isValidStep(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public String getStepDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return stepDescription;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return stepDescription;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof Step // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 stepDescription.equals(((Step) other).stepDescription)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return stepDescription.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 4,
      "hans555": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/step/UniqueStepList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.exceptions.DuplicateStepException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.exceptions.StepNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": " * A list of steps that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": " * A step is considered unique by comparing using {@code Step#equals(Object)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Steps uses Step#equals(Object) for equality so as to ensure that the step being added, removed or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": " * unique in terms of identity in the UniqueStepList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": " * @see Step#equals(Object)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class UniqueStepList implements Iterable\u003cStep\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final ObservableList\u003cStep\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final ObservableList\u003cStep\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns true if the list contains an equivalent step as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean contains(Step toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return internalList.stream().anyMatch(step -\u003e step.equals(toCheck));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Adds a step to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The step must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void add(Step toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new DuplicateStepException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Adds a step to given index in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The step must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void add(Index index, Step toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new DuplicateStepException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "        internalList.add(index.getZeroBased(), toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Replaces the step {@code target} in the list with {@code editedStep}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The stepDescription of {@code editedStep} must not be the same as another existing step in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep(Step target, Step editedStep) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireAllNonNull(target, editedStep);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new StepNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!target.equals(editedStep) \u0026\u0026 contains(editedStep)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new DuplicateStepException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "        internalList.set(index, editedStep);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Removes the equivalent step from the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The step must exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void remove(Step toRemove) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new StepNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Removes the step from given index  in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The step must exist in the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Step remove(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Step toRemove \u003d internalList.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return toRemove;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps(UniqueStepList replacement) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hans555"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Replaces the contents of this list with {@code Step}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * {@code Step} must not contain duplicate persons."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps(List\u003cStep\u003e steps) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireAllNonNull(steps);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!stepsAreUnique(steps)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new DuplicateStepException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hans555"
        },
        "content": "        internalList.setAll(steps);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public ObservableList\u003cStep\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Iterator\u003cStep\u003e iterator() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof UniqueStepList // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueStepList) other).internalList));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns true if {@code Step} contains only unique steps."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private boolean stepsAreUnique(List\u003cStep\u003e steps) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hans555"
        },
        "content": "        for (int i \u003d 0; i \u003c steps.size() - 1; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hans555"
        },
        "content": "            for (int j \u003d i + 1; j \u003c steps.size(); j++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hans555"
        },
        "content": "                if (steps.get(i).equals(steps.get(j))) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hans555"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hans555"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            sb.append(\"\\n\").append(i + 1).append(\": \").append(internalList.get(i).toString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 11,
      "hans555": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/model/step/exceptions/DuplicateStepException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Signals that the operation will result in duplicate Steps (Steps are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": " * stepDescription)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class DuplicateStepException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public DuplicateStepException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "        super(\"Operation would result in duplicate step\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/step/exceptions/StepNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Signals that the operation is unable to find the specified step."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class StepNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public StepNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "        super(\"Step not found\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Comparator to compare tags alphabetically."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class TagComparator implements Comparator\u003cTag\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public int compare(Tag o1, Tag o2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return o1.toString().compareTo(o2.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/PdfExporter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDPage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDPageContentStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.apache.pdfbox.pdmodel.common.PDRectangle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.apache.pdfbox.pdmodel.font.PDFont;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.apache.pdfbox.pdmodel.font.PDType1Font;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Exports the given arguments to a pdf file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class PdfExporter {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final PDFont PDF_FONT \u003d PDType1Font.HELVETICA;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final float FONT_SIZE \u003d 16;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String MULTIPLE_LINE_PREFIX \u003d \"O    \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String PDF_HEADER_TEXT \u003d \"My Shopping List\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String MULTIPLE_LINE_SUB_LINES_PREFIX \u003d \"       \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final int START_INDEX \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final int LINE_CHARACTER_LIMIT \u003d 50;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final int MULTIPLE_LINE_CHARACTER_LIMIT \u003d 43;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Exports the given list of {@code ingredients} from the cart to a pdf file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @param ingredients The list of ingredients in the cart."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @throws IOException if cart.pdf is open and therefore unmodifiable."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static void exportCart(ObservableList\u003cIngredient\u003e ingredients) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        try (PDDocument doc \u003d new PDDocument()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            PDPage page \u003d new PDPage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            doc.addPage(page);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            PDPageContentStream contentStream \u003d new PDPageContentStream(doc, page);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            float leading \u003d 1.5f * FONT_SIZE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            PDRectangle mediabox \u003d page.getMediaBox();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            float margin \u003d 72;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            float startX \u003d mediabox.getLowerLeftX() + margin;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            float startY \u003d mediabox.getUpperRightY() - margin;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            contentStream.beginText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            contentStream.setFont(PDF_FONT, FONT_SIZE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            contentStream.newLineAtOffset(startX, startY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            List\u003cString\u003e lines \u003d getTextFromCart(ingredients);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            while (index \u003c lines.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                if (index % 28 \u003d\u003d 0 \u0026\u0026 index !\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    contentStream.endText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    contentStream.close();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    page \u003d new PDPage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    doc.addPage(page);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    contentStream \u003d new PDPageContentStream(doc, page);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    contentStream.beginText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    contentStream.setFont(PDF_FONT, FONT_SIZE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    contentStream.newLineAtOffset(startX, startY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                contentStream.showText(lines.get(index));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                contentStream.newLineAtOffset(0, -leading);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            contentStream.endText();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            contentStream.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            doc.save(new File(\"cart.pdf\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static List\u003cString\u003e getTextFromCart(ObservableList\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        lines.add(PDF_HEADER_TEXT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        lines.add(\" \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (Ingredient ingredient : ingredients) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            String text \u003d MULTIPLE_LINE_PREFIX + ingredient.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            boolean isFirstLine \u003d true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            while (text.length() \u003e 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                if (text.length() \u003c LINE_CHARACTER_LIMIT) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    if (isFirstLine) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        lines.add(text);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        lines.add(MULTIPLE_LINE_SUB_LINES_PREFIX + text);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    if (isFirstLine) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        lines.add(text.substring(START_INDEX, LINE_CHARACTER_LIMIT));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        text \u003d text.substring(LINE_CHARACTER_LIMIT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        lines.add(\"       \" + text.substring(START_INDEX, MULTIPLE_LINE_CHARACTER_LIMIT));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        text \u003d text.substring(MULTIPLE_LINE_CHARACTER_LIMIT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    isFirstLine \u003d false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return lines;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Contains utility methods for populating {@code CookingPapa} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static ReadOnlyCookbook getSampleCookbook() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cookbook sampleCookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (Recipe sampleRecipe : getSampleRecipes()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            sampleCookbook.addRecipe(sampleRecipe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return sampleCookbook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static ReadOnlyInventory getSampleInventory() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory sampleInventory \u003d new Inventory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (Ingredient sampleIngredient : getSampleIngredients()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            sampleInventory.addIngredient(sampleIngredient);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return sampleInventory;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static ReadOnlyCart getSampleCart() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart sampleCart \u003d new Cart();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (Ingredient sampleIngredient : getSampleIngredients()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            sampleCart.addIngredient(sampleIngredient);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return sampleCart;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static Ingredient[] getSampleIngredients() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new Ingredient[] {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Eggs\"), new IngredientQuantity(\"10\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Parmesan\"), new IngredientQuantity(\"1 kg\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Bacon\"), new IngredientQuantity(\"10 pieces\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Linguine\"), new IngredientQuantity(\"250 g\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Olive oil\"), new IngredientQuantity(\"600 ml\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Black pepper\"), new IngredientQuantity(\"300 g\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Salt\"), new IngredientQuantity(\"500 g\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Garlic\"), new IngredientQuantity(\"5 cloves\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Dried chili flakes\"), new IngredientQuantity(\"50 g\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Minced beef\"), new IngredientQuantity(\"500 g\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "            new Ingredient(new IngredientName(\"Tomatoes\"), new IngredientQuantity(\"10\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "            new Ingredient(new IngredientName(\"Milk\"), new IngredientQuantity(\"500 ml\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "            new Ingredient(new IngredientName(\"Butter\"), new IngredientQuantity(\"500 g\"))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static Recipe[] getSampleRecipes() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        UniqueIngredientList scrambledEggsIngredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        UniqueStepList scrambledEggsSteps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        scrambledEggsIngredients.add(new Ingredient(new IngredientName(\"Eggs\"), new IngredientQuantity(\"4\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        scrambledEggsIngredients.add(new Ingredient(new IngredientName(\"Butter\"), new IngredientQuantity(\"20 g\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        scrambledEggsIngredients.add(new Ingredient(new IngredientName(\"Milk\"), new IngredientQuantity(\"200 ml\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        scrambledEggsSteps.add(new Step(\"Beat eggs, milk, salt and pepper in medium bowl until blended.\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        scrambledEggsSteps.add(new Step(\"Heat butter in large nonstick skillet over medium heat until hot. \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Pour in egg mixture. As eggs begin to set, gently PULL the eggs across the pan with a spatula, \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"forming large soft curds.\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        scrambledEggsSteps.add(new Step(\"Continue cooking pulling, lifting and folding eggs until thickened \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"and no visible liquid egg remains. Do not stir constantly. \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Remove from heat. Serve immediately.\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        UniqueIngredientList carbonaraIngredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        UniqueStepList carbonaraSteps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraIngredients.add(new Ingredient(new IngredientName(\"Guanciale\"), new IngredientQuantity(\"200 g\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraIngredients.add(new Ingredient(new IngredientName(\"Spaghetti\"), new IngredientQuantity(\"1 serving\")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraIngredients.add(new Ingredient(new IngredientName(\"Cheese\"), new IngredientQuantity(\"200 g\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraIngredients.add(new Ingredient(new IngredientName(\"Eggs\"), new IngredientQuantity(\"6\")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraIngredients.add(new Ingredient(new IngredientName(\"Olive oil\"), new IngredientQuantity(\"2 tbsp\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraIngredients.add(new Ingredient(new IngredientName(\"Salt\"), new IngredientQuantity(\"1 tbsp\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraIngredients.add(new Ingredient(new IngredientName(\"Pepper\"), new IngredientQuantity(\"2 tbsp\")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Heat 500ml of water in a large pot over high. \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"When water starts to steam, add 3 Tbsp. salt and \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"cover pot with a lid (this will bring water to a boil faster).\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"While you are waiting on the water, do a little prep. Remove guanciale from \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"packaging and cut into about quarter inch strips. \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Finely grate 2 oz. cheese and set aside one-quarter of cheese for later.\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Whisk 4 egg yolks and 2 whole eggs in a medium bowl until no streaks remain, \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"then stir in remaining grated cheese. Add several cranks of pepper and set aside.\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Working next to pot, heat 2 Tbsp. oil in a large Dutch oven or \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"other heavy pot over medium. Add guanciale and cook, stirring occasionally, \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"until crisp around the edges, 7 to 10 minutes.\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Remove pot from heat. Using a wooden spoon, fish out guanciale and transfer to \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"a small bowl. Pour fat into a heatproof measuring cup, then add back about 3 Tbsp of fat to pot. \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Discard any remaining fat.\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Cook pasta in boiling water, stirring occasionally, 2 minutes shy of package \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"instructions. Just before pasta is finished, scoop out 1 and 3 quarter cups pasta cooking \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"liquid with same heatproof measuring cup.\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Add 1 cup reserved pasta cooking liquid to Dutch oven and bring to a boil over \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"medium high. Drain pasta in a colander, then transfer to Dutch oven.\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Cook pasta, stirring constantly and vigorously, until al dente and water is \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"reduced by about half, about 2 minutes. Remove pot from heat.\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Whisk quarter cup pasta cooking liquid into reserved egg mixture, \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"then very slowly stream into Dutch oven, stirring constantly, until cheese is melted and egg is \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"thickened to form a glossy sauce. Season with salt, if needed. Thin sauce with remaining half cup \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"pasta cooking liquid, adding a tablespoonful at a time, \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"until it\u0027s the consistency of heavy cream\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Mix in guanciale and divide pasta among bowls. \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Top with pepper and reserved cheese.\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        UniqueIngredientList aglioOlioIngredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        UniqueStepList aglioOlioSteps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioIngredients.add(new Ingredient(new IngredientName(\"Spaghetti\"), new IngredientQuantity(\"1 serving\")));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioIngredients.add(new Ingredient(new IngredientName(\"Garlic\"), new IngredientQuantity(\"6 cloves\")));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioIngredients.add(new Ingredient(new IngredientName(\"Olive Oil\"), new IngredientQuantity(\"1 tbsp\")));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioIngredients.add(new Ingredient(new IngredientName(\"Parsley\"), new IngredientQuantity(\"1 serving\")));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioIngredients.add(new Ingredient(new IngredientName(\"Cheese\"), new IngredientQuantity(\"200 g\")));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioSteps.add(new Step(\"Bring a large pot of lightly salted water to a boil. Cook spaghetti in the \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"boiling water, stirring occasionally until cooked through but firm to the bite, \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"about 12 minutes. Drain and transfer to a pasta bowl.\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioSteps.add(new Step(\"Combine garlic and olive oil in a cold skillet. Cook over medium heat to slowly \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"toast garlic, about 10 minutes. Reduce heat to medium low when olive oil begins to bubble. \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Cook and stir until garlic is golden brown, about another 5 minutes. Remove from heat.\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioSteps.add(new Step(\"Stir red pepper flakes, black pepper, and salt into the pasta. \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Pour in olive oil and garlic, and sprinkle on Italian parsley \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"and half of the cheese; stir until combined.\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioSteps.add(new Step(\"Serve pasta topped with the remaining cheese.\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        UniqueIngredientList bologneseIngredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        UniqueStepList bologneseSteps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseIngredients.add(new Ingredient(new IngredientName(\"Olive oil\"), new IngredientQuantity(\"2 tbsp\")));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseIngredients.add(new Ingredient(new IngredientName(\"Beef\"), new IngredientQuantity(\"400 g\")));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseIngredients.add(new Ingredient(new IngredientName(\"Onion\"), new IngredientQuantity(\"1\")));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseIngredients.add(new Ingredient(new IngredientName(\"Garlic\"), new IngredientQuantity(\"2 cloves\")));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseIngredients.add(new Ingredient(new IngredientName(\"Carrot\"), new IngredientQuantity(\"100 g\")));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseIngredients.add(new Ingredient(new IngredientName(\"Tomatoes\"), new IngredientQuantity(\"800 g\")));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseIngredients.add(new Ingredient(new IngredientName(\"Beef Stock cube\"), new IngredientQuantity(\"1\")));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseIngredients.add(new Ingredient(new IngredientName(\"Spaghetti\"), new IngredientQuantity(\"1 Serving\")));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseSteps.add(new Step(\"Heat a large saucepan over a medium heat. Add a tablespoon of olive oil \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"and once hot add the beef mince and a pinch of salt and pepper. Cook the mince until well browned \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"over a medium high heat. Be careful not to burn the mince. It just needs to be a dark \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"brown colour. Once browned, transfer the mince to a bowl and set aside.\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseSteps.add(new Step(\"Add another tablespoon of oil to the saucepan you browned the mince in and \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"turn the heat to medium. Add the onions and a pinch of salt and fry gently for 5 to 6 minutes, \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"or until softened and translucent. Add the garlic and cook for another 2 minutes. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Add the grated carrot then pour the mince and any juices in the bowl back into the saucepan.\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseSteps.add(new Step(\"Add the tomatoes to the pan and stir well to mix. Pour in the stock, \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"bring to a simmer and then reduce the temperature to simmer gently for 45 minutes, \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"or until the sauce is thick and rich. Taste and adjust the seasoning as necessary.\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseSteps.add(new Step(\"When ready to cook the spaghetti, heat a large saucepan of water and add a \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"pinch of salt. Cook according to the packet instructions. \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Once the spaghetti is cooked through, drain and add to the pan with the \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"bolognese sauce. Mix well and serve.\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new Recipe[]{"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Recipe(new RecipeName(\"Scrambled eggs\"),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeDescription(\"Gordan Ramsay\u0027s famous creamy and fluffy scrambled eggs.\"),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    scrambledEggsIngredients, scrambledEggsSteps,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                getTagSet(\"Simple\", \"Celebrity\")),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Recipe(new RecipeName(\"Carbonara\"),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeDescription(\"The best dish sold in NUS.\"),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                carbonaraIngredients, carbonaraSteps,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                getTagSet(\"Pasta\", \"Italian\", \"Simple\", \"Creamy\")),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Recipe(new RecipeName(\"Aglio olio\"),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeDescription(\"A traditional Italian pasta dish made \""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    + \"with garlic in olive oil, and dried red chili flakes.\"),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                aglioOlioIngredients, aglioOlioSteps,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                getTagSet(\"Pasta\", \"Spicy\", \"Italian\", \"Vegan\")),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Recipe(new RecipeName(\"Spaghetti bolognese\"),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeDescription(\"Jaime Oliver\u0027s great version of the classic Italian Bolognese.\"),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                bologneseIngredients, bologneseSteps,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                getTagSet(\"Pasta\", \"Tomatoes\", \"Celebrity\"))"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 22,
      "teo-jun-xiong": 42,
      "hans555": 3,
      "-": 29,
      "tzihiang": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CartStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Cart}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface CartStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCartFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns Cart data as a {@link ReadOnlyCart}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCart\u003e readCart() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #getCartFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCart\u003e readCart(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Saves the given {@link ReadOnlyCart} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param cart cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCart(ReadOnlyCart cart) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #saveCart(ReadOnlyCart)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCart(ReadOnlyCart cart, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CookbookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Cookbook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface CookbookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCookbookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns Cookbook data as a {@link ReadOnlyCookbook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCookbook\u003e readCookbook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #getCookbookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCookbook\u003e readCookbook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Saves the given {@link ReadOnlyCookbook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param cookbook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCookbook(ReadOnlyCookbook cookbook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #saveCookbook(ReadOnlyCookbook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCookbook(ReadOnlyCookbook cookbook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/InventoryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Inventory}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface InventoryStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns Inventory data as a {@link ReadOnlyInventory}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #getInventoryFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Saves the given {@link ReadOnlyInventory} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param inventory cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #saveInventory(ReadOnlyInventory)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedIngredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Jackson-friendly version of {@link Ingredient}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class JsonAdaptedIngredient {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Ingredient\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredient} with the given {@code name} and {@code quantity}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonAdaptedIngredient(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @JsonProperty(\"quantity\") String quantity) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts a given {@code Ingredient} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonAdaptedIngredient(Ingredient source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        quantity \u003d source.getQuantity().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts this Jackson-friendly adapted ingredient object into the model\u0027s {@code Ingredient} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ingredient."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    IngredientName.class.getSimpleName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    IngredientQuantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (!IngredientName.isValidIngredientName(name)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IllegalValueException(IngredientName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (!IngredientQuantity.isValidIngredientQuantity(quantity)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IllegalValueException(IngredientQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final IngredientName modelIngredientName \u003d new IngredientName(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final IngredientQuantity modelIngredientQuantity \u003d new IngredientQuantity(quantity);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Ingredient(modelIngredientName, modelIngredientQuantity);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRecipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Jackson-friendly version of {@link Recipe}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "class JsonAdaptedRecipe {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Recipe\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INGREDIENT \u003d \"Recipe contains duplicate ingredient(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STEP \u003d \"Recipe contains duplicate step(s).\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final List\u003cJsonAdaptedStep\u003e steps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecipe} with the given recipe details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public JsonAdaptedRecipe(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                             @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                             @JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                             @JsonProperty(\"steps\") List\u003cJsonAdaptedStep\u003e steps,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (ingredients !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (steps !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            this.steps.addAll(steps);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Converts a given {@code Recipe} into this class for Jackson use."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public JsonAdaptedRecipe(Recipe source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        name \u003d source.getName().fullRecipeName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        description \u003d source.getDescription().fullRecipeDescription;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.addAll(source.getIngredients().stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        steps.addAll(source.getSteps().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .map(JsonAdaptedStep::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Converts this Jackson-friendly adapted recipe object into the model\u0027s {@code Recipe} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted recipe."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Recipe toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final List\u003cTag\u003e recipeTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            recipeTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, RecipeName.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!RecipeName.isValidRecipeName(name)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new IllegalValueException(RecipeName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, RecipeDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!RecipeDescription.isValidRecipeDescription(description)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new IllegalValueException(RecipeDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final RecipeName modelName \u003d new RecipeName(name);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final RecipeDescription modelDescription \u003d new RecipeDescription(description);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final UniqueIngredientList modelIngredientList \u003d getModelIngredientList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final UniqueStepList modelStepList \u003d getModelStepList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(recipeTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new Recipe(modelName, modelDescription, modelIngredientList, modelStepList, modelTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    * Converts Jackson-friendly adapted list of Ingredient objects into the model\u0027s {@code UniqueIngredientList} object."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    * @throws IllegalValueException if there were any data constraints violated in the adapted ingredient list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private UniqueIngredientList getModelIngredientList() throws IllegalValueException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final UniqueIngredientList modelIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        for (JsonAdaptedIngredient jsonAdaptedIngredient : ingredients) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Ingredient ingredient \u003d jsonAdaptedIngredient.toModelType();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (modelIngredientList.contains(ingredient)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INGREDIENT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            modelIngredientList.add(ingredient);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return modelIngredientList;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Converts Jackson-friendly adapted list of Step objects into the model\u0027s {@code UniqueStepList} object."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted step list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private UniqueStepList getModelStepList() throws IllegalValueException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final UniqueStepList modelStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        for (JsonAdaptedStep jsonAdaptedStep : steps) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Step step \u003d jsonAdaptedStep.toModelType();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (modelStepList.contains(step)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STEP);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            modelStepList.add(step);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return modelStepList;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "shanecsj": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStep.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Jackson-friendly version of {@link Step}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "class JsonAdaptedStep {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Step\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final String stepDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Constructs a {@code JsonAdaptedStep} with the given {@code stepDescription}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public JsonAdaptedStep(@JsonProperty(\"stepDescription\") String stepDescription) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.stepDescription \u003d stepDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Converts a given {@code Step} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public JsonAdaptedStep(Step source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        stepDescription \u003d source.getStepDescription();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Converts this Jackson-friendly adapted ingredient object into the model\u0027s {@code Ingredient} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ingredient."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public Step toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (stepDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \"step description\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        } else if (!Step.isValidStep(stepDescription)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new IllegalValueException(Step.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new Step(stepDescription);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 46,
      "shanecsj": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCartStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A class to access Cart data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonCartStorage implements CartStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCartStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonCartStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCartFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCart\u003e readCart() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readCart(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #readCart()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCart\u003e readCart(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cJsonSerializableCart\u003e jsonCart \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                filePath, JsonSerializableCart.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!jsonCart.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.of(jsonCart.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart(ReadOnlyCart cart) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveCart(cart, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #saveCart(ReadOnlyCart)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart(ReadOnlyCart cart, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cart);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCart(cart), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCookbookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A class to access Cookbook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonCookbookStorage implements CookbookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCookbookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonCookbookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCookbookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCookbook\u003e readCookbook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readCookbook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #readCookbook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCookbook\u003e readCookbook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Optional\u003cJsonSerializableCookbook\u003e jsonCookbook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                filePath, JsonSerializableCookbook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (jsonCookbook.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return Optional.of(jsonCookbook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCookbook(ReadOnlyCookbook cookbook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveCookbook(cookbook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #saveCookbook(ReadOnlyCookbook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCookbook(ReadOnlyCookbook cookbook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cookbook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCookbook(cookbook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 66,
      "teo-jun-xiong": 13,
      "shanecsj": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonInventoryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A class to access Inventory data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonInventoryStorage implements InventoryStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonInventoryStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonInventoryStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readInventory(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #readInventory()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cJsonSerializableInventory\u003e jsonInventory \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                filePath, JsonSerializableInventory.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!jsonInventory.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.of(jsonInventory.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveInventory(inventory, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #saveInventory(ReadOnlyInventory)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(inventory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableInventory(inventory), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * An Immutable Cart that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "@JsonRootName(value \u003d \"cart\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class JsonSerializableCart {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INGREDIENT \u003d \"Cart contains duplicate ingredient(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a {@code JsonSerializableCart} with the given ingredients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonSerializableCart(@JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts a given {@code ReadOnlyCart} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCart}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonSerializableCart(ReadOnlyCart source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.addAll(source.getIngredientList()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts this cart into the model\u0027s {@code Cart} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Cart toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart cart \u003d new Cart();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (JsonAdaptedIngredient jsonAdaptedIngredient : ingredients) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Ingredient ingredient \u003d jsonAdaptedIngredient.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (cart.hasIngredient(ingredient)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INGREDIENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            cart.addIngredient(ingredient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cart;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCookbook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * An Immutable Cookbook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@JsonRootName(value \u003d \"cookbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "class JsonSerializableCookbook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"Recipe list contains duplicate recipe(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final List\u003cJsonAdaptedRecipe\u003e recipes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Constructs a {@code JsonSerializableCookbook} with the given recipes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public JsonSerializableCookbook(@JsonProperty(\"recipes\") List\u003cJsonAdaptedRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.recipes.addAll(recipes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Converts a given {@code ReadOnlyCookbook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCookbook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public JsonSerializableCookbook(ReadOnlyCookbook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        recipes.addAll(source.getRecipeList()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .map(JsonAdaptedRecipe::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Converts this cookbook into the model\u0027s {@code Cookbook} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Cookbook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Cookbook cookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        for (JsonAdaptedRecipe jsonAdaptedRecipe : recipes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Recipe recipe \u003d jsonAdaptedRecipe.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (cookbook.hasRecipe(recipe)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            cookbook.addRecipe(recipe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return cookbook;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 59,
      "teo-jun-xiong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableInventory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * An Immutable Inventory that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "@JsonRootName(value \u003d \"inventory\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class JsonSerializableInventory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INGREDIENT \u003d \"Inventory contains duplicate ingredient(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a {@code JsonSerializableInventory} with the given ingredients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonSerializableInventory(@JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts a given {@code ReadOnlyInventory} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableInventory}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonSerializableInventory(ReadOnlyInventory source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.addAll(source.getIngredientList()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts this inventory into the model\u0027s {@code Inventory} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Inventory toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (JsonAdaptedIngredient jsonAdaptedIngredient : ingredients) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Ingredient ingredient \u003d jsonAdaptedIngredient.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (inventory.hasIngredient(ingredient)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INGREDIENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            inventory.addIngredient(ingredient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface Storage extends CookbookStorage, InventoryStorage, CartStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCookbookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCartFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCookbook\u003e readCookbook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCookbook(ReadOnlyCookbook cookbook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCart\u003e readCart() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCart(ReadOnlyCart cart) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 25,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Manages storage of Cooking Papa data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private CookbookStorage cookbookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private InventoryStorage inventoryStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private CartStorage cartStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public StorageManager(CookbookStorage cookbookStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            InventoryStorage inventoryStorage, CartStorage cartStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cookbookStorage \u003d cookbookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.inventoryStorage \u003d inventoryStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cartStorage \u003d cartStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Cookbook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCookbookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cookbookStorage.getCookbookFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCookbook\u003e readCookbook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readCookbook(cookbookStorage.getCookbookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCookbook\u003e readCookbook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cookbookStorage.readCookbook(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCookbook(ReadOnlyCookbook cookbook) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveCookbook(cookbook, cookbookStorage.getCookbookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCookbook(ReadOnlyCookbook cookbook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cookbookStorage.saveCookbook(cookbook, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Inventory methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventoryStorage.getInventoryFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readInventory(inventoryStorage.getInventoryFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventoryStorage.readInventory(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveInventory(inventory, inventoryStorage.getInventoryFilePath());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventoryStorage.saveInventory(inventory, filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Cart methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCartFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cartStorage.getCartFilePath();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCart\u003e readCart() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readCart(cartStorage.getCartFilePath());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCart\u003e readCart(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cartStorage.readCart(filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart(ReadOnlyCart cart) throws IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveCart(cart, cartStorage.getCartFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart(ReadOnlyCart cart, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cartStorage.saveCart(cart, filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 82,
      "teo-jun-xiong": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CartPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String FXML \u003d \"CartPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private ListView\u003cIngredient\u003e cartListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CartPanel(ObservableList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        cartListView.setItems(ingredientList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        cartListView.setCellFactory(listView -\u003e new CartViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of an {@code Ingredient} using a {@code CartCard}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    class CartViewCell extends ListCell\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        protected void updateItem(Ingredient ingredient, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            super.updateItem(ingredient, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            if (empty || ingredient \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setGraphic(new IngredientCard(ingredient, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CookbookPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Panel containing the list of recipes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String FXML \u003d \"CookbookPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private ListView\u003cRecipe\u003e recipeListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CookbookPanel(ObservableList\u003cRecipe\u003e recipesList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListView.setItems(recipesList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListView.setCellFactory(listView -\u003e new RecipeListViewCell());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Recipe} using a {@code RecipeCard}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    static class RecipeListViewCell extends ListCell\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        private int recipeIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        public RecipeListViewCell() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            recipeIndex \u003d -1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        public RecipeListViewCell(int recipeIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            RecipeListViewCell.this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        protected void updateItem(Recipe recipe, boolean isEmpty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            super.updateItem(recipe, isEmpty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            if (isEmpty || recipe \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                int newIndex \u003d getIndex() + 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                if (newIndex \u003d\u003d recipeIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    setGraphic(new RecipeCard(recipe, newIndex, true).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    setGraphic(new RecipeCard(recipe, newIndex).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void handleViewRecipe(Index recipeIndex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListView.setCellFactory(listView -\u003e new RecipeListViewCell(recipeIndex.getOneBased()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-f11-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IngredientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * An UI component that displays information of a {@code UniqueIngredientList}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class IngredientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String FXML \u003d \"IngredientCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public final Ingredient ingredient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public IngredientCard(Ingredient ingredient, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        name.setText(ingredient.getName().ingredientName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        quantity.setText(ingredient.getQuantity().value + \" \" + ingredient.getQuantity().unit);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!(other instanceof IngredientCard)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        IngredientCard card \u003d (IngredientCard) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u0026\u0026 ingredient.equals(card.ingredient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InventoryPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "// import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Panel containing the list of ingredients."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class InventoryPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String FXML \u003d \"InventoryPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private ListView\u003cIngredient\u003e inventoryListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public InventoryPanel(ObservableList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        inventoryListView.setItems(ingredientList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        inventoryListView.setCellFactory(listView -\u003e new IngredientListViewCell());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Custom {@code ListCell} displays the graphics of a {@code UniqueIngredientList} using {@code IngredientCard}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    static class IngredientListViewCell extends ListCell\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        protected void updateItem(Ingredient ingredient, boolean isEmpty) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            super.updateItem(ingredient, isEmpty);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            if (isEmpty || ingredient \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setGraphic(new IngredientCard(ingredient, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private CookbookPanel recipeListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private InventoryPanel inventoryIngredientListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private CartPanel cartIngredientListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private StackPane recipeListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private StackPane inventoryIngredientListPanelPlaceHolder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private StackPane cartIngredientListPanelPlaceHolder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListPanel \u003d new CookbookPanel(logic.getFilteredCookbookRecipeList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListPanelPlaceholder.getChildren().add(recipeListPanel.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        inventoryIngredientListPanel \u003d new InventoryPanel(logic.getFilteredInventoryIngredientList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventoryIngredientListPanelPlaceHolder.getChildren().add(inventoryIngredientListPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        cartIngredientListPanel \u003d new CartPanel(logic.getFilteredCartIngredientList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cartIngredientListPanelPlaceHolder.getChildren().add(cartIngredientListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getCookbookFilePath());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private void handleViewRecipe(Index recipeIndex) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListPanel \u003d new CookbookPanel(logic.getFilteredCookbookRecipeList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListPanel.handleViewRecipe(recipeIndex);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListPanelPlaceholder.getChildren().add(recipeListPanel.getRoot());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CookbookPanel getRecipeListPanel() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return recipeListPanel;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public InventoryPanel getInventoryIngredientListPanel() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventoryIngredientListPanel;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CartPanel getCartIngredientListPanel1() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cartIngredientListPanel;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            if (commandResult.isViewRecipe()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                handleViewRecipe(commandResult.getRecipeIndex());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 6,
      "teo-jun-xiong": 33,
      "-": 189
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecipeCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * An UI component that displays information of a {@code Recipe}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String FXML \u003d \"RecipeCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Recipe recipe;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private boolean isFullyDisplayed;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Button button;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeCard(Recipe recipe, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        init(recipe, displayedIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeCard(Recipe recipe, int displayedIndex, boolean isViewRecipe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        init(recipe, displayedIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (isViewRecipe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            displayRecipeComplete();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Initializes the creation of a {@code RecipeCard}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void init(Recipe recipe, int displayedIndex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipe.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        displayRecipeOverview();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ImageView imageView \u003d new ImageView(new Image(getClass().getResourceAsStream(\"/images/button_icon.png\")));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        imageView.setFitHeight(25);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        imageView.setFitWidth(25);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        button.setGraphic(imageView);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Sets the {@code RecipeCard} to display a brief overview of its {@code Recipe}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void displayRecipeOverview() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        isFullyDisplayed \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        name.setText(recipe.getName().fullRecipeName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        description.setText(recipe.getDescription().fullRecipeDescription);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Sets the {@code RecipeCard} to display a full overview of its {@code Recipe} when the view button is pressed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private void handleViewButtonAction(ActionEvent event) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (isFullyDisplayed) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            displayRecipeOverview();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            displayRecipeComplete();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private void displayRecipeComplete() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        isFullyDisplayed \u003d true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        description.setText(recipe.getDescription().fullRecipeDescription"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\n\\n\" + recipe.getIngredients().toString() + \"\\n\" + recipe.getSteps());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!(other instanceof RecipeCard)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeCard card \u003d (RecipeCard) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u0026\u0026 recipe.equals(card.recipe);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/gordon_ramsay_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/CartPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c!-- @@author teo-jun-xiong --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cLabel fx:id\u003d\"header\" styleClass\u003d\"cell_header_label\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "           text\u003d\"              Cart\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cHBox style\u003d\"-fx-background-color: #bdd0c4\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003cLabel styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "               text\u003d\"              NAME                                              QUANTITY\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cListView fx:id\u003d\"cartListView\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 17
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/CookbookPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c!-- @@author teo-jun-xiong --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cLabel fx:id\u003d\"header\" styleClass\u003d\"cell_header_label\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "           text\u003d\"                      Recipes\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cListView fx:id\u003d\"recipeListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 12
    }
  },
  {
    "path": "src/main/resources/view/IngredientCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c!-- @@author teo-jun-xiong --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003cBorderPane minHeight\u003d\"30.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cleft\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" maxWidth\u003d\"30.0\" minWidth\u003d\"30.0\" prefWidth\u003d\"30.0\" styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/left\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003ccenter\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" maxWidth\u003d\"195.0\" minWidth\u003d\"195.0\" prefWidth\u003d\"195.0\" styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       text\u003d\"\\$first\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/center\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cright\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" maxWidth\u003d\"90\" minWidth\u003d\"90\" prefWidth\u003d\"90\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       textAlignment\u003d\"RIGHT\" alignment\u003d\"CENTER_RIGHT\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       wrapText\u003d\"true\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/right\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 42
    }
  },
  {
    "path": "src/main/resources/view/InventoryPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c!-- @@author teo-jun-xiong --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cLabel fx:id\u003d\"header\" styleClass\u003d\"cell_header_label\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "           text\u003d\"           Inventory\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cHBox style\u003d\"-fx-background-color: #bdd0c4\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003cLabel styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "               text\u003d\"              NAME                                              QUANTITY\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cListView fx:id\u003d\"inventoryListView\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c!-- @@author teo-jun-xiong --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cfx:root maxWidth\u003d\"1000\" minHeight\u003d\"700\" minWidth\u003d\"1000\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Cooking Papa\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003cImage url\u003d\"@/images/gordon_ramsay_icon.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" maxWidth\u003d\"1000\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cleft\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cVBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" maxWidth\u003d\"600\" minWidth\u003d\"600\" prefWidth\u003d\"600\" styleClass\u003d\"pane-with-border-command-result\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"120\" maxWidth\u003d\"600\" minHeight\u003d\"120\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                       minWidth\u003d\"600\" prefHeight\u003d\"120\" prefWidth\u003d\"600\" styleClass\u003d\"pane-with-border-command-result\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cVBox fx:id\u003d\"personList\" maxWidth\u003d\"600\" minWidth\u003d\"600\" prefWidth\u003d\"600\" styleClass\u003d\"pane-with-border-recipe\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"recipeListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/left\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cright\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cVBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cVBox fx:id\u003d\"inventoryIngredientList\" prefHeight\u003d\"335.0\" prefWidth\u003d\"385\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                  styleClass\u003d\"pane-with-border-inventory\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"inventoryIngredientListPanelPlaceHolder\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cVBox fx:id\u003d\"cartIngredientList1\" prefHeight\u003d\"335.0\" prefWidth\u003d\"385\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                  styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"cartIngredientListPanelPlaceHolder\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/right\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gohkh": 3,
      "teo-jun-xiong": 72,
      "-": 12
    }
  },
  {
    "path": "src/main/resources/view/RecipeCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c!-- @@author teo-jun-xiong --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003cVBox minHeight\u003d\"60\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cInsets bottom\u003d\"8\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cleft\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cLabel fx:id\u003d\"id\" maxWidth\u003d\"30.0\" minWidth\u003d\"30.0\" prefWidth\u003d\"30.0\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/left\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003ccenter\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cVBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cInsets left\u003d\"8\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$second\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                   styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cLabel/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/center\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cright\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cHBox minHeight\u003d\"60\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cButton fx:id\u003d\"button\" onAction\u003d\"#handleViewButtonAction\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                maxWidth\u003d\"25\" maxHeight\u003d\"25\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003c/Button\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/right\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 59
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "teo-jun-xiong": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(defaultConfig, defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/fraction/MixedFractionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.commons.core.fraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.apache.commons.math3.exception.NullArgumentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class MixedFractionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MixedFraction(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseUnsignedMixedFraction() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // invalid input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(\"\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(\"null\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(\"1\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(\"1 / 2\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(\"0.5\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0, MixedFraction.parseUnsignedMixedFraction(\"1/2\").intValue());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.parseUnsignedMixedFraction(\"1/2\").getNumerator());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(2, MixedFraction.parseUnsignedMixedFraction(\"1/2\").getDenominator());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.parseUnsignedMixedFraction(\"1 2/3\").intValue());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(5, MixedFraction.parseUnsignedMixedFraction(\"1 2/3\").getNumerator());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(3, MixedFraction.parseUnsignedMixedFraction(\"1 2/3\").getDenominator());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getFromBigDecimal() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // integer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.getFromBigDecimal(new BigDecimal(\"1\")).intValue());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.getFromBigDecimal(new BigDecimal(\"1\")).getNumerator());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.getFromBigDecimal(new BigDecimal(\"1\")).getDenominator());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // double"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.getFromBigDecimal(new BigDecimal(\"1.2\")).intValue());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(6, MixedFraction.getFromBigDecimal(new BigDecimal(\"1.2\")).getNumerator());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(5, MixedFraction.getFromBigDecimal(new BigDecimal(\"1.2\")).getDenominator());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // negative double"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(-1, MixedFraction.getFromBigDecimal(new BigDecimal(\"-1.2\")).intValue());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(-6, MixedFraction.getFromBigDecimal(new BigDecimal(\"-1.2\")).getNumerator());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(5, MixedFraction.getFromBigDecimal(new BigDecimal(\"-1.2\")).getDenominator());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction a \u003d new MixedFraction(3, 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction b \u003d new MixedFraction(4, 3);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction c \u003d new MixedFraction(-5, 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullArgumentException.class, () -\u003e a.add(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3\", a.add(a).toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 5/6\", a.add(b).toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1\", a.add(c).toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 5/6\", b.add(a).toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 2/3\", b.add(b).toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1 1/6\", b.add(c).toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1\", c.add(a).toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1 1/6\", c.add(b).toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-5\", c.add(c).toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void subtract() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction a \u003d new MixedFraction(3, 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction b \u003d new MixedFraction(4, 3);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction c \u003d new MixedFraction(-5, 2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null input"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullArgumentException.class, () -\u003e a.subtract(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid input"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0\", a.subtract(a).toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/6\", a.subtract(b).toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"4\", a.subtract(c).toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1/6\", b.subtract(a).toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0\", b.subtract(b).toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3 5/6\", b.subtract(c).toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-4\", c.subtract(a).toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-3 5/6\", c.subtract(b).toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0\", c.subtract(c).toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void divide() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction a \u003d new MixedFraction(3, 2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction b \u003d new MixedFraction(4, 3);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction c \u003d new MixedFraction(-5, 2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null input"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullArgumentException.class, () -\u003e a.subtract(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid input"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1\", a.divide(a).toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 1/8\", a.divide(b).toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-3/5\", a.divide(c).toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"8/9\", b.divide(a).toString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1\", b.divide(b).toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-8/15\", b.divide(c).toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1 2/3\", c.divide(a).toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1 7/8\", c.divide(b).toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1\", c.divide(c).toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void createOneBasedIndex_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void createZeroBasedIndex_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(fifthPersonIndex, Index.fromOneBased(5));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(fifthPersonIndex, Index.fromZeroBased(4));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(fifthPersonIndex, fifthPersonIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(null, fifthPersonIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(5.0f, fifthPersonIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(fifthPersonIndex, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 19,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/gordon_ramsay_icon.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookAddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonCartStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonCookbookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonInventoryStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCookbookStorage cookbookStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonCookbookStorage(temporaryFolder.resolve(\"cookbook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonInventoryStorage(temporaryFolder.resolve(\"inventory.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCartStorage cartStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonCartStorage(temporaryFolder.resolve(\"cart.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(cookbookStorage, inventoryStorage, cartStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String helpCommand \u003d HelpCommand.COMMAND_CATEGORY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertCommandSuccess(helpCommand, HelpCommand.SHOWING_HELP_MESSAGE, model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Setup LogicManager with JsonCookbookIoExceptionThrowingStub, JsonInventoryIoExceptionThrowingStub,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // and JsonCartIoExceptionThrowingStub"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCookbookStorage cookbookStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonCookbookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionCookbook.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonInventoryIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionInventory.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCartStorage cartStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonCartIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionCart.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(cookbookStorage, inventoryStorage, cartStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Execute cookbook add command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String cookbookAddCommand \u003d CookbookAddCommand.COMMAND_CATEGORY + \" \" + CookbookAddCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + \" n/Carbonara d/description\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder(CARBONARA).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedModel.addCookbookRecipe(expectedRecipe);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // assertCommandFailure(cookbookAddCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCookbook(), model.getInventory(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                model.getCart(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static class JsonCookbookIoExceptionThrowingStub extends JsonCookbookStorage {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private JsonCookbookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void saveCookbook(ReadOnlyCookbook cookbook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static class JsonInventoryIoExceptionThrowingStub extends JsonInventoryStorage {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private JsonInventoryIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static class JsonCartIoExceptionThrowingStub extends JsonCartStorage {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private JsonCartIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void saveCart(ReadOnlyCart cart, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 66,
      "teo-jun-xiong": 2,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /// Ingredients"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALID_INGREDIENT_NAME_ALMOND \u003d \"Almonds\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALID_INGREDIENT_NAME_BANANA \u003d \"Bananas\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALID_INGREDIENT_QUANTITY_ALMOND \u003d \"50 g\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALID_INGREDIENT_QUANTITY_BANANA \u003d \"3\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INGREDIENT_NAME_DESC_ALMOND \u003d \" \" + PREFIX_INGREDIENT_NAME"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + VALID_INGREDIENT_NAME_ALMOND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INGREDIENT_NAME_DESC_BANANA \u003d \" \" + PREFIX_INGREDIENT_NAME"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + VALID_INGREDIENT_NAME_BANANA;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INGREDIENT_QUANTITY_DESC_ALMOND \u003d \" \" + PREFIX_INGREDIENT_QUANTITY"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INGREDIENT_QUANTITY_DESC_BANANA \u003d \" \" + PREFIX_INGREDIENT_QUANTITY"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INVALID_INGREDIENT_NAME_DESC \u003d \" \" + PREFIX_INGREDIENT_NAME"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"R!ce\"; // \u0027!\u0027 not allowed in names"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INVALID_INGREDIENT_QUANTITY_DESC \u003d \" \" + PREFIX_INGREDIENT_QUANTITY"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"*halal\"; // \u0027*\u0027 not allowed in quantity"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /// Recipes"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALID_RECIPE_NAME_HAMBURGER \u003d \"Hamburger\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALID_RECIPE_NAME_SALAD \u003d \"Salad\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALID_RECIPE_DESCRIPTION_HAMBURGER \u003d \"Juicy grilled beef patty with toasted buns\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALID_RECIPE_DESCRIPTION_SALAD \u003d \"Lettuce, spinach \u0026 guacamole.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALID_TAG_BRUNCH \u003d \"Brunch\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALID_TAG_HEALTHY \u003d \"Healthy\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String RECIPE_NAME_DESC_HAMBURGER \u003d \" \" + PREFIX_RECIPE_NAME + VALID_RECIPE_NAME_HAMBURGER;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String RECIPE_NAME_DESC_SALAD \u003d \" \" + PREFIX_RECIPE_NAME + VALID_RECIPE_NAME_SALAD;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String RECIPE_DESCRIPTION_DESC_HAMBURGER \u003d \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + VALID_RECIPE_DESCRIPTION_HAMBURGER;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String RECIPE_DESCRIPTION_DESC_SALAD \u003d \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + VALID_RECIPE_DESCRIPTION_SALAD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String TAG_DESC_BRUNCH \u003d \" \" + PREFIX_TAG + VALID_TAG_BRUNCH;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String TAG_DESC_HEALTHY \u003d \" \" + PREFIX_TAG + VALID_TAG_HEALTHY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String INVALID_RECIPE_NAME_DESC \u003d \" \" + PREFIX_RECIPE_NAME"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \" \"; // recipe names cannot have whitespaces only"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String INVALID_RECIPE_DESCRIPTION_DESC \u003d \" \" + PREFIX_RECIPE_DESCRIPTION"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \" \"; // recipe descriptions cannot have whitespaces only"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"p@sta\"; // \u0027@\u0027 not allowed in tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /// Miscellaneous"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Cookbook expectedCookbook \u003d new Cookbook(actualModel.getCookbook());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        List\u003cRecipe\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCookbookRecipeList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(expectedCookbook, actualModel.getCookbook());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredCookbookRecipeList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the recipe at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * {@code model}\u0027s cookbook."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static void showRecipeAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCookbookRecipeList().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Recipe recipe \u003d model.getFilteredCookbookRecipeList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final String[] splitName \u003d recipe.getName().fullRecipeName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        model.updateFilteredCookbookRecipeList(new RecipeNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(1, model.getFilteredCookbookRecipeList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 19,
      "shanecsj": 44,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cart/CartAddIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.cart.CartAddIngredientCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ALMOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartAddIngredientCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddIngredientCommand c \u003d new CartAddIngredientCommand(ALMOND);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CartAddIngredientCommand(ALMOND));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CartAddIngredientCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddIngredientCommand c \u003d new CartAddIngredientCommand(ALMOND);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, ALMOND)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasCartIngredient(ALMOND));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddIngredientCommand c \u003d new CartAddIngredientCommand(ALMOND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddIngredientCommand c \u003d new CartAddIngredientCommand(ALMOND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CartAddIngredientCommand(ALMOND));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new CartAddIngredientCommand(APPLE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 49,
      "tzihiang": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cart/CartAddRecipeIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.cart.CartAddRecipeIngredientCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.SCRAMBLED_EGG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.SPAGHETTI_BOLOGNESE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartAddRecipeIngredientCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index INVALID_RECIPE_INDEX \u003d new Index(100000);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddRecipeIngredientCommand c \u003d new CartAddRecipeIngredientCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CartAddRecipeIngredientCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddRecipeIngredientCommand c \u003d new CartAddRecipeIngredientCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, CARBONARA.getName())));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // after adding multiple recipes"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(SCRAMBLED_EGG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(SPAGHETTI_BOLOGNESE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, AGLIO_OLIO.getName())));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasCookbookRecipe(AGLIO_OLIO));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasCookbookRecipe(SCRAMBLED_EGG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasCookbookRecipe(SPAGHETTI_BOLOGNESE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        CartAddRecipeIngredientCommand c \u003d new CartAddRecipeIngredientCommand(INVALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // index greater than size of UniqueRecipeList in Cookbook"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddRecipeIngredientCommand d \u003d new CartAddRecipeIngredientCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e d.execute(model));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddRecipeIngredientCommand c \u003d new CartAddRecipeIngredientCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CartAddRecipeIngredientCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertNotEquals(c, new CartAddRecipeIngredientCommand(INVALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "teo-jun-xiong": 58,
      "hans555": 6,
      "tzihiang": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cart/CartClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.cart.CartClearCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.cart.CartClearCommand.MESSAGE_SUCCESS_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.testutil.TypicalIngredients;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartClearCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartClearCommand c \u003d new CartClearCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // empty cart"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(MESSAGE_SUCCESS_EMPTY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // with ingredients inside the cart"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCartIngredient(TypicalIngredients.ALMOND);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCartIngredient(TypicalIngredients.BANANA);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCartIngredient(TypicalIngredients.CHICKEN);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(model.hasCartIngredient(TypicalIngredients.ALMOND));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(model.hasCartIngredient(TypicalIngredients.BANANA));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(model.hasCartIngredient(TypicalIngredients.CHICKEN));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new CartClearCommand(), new CartClearCommand());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(new CartClearCommand(), null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 38,
      "tzihiang": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cart/CartExportCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.cart.CartExportCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartExportCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartExportCommand c \u003d new CartExportCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // empty cart, cart.pdf must not be open"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new CartExportCommand(), new CartExportCommand());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(new CartExportCommand(), null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cart/CartMoveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.commands.cart.CartMoveCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.commands.cart.CartMoveCommand.MESSAGE_SUCCESS_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.testutil.TypicalIngredients;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartMoveCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        CartMoveCommand c \u003d new CartMoveCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        // cart is initially empty"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(MESSAGE_SUCCESS_EMPTY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        // add ingredients into the cart"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.addCartIngredient(TypicalIngredients.ALMOND);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.addCartIngredient(TypicalIngredients.APPLE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.addCartIngredient(TypicalIngredients.BANANA);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasInventoryIngredient(TypicalIngredients.ALMOND));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasInventoryIngredient(TypicalIngredients.APPLE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasInventoryIngredient(TypicalIngredients.BANANA));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.getCart().getIngredientList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(new CartMoveCommand(), new CartMoveCommand());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertNotEquals(new CartMoveCommand(), null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 2,
      "tzihiang": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cart/CartRemoveIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ALMOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BUTTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartRemoveIngredientCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CartRemoveIngredientCommand(null, Optional.empty()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CartRemoveIngredientCommand(ALMOND.getName(), null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CartRemoveIngredientCommand(null, null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartRemoveIngredientCommand commandWithQuantity \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CartRemoveIngredientCommand(ALMOND.getName(), Optional.of(ALMOND.getQuantity()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartRemoveIngredientCommand commandWithoutQuantity \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CartRemoveIngredientCommand(ALMOND.getName(), Optional.empty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // removing existing ingredient with quantity specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.addCartIngredient(ALMOND);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(commandWithQuantity.execute(model),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CommandResult(String.format(CartRemoveIngredientCommand.MESSAGE_SUCCESS, ALMOND)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // removing existing ingredient without quantity specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.addCartIngredient(ALMOND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(commandWithoutQuantity.execute(model),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CommandResult(String.format(CartRemoveIngredientCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    CartRemoveIngredientCommand.ALL_KEYWORD + \" \" + ALMOND.getName())));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // error thrown after removing ALMOND"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e commandWithQuantity.execute(model));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e commandWithoutQuantity.execute(model));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(model.hasCartIngredient(ALMOND));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartRemoveIngredientCommand c \u003d new CartRemoveIngredientCommand(ALMOND.getName(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Optional.of(ALMOND.getQuantity()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void execute_invalidInput_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartRemoveIngredientCommand c \u003d new CartRemoveIngredientCommand(ALMOND.getName(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Optional.of(ALMOND.getQuantity()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartRemoveIngredientCommand c \u003d new CartRemoveIngredientCommand(ALMOND.getName(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Optional.of(ALMOND.getQuantity()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c, new CartRemoveIngredientCommand(ALMOND.getName(), Optional.of(ALMOND.getQuantity())));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertNotEquals(c, new CartRemoveIngredientCommand(BUTTER.getName(), Optional.of(BUTTER.getQuantity())));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 40,
      "teo-jun-xiong": 34,
      "tzihiang": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cookbook/CookbookAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookAddCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookAddCommand c \u003d new CookbookAddCommand(AGLIO_OLIO);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CookbookAddCommand(AGLIO_OLIO));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CookbookAddCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookAddCommand c \u003d new CookbookAddCommand(AGLIO_OLIO);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, AGLIO_OLIO, 0)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookAddCommand c \u003d new CookbookAddCommand(AGLIO_OLIO);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookAddCommand c \u003d new CookbookAddCommand(AGLIO_OLIO);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CookbookAddCommand(AGLIO_OLIO));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new CookbookAddCommand(CARBONARA));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cookbook/CookbookRemoveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.cookbook.CookbookRemoveCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.SPAGHETTI_BOLOGNESE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookRemoveCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookRemoveCommand c \u003d new CookbookRemoveCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CookbookRemoveCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CookbookRemoveCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookRemoveCommand c \u003d new CookbookRemoveCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, AGLIO_OLIO.getName())));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // after adding multiple recipes"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(SPAGHETTI_BOLOGNESE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, AGLIO_OLIO.getName())));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(model.hasCookbookRecipe(AGLIO_OLIO));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // index greater than size of UniqueRecipeList in Cookbook"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookRemoveCommand c \u003d new CookbookRemoveCommand(OUT_OF_BOUNDS_RECIPE_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookRemoveCommand c \u003d new CookbookRemoveCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CookbookRemoveCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new CookbookRemoveCommand(OUT_OF_BOUNDS_RECIPE_INDEX));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 65,
      "tzihiang": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cookbook/CookbookSearchByInventoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RECIPES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookSearchByInventoryCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new CookbookSearchByInventoryCommand().execute(model),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CommandResult(String.format(MESSAGE_RECIPES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            model.getFilteredCartIngredientList().size())));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CookbookSearchByInventoryCommand().execute(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(new CookbookSearchByInventoryCommand(), new CookbookSearchByInventoryCommand());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertNotEquals(new CookbookSearchByInventoryCommand(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 24,
      "tzihiang": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cookbook/CookbookSearchByKeywordCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RECIPES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookSearchByKeywordCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final List\u003cString\u003e VALID_KEYWORDS_ONE \u003d Arrays.asList(\"key\", \"words\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final List\u003cString\u003e VALID_KEYWORDS_TWO \u003d Collections.singletonList(\"keywords\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Recipe VALID_RECIPE \u003d new Recipe(new RecipeName(\"key words\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        new RecipeDescription(\"Description\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final RecipeNameContainsKeywordsPredicate VALID_PREDICATE_ONE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        new RecipeNameContainsKeywordsPredicate(VALID_KEYWORDS_ONE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final RecipeNameContainsKeywordsPredicate VALID_PREDICATE_TWO \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        new RecipeNameContainsKeywordsPredicate(VALID_KEYWORDS_TWO);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookSearchByKeywordCommand c \u003d new CookbookSearchByKeywordCommand(VALID_PREDICATE_ONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(VALID_RECIPE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_RECIPES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                model.getFilteredCookbookRecipeList().size())));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(!model.getFilteredCookbookRecipeList().isEmpty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        CookbookSearchByKeywordCommand d \u003d new CookbookSearchByKeywordCommand(VALID_PREDICATE_TWO);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(d.execute(model), new CommandResult(String.format(MESSAGE_RECIPES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                model.getFilteredCookbookRecipeList().size())));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.getFilteredCookbookRecipeList().isEmpty());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CookbookSearchByKeywordCommand(VALID_PREDICATE_ONE).execute(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookSearchByKeywordCommand c \u003d new CookbookSearchByKeywordCommand(VALID_PREDICATE_ONE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, c);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new CookbookSearchByKeywordCommand(VALID_PREDICATE_TWO));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 54,
      "tzihiang": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cookbook/CookbookSearchByTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RECIPES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeContainsTagsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookSearchByTagCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final List\u003cString\u003e VALID_TAGS_ONE \u003d Arrays.asList(\"easy\", \"difficult\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final List\u003cString\u003e VALID_TAGS_TWO \u003d Collections.singletonList(\"easydifficult\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Recipe VALID_RECIPE \u003d new Recipe(new RecipeName(\"key words\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeDescription(\"Description\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final RecipeContainsTagsPredicate VALID_PREDICATE_ONE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeContainsTagsPredicate(VALID_TAGS_ONE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final RecipeContainsTagsPredicate VALID_PREDICATE_TWO \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeContainsTagsPredicate(VALID_TAGS_TWO);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookSearchByTagCommand c \u003d new CookbookSearchByTagCommand(VALID_PREDICATE_ONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(VALID_RECIPE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_RECIPES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                model.getFilteredCookbookRecipeList().size())));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new CookbookSearchByTagCommand(VALID_PREDICATE_ONE).execute(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cookbook/CookbookViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.cookbook.CookbookViewCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.SPAGHETTI_BOLOGNESE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookViewCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookViewCommand c \u003d new CookbookViewCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CookbookViewCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CookbookViewCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookViewCommand c \u003d new CookbookViewCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "                VALID_RECIPE_INDEX.getOneBased(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "                model.getCookbook().getRecipeList().get(VALID_RECIPE_INDEX.getZeroBased()).getName().fullRecipeName),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "                true, VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // after adding multiple recipes"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(SPAGHETTI_BOLOGNESE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "                VALID_RECIPE_INDEX.getOneBased(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "                model.getCookbook().getRecipeList().get(VALID_RECIPE_INDEX.getZeroBased()).getName().fullRecipeName),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "                true, VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // index greater than size of UniqueRecipeList in Cookbook"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookViewCommand c \u003d new CookbookViewCommand(OUT_OF_BOUNDS_RECIPE_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookViewCommand c \u003d new CookbookViewCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CookbookViewCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new CookbookViewCommand(OUT_OF_BOUNDS_RECIPE_INDEX));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 65,
      "hans555": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/inventory/InventoryAddIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.inventory.InventoryAddIngredientCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ALMOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BUTTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.CHICKEN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class InventoryAddIngredientCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryAddIngredientCommand c \u003d new InventoryAddIngredientCommand(ALMOND);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new InventoryAddIngredientCommand(ALMOND));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InventoryAddIngredientCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryAddIngredientCommand c \u003d new InventoryAddIngredientCommand(ALMOND);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, ALMOND)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryAddIngredientCommand d \u003d new InventoryAddIngredientCommand(BUTTER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(d.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, BUTTER)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryAddIngredientCommand e \u003d new InventoryAddIngredientCommand(CHICKEN);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(e.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, CHICKEN)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasInventoryIngredient(ALMOND));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasInventoryIngredient(BUTTER));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasInventoryIngredient(CHICKEN));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // adding duplicate ingredients updates its count"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addInventoryIngredient(ALMOND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, ALMOND)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryAddIngredientCommand c \u003d new InventoryAddIngredientCommand(ALMOND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryAddIngredientCommand c \u003d new InventoryAddIngredientCommand(ALMOND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new InventoryAddIngredientCommand(ALMOND));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new InventoryAddIngredientCommand(BUTTER));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 61,
      "tzihiang": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/inventory/InventoryClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.commands.inventory.InventoryClearCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.inventory.InventoryClearCommand.MESSAGE_SUCCESS_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.testutil.TypicalIngredients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        InventoryClearCommand i \u003d new InventoryClearCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        // empty inventory"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(i.execute(model), new CommandResult(MESSAGE_SUCCESS_EMPTY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        // with ingredients inside the inventory"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.addInventoryIngredient(TypicalIngredients.ALMOND);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.addInventoryIngredient(TypicalIngredients.BANANA);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.addInventoryIngredient(TypicalIngredients.CHICKEN);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(i.execute(model), new CommandResult(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(new InventoryClearCommand(), new InventoryClearCommand());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertNotEquals(new InventoryClearCommand(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 2,
      "tzihiang": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/inventory/InventoryCookCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.commands.inventory.InventoryCookCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class InventoryCookCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(100);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        InventoryCookCommand c \u003d new InventoryCookCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c, new InventoryCookCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InventoryCookCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "        InventoryCookCommand c \u003d new InventoryCookCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        AGLIO_OLIO.getIngredients().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .forEach(recipeIngredient -\u003e model.addInventoryIngredient(recipeIngredient));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "                VALID_RECIPE_INDEX.getOneBased())));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "        // after adding multiple recipes"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        AGLIO_OLIO.getIngredients().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .forEach(recipeIngredient -\u003e model.addInventoryIngredient(recipeIngredient));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "                VALID_RECIPE_INDEX.getOneBased())));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        //no more ingredient in inventory"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "        //insufficient ingredient in inventory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        AGLIO_OLIO.getIngredients().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .forEach(recipeIngredient -\u003e model.addInventoryIngredient(recipeIngredient));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.removeInventoryIngredient(new Ingredient(new IngredientName(\"Garlic\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "                new IngredientQuantity(\"3 cloves\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void execute_invalidInput() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "        // index greater than size of UniqueRecipeList in Cookbook"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "        InventoryCookCommand c \u003d new InventoryCookCommand(OUT_OF_BOUNDS_RECIPE_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hans555"
        },
        "content": "        InventoryCookCommand c \u003d new InventoryCookCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c, new InventoryCookCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertNotEquals(c, new InventoryCookCommand(OUT_OF_BOUNDS_RECIPE_INDEX));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 3,
      "hans555": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/inventory/InventoryRemoveIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ALMOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BUTTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class InventoryRemoveIngredientCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InventoryRemoveIngredientCommand(null, Optional.empty()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InventoryRemoveIngredientCommand(ALMOND.getName(), null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InventoryRemoveIngredientCommand(null, null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryRemoveIngredientCommand commandWithQuantity \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new InventoryRemoveIngredientCommand(ALMOND.getName(), Optional.of(ALMOND.getQuantity()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryRemoveIngredientCommand commandWithoutQuantity \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new InventoryRemoveIngredientCommand(ALMOND.getName(), Optional.empty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // removing existing ingredient with quantity specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.addInventoryIngredient(ALMOND);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(commandWithQuantity.execute(model),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CommandResult(String.format(InventoryRemoveIngredientCommand.MESSAGE_SUCCESS, ALMOND)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // removing existing ingredient without quantity specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.addInventoryIngredient(ALMOND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(commandWithoutQuantity.execute(model),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CommandResult(String.format(InventoryRemoveIngredientCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    InventoryRemoveIngredientCommand.ALL_KEYWORD + \" \" + ALMOND.getName())));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // error thrown after removing ALMOND"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e commandWithQuantity.execute(model));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e commandWithoutQuantity.execute(model));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(model.hasInventoryIngredient(ALMOND));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryRemoveIngredientCommand c \u003d new InventoryRemoveIngredientCommand(ALMOND.getName(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Optional.of(ALMOND.getQuantity()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryRemoveIngredientCommand c \u003d new InventoryRemoveIngredientCommand(ALMOND.getName(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Optional.of(ALMOND.getQuantity()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryRemoveIngredientCommand c \u003d new InventoryRemoveIngredientCommand(ALMOND.getName(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Optional.of(ALMOND.getQuantity()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c, new InventoryRemoveIngredientCommand(ALMOND.getName(), Optional.of(ALMOND.getQuantity())));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertNotEquals(c, new InventoryRemoveIngredientCommand(BUTTER.getName(), Optional.of(BUTTER.getQuantity())));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 30,
      "teo-jun-xiong": 44,
      "tzihiang": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/recipe/RecipeAddIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.recipe.RecipeAddIngredientCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ALMOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BUTTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.SCRAMBLED_EGG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.SPAGHETTI_BOLOGNESE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeAddIngredientCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddIngredientCommand c \u003d new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, ALMOND);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, ALMOND));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddIngredientCommand(null, ALMOND));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddIngredientCommand(null, null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddIngredientCommand c \u003d new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, ALMOND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, ALMOND, CARBONARA.getName())));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // after adding multiple recipes"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(SCRAMBLED_EGG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(SPAGHETTI_BOLOGNESE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, ALMOND, AGLIO_OLIO.getName())));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddIngredientCommand c \u003d new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, ALMOND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // empty Cookbook"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddIngredientCommand c \u003d new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, ALMOND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // index out of bounds"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddIngredientCommand d \u003d new RecipeAddIngredientCommand(OUT_OF_BOUNDS_RECIPE_INDEX, ALMOND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e d.execute(model));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddIngredientCommand c \u003d new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, ALMOND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, ALMOND));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, BUTTER));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "teo-jun-xiong": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/recipe/RecipeAddStepCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.recipe.RecipeAddStepCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalSteps.CARBONARA_ONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalSteps.CARBONARA_TWO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeAddStepCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Optional\u003cIndex\u003e VALID_STEP_INDEX \u003d Optional.of(new Index(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Optional\u003cIndex\u003e OUT_OF_BOUNDS_STEP_INDEX \u003d Optional.of(new Index(1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddStepCommand c \u003d new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_ONE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_ONE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddStepCommand(VALID_RECIPE_INDEX, null, null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddStepCommand(null, VALID_STEP_INDEX, null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddStepCommand(null, null, CARBONARA_ONE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddStepCommand(null, null, null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddStepCommand c \u003d new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_ONE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        CommandResult one \u003d c.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        CommandResult two \u003d new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                CARBONARA.getName().fullRecipeName, CARBONARA_ONE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(one, two);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddStepCommand c \u003d new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_ONE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput() throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddStepCommand c \u003d new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_ONE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // adding to a non-existent recipe"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // step index out of bounds"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddStepCommand d \u003d new RecipeAddStepCommand(VALID_RECIPE_INDEX, OUT_OF_BOUNDS_STEP_INDEX, CARBONARA_ONE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e d.execute(model));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // recipe index out of bounds"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddStepCommand e \u003d new RecipeAddStepCommand(OUT_OF_BOUNDS_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_ONE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e e.execute(model));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // adding duplicate step"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddStepCommand f \u003d new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_TWO);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        f.execute(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e f.execute(model));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddStepCommand c \u003d new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_ONE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_ONE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new RecipeAddStepCommand(VALID_RECIPE_INDEX, OUT_OF_BOUNDS_STEP_INDEX, CARBONARA_ONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 81,
      "hans555": 4,
      "tzihiang": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/recipe/RecipeAddTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.recipe.RecipeAddTagCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeAddTagCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Tag VALID_TAG_ONE \u003d new Tag(\"Easy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Tag VALID_TAG_TWO \u003d new Tag(\"Difficult\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddTagCommand c \u003d new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddTagCommand(null, VALID_TAG_ONE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddTagCommand(VALID_RECIPE_INDEX, null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddTagCommand(null, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddTagCommand c \u003d new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, VALID_TAG_ONE)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddTagCommand c \u003d new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput() throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddTagCommand c \u003d new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // adding to a non-existent recipe"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // recipe index out of bounds"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddTagCommand d \u003d new RecipeAddTagCommand(OUT_OF_BOUNDS_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e d.execute(model));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // adding duplicate tag"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddTagCommand f \u003d new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_TWO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        f.execute(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e f.execute(model));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddTagCommand c \u003d new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/recipe/RecipeRemoveIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BUTTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.EGG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeRemoveIngredientCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientName VALID_INGREDIENT_NAME \u003d EGG.getName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientQuantity VALID_INGREDIENT_QUANTITY \u003d new IngredientQuantity(\"2\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(VALID_INGREDIENT_NAME,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            VALID_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                null, null)); // index, null, null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveIngredientCommand(null,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                null, Optional.of(VALID_INGREDIENT_QUANTITY))); // null, null, quantity"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveIngredientCommand(null,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                VALID_INGREDIENT_NAME, null)); // null, name, null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                VALID_INGREDIENT_NAME, null)); // index, name, null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                null, Optional.of(VALID_INGREDIENT_QUANTITY))); // index, null, quantity"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveIngredientCommand(null,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY))); // null, name, quantity"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveIngredientCommand(null, null, null)); // all null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        RecipeRemoveIngredientCommand commandWithQuantity \u003d new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        RecipeRemoveIngredientCommand commandWithoutQuantity \u003d new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                VALID_INGREDIENT_NAME, Optional.empty());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // removing existing ingredient with quantity specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(commandWithQuantity.execute(model),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CommandResult(String.format(RecipeRemoveIngredientCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    VALID_INGREDIENT, CARBONARA.getName())));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // removing existing ingredient without quantity specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(commandWithoutQuantity.execute(model),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CommandResult(String.format(RecipeRemoveIngredientCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    RecipeRemoveIngredientCommand.ALL_KEYWORD + \" \" + VALID_INGREDIENT_NAME, CARBONARA.getName())));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // error thrown after removing EGG"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e commandWithQuantity.execute(model));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e commandWithoutQuantity.execute(model));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        RecipeRemoveIngredientCommand c \u003d new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT_NAME,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Optional.of(VALID_INGREDIENT_QUANTITY));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput() throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        RecipeRemoveIngredientCommand c \u003d new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // removing from a non-existent recipe"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // recipe index out of bounds"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        RecipeRemoveIngredientCommand d \u003d new RecipeRemoveIngredientCommand(OUT_OF_BOUNDS_RECIPE_INDEX,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e d.execute(model));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // add ingredient to CARBONARA"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, BUTTER).execute(model);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // ingredient not found"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        RecipeRemoveIngredientCommand e \u003d new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                BUTTER.getName(), Optional.of(BUTTER.getQuantity()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        e.execute(model);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e e.execute(model));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        RecipeRemoveIngredientCommand c \u003d new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(c, new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertNotEquals(c, new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                BUTTER.getName(), Optional.of(BUTTER.getQuantity())));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 34,
      "teo-jun-xiong": 60,
      "shanecsj": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/recipe/RecipeRemoveStepCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.recipe.RecipeRemoveStepCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalSteps.CARBONARA_ONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeRemoveStepCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index VALID_REMOVE_STEP_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Optional\u003cIndex\u003e VALID_ADD_STEP_INDEX \u003d Optional.of(new Index(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_STEP_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        RecipeRemoveStepCommand c \u003d new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c, new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveStepCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveStepCommand(null,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "                VALID_REMOVE_STEP_INDEX));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveStepCommand(null,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "        RecipeRemoveStepCommand c \u003d new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.setCookbook(new Cookbook());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // add a step to recipe"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "        new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_ADD_STEP_INDEX, CARBONARA_ONE).execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                AGLIO_OLIO.getName().fullRecipeName, CARBONARA_ONE)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        RecipeRemoveStepCommand c \u003d new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "        RecipeRemoveStepCommand c \u003d new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // removing from a non-existent recipe"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // recipe index out of bounds"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": "        RecipeRemoveStepCommand d \u003d new RecipeRemoveStepCommand(OUT_OF_BOUNDS_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e d.execute(model));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": "        RecipeRemoveStepCommand c \u003d new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c, new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, OUT_OF_BOUNDS_STEP_INDEX));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 71,
      "hans555": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/recipe/RecipeRemoveTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.recipe.RecipeRemoveTagCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeRemoveTagCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Tag VALID_TAG_ONE \u003d new Tag(\"Easy\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Tag VALID_TAG_TWO \u003d new Tag(\"Difficult\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeRemoveTagCommand c \u003d new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveTagCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveTagCommand(null,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                VALID_TAG_ONE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveTagCommand(null,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeRemoveTagCommand c \u003d new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // add a tag to recipe"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE).execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, VALID_TAG_ONE)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeRemoveTagCommand c \u003d new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeRemoveTagCommand c \u003d new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG_TWO);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // removing from a non-existent recipe"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // removing a non-existent tag"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // recipe index out of bounds"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeRemoveTagCommand d \u003d new RecipeRemoveTagCommand(OUT_OF_BOUNDS_RECIPE_INDEX, VALID_TAG_TWO);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e d.execute(model));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeRemoveTagCommand c \u003d new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG_TWO));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CookingPapaParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookAddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CookingPapaParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final CookingPapaParser parser \u003d new CookingPapaParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseCommand_cookbookAdd() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Recipe recipe \u003d new RecipeBuilder().withRecipeName(\"Recipe\").withRecipeDescription(\"test\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "        CookbookAddCommand command \u003d (CookbookAddCommand) parser.parseCommand(\"cookbook add recipe n/Recipe d/test\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(new CookbookAddCommand(recipe), command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_CATEGORY) instanceof ExitCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_CATEGORY + \"\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_CATEGORY) instanceof HelpCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_CATEGORY + \"\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 48,
      "hans555": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExitCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class ExitCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_STRING \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_STRING \u003d \"invalid xyz\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ExitCommandParser c \u003d new ExitCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c.parse(VALID_STRING), new ExitCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ExitCommandParser c \u003d new ExitCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e c.parse(INVALID_STRING));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/HelpCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class HelpCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_STRING \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_STRING \u003d \"invalid xyz\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "        HelpCommandParser c \u003d new HelpCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c.parse(VALID_STRING), new HelpCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "        HelpCommandParser c \u003d new HelpCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e c.parse(INVALID_STRING));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cart/CartAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddRecipeIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartAddCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new IngredientQuantity(\"5\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_INGREDIENT_ARGUMENT \u003d \"ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_INGREDIENT_ARGUMENT_NO_NAME \u003d \" q/5\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_INGREDIENT_ARGUMENT_NO_QUANTITY \u003d \" i/Ingredient\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_RECIPE_INDEX_ARGUMENT \u003d \"recipe 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_RECIPE_INDEX_ARGUMENT_NO_RECIPE \u003d \"word\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \" Invalid argument\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddCommandParser c \u003d new CartAddCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_INGREDIENT_ARGUMENT), new CartAddIngredientCommand(VALID_INGREDIENT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c.parse(VALID_RECIPE_INDEX_ARGUMENT), new CartAddRecipeIngredientCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddCommandParser c \u003d new CartAddCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.parse(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartAddCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CartAddCommandParser().parse(INVALID_INGREDIENT_ARGUMENT_NO_QUANTITY));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartAddCommandParser().parse(INVALID_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(ParseException.class, ()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "            -\u003e new CartAddCommandParser().parse(INVALID_RECIPE_INDEX_ARGUMENT_NO_RECIPE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 40,
      "hans555": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cart/CartAddIngredientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddIngredientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartAddIngredientCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new IngredientQuantity(\"5\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_INGREDIENT_ARGUMENT \u003d \" i/Ingredient q/5\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_INGREDIENT_ARGUMENT_NO_NAME \u003d \" q/5\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \" Invalid argument\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddIngredientCommandParser c \u003d new CartAddIngredientCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_INGREDIENT_ARGUMENT), new CartAddIngredientCommand(VALID_INGREDIENT));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddIngredientCommandParser c \u003d new CartAddIngredientCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.parse(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartAddIngredientCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new CartAddIngredientCommandParser().parse(INVALID_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cart/CartClearCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartClearCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ARGUMENT \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartClearCommandParser c \u003d new CartClearCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_ARGUMENT), new CartClearCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartClearCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cart/CartCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddRecipeIngredientCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cart.CartMoveCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartRemoveIngredientCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new IngredientQuantity(\"5\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientName VALID_INGREDIENT_NAME \u003d new IngredientName(\"Ingredient\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientQuantity VALID_INGREDIENT_QUANTITY \u003d new IngredientQuantity(\"5\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String VALID_ADD_INGREDIENT_ARGUMENT \u003d \" add ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ADD_RECIPE_ARGUMENT \u003d \"add recipe 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_CLEAR_ARGUMENT \u003d \"clear\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_MOVE_ARGUMENT \u003d \"move\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_REMOVE_INGREDIENT_ARGUMENT \u003d \"remove ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String VALID_REMOVE_INGREDIENT_ARGUMENT_NO_QUANTITY \u003d \" remove ingredient i/Ingredient\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String INVALID_ADD_INGREDIENT_ARGUMENT_NO_NAME \u003d \" add q/5\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_CLEAR_ARGUMENT \u003d \"clear clear\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_MOVE_ARGUMENT \u003d \"move move\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_NAME \u003d \" remove q/5\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartCommandParser c \u003d new CartCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_ADD_INGREDIENT_ARGUMENT), new CartAddIngredientCommand(VALID_INGREDIENT));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_ADD_RECIPE_ARGUMENT), new CartAddRecipeIngredientCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_CLEAR_ARGUMENT), new CartClearCommand());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(c.parse(VALID_MOVE_ARGUMENT), new CartMoveCommand());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.parse(VALID_REMOVE_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CartRemoveIngredientCommand(VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.parse(VALID_REMOVE_INGREDIENT_ARGUMENT_NO_QUANTITY),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CartRemoveIngredientCommand(VALID_INGREDIENT_NAME, Optional.empty()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CartCommandParser().parse(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CartCommandParser().parse(INVALID_ADD_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CartCommandParser().parse(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartCommandParser().parse(INVALID_CLEAR_ARGUMENT));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartCommandParser().parse(INVALID_MOVE_ARGUMENT));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 16,
      "teo-jun-xiong": 40,
      "shanecsj": 8,
      "hans555": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cart/CartExportCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartExportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartExportCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ARGUMENT \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartExportCommandParser c \u003d new CartExportCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_ARGUMENT), new CartExportCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartExportCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cart/CartMoveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartMoveCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartMoveCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static final String VALID_ARGUMENT \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"I\u0027m here to play punk\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        CartMoveCommandParser c \u003d new CartMoveCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(c.parse(VALID_ARGUMENT), new CartMoveCommand());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartMoveCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cart/CartRemoveIngredientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartRemoveIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartRemoveIngredientCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientName VALID_INGREDIENT_NAME \u003d new IngredientName(\"Ingredient\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientQuantity VALID_INGREDIENT_QUANTITY \u003d new IngredientQuantity(\"5\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INGREDIENT_KEYWORD \u003d \"ingredient\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_INGREDIENT_ARGUMENT \u003d INGREDIENT_KEYWORD + \" i/Ingredient q/5\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_INGREDIENT_ARGUMENT_NO_QUANTITY \u003d INGREDIENT_KEYWORD + \" i/Ingredient\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_INGREDIENT_ARGUMENT_NO_NAME \u003d INGREDIENT_KEYWORD + \" q/5\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d INGREDIENT_KEYWORD + \"Invalid argument\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartRemoveIngredientCommandParser c \u003d new CartRemoveIngredientCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.parse(VALID_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CartRemoveIngredientCommand(VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parse_validInputWithoutQuantity() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartRemoveIngredientCommandParser c \u003d new CartRemoveIngredientCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.parse(VALID_INGREDIENT_ARGUMENT_NO_QUANTITY),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CartRemoveIngredientCommand(VALID_INGREDIENT_NAME, Optional.empty()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartRemoveIngredientCommandParser c \u003d new CartRemoveIngredientCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.parse(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartRemoveIngredientCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new CartRemoveIngredientCommandParser().parse(INVALID_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 14,
      "teo-jun-xiong": 31,
      "shanecsj": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cookbook/CookbookAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.testutil.TypicalRecipes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookAddCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Recipe VALID_RECIPE \u003d TypicalRecipes.getValidRecipe();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String VALID_ARGUMENT \u003d \"recipe n/Recipe d/Description i/Ingredient q/5 s/Step t/Tag\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_ARGUMENT_NO_RECIPE_NAME \u003d \"recipe d/Description i/Ingredient q/5 x/1 \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"s/Step t/Tag\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_ARGUMENT_NO_RECIPE_DESCRIPTION \u003d \"recipe n/Recipe i/Ingredient q/5 \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"x/1 s/Step t/Tag\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookAddCommandParser c \u003d new CookbookAddCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_ARGUMENT), new CookbookAddCommand(VALID_RECIPE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookAddCommandParser c \u003d new CookbookAddCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.parse(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CookbookAddCommandParser().parse(INVALID_ARGUMENT_NO_RECIPE_NAME));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new CookbookAddCommandParser().parse(INVALID_ARGUMENT_NO_RECIPE_DESCRIPTION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new CookbookAddCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "teo-jun-xiong": 40,
      "hans555": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cookbook/CookbookCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookRemoveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookViewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.testutil.TypicalRecipes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_ADD_ARGUMENT \u003d \" add recipe n/Recipe \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"d/Description i/Ingredient q/5 s/Step t/Tag\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_VIEW_INDEX_STRING \u003d \" view recipe 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_REMOVE_INDEX_STRING \u003d \" remove recipe 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Recipe VALID_RECIPE \u003d TypicalRecipes.getValidRecipe();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String INVALID_ARGUMENT_NO_RECIPE_NAME \u003d \" add recipe d/Description i/Ingredient q/5 \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"s/Step t/Tag\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_ARGUMENT_NO_RECIPE_DESCRIPTION \u003d \" add recipe n/Recipe i/Ingredient q/5 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"s/Step t/Tag\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookCommandParser c \u003d new CookbookCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_ADD_ARGUMENT), new CookbookAddCommand(VALID_RECIPE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_REMOVE_INDEX_STRING), new CookbookRemoveCommand(VALID_INDEX));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_VIEW_INDEX_STRING), new CookbookViewCommand(VALID_INDEX));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookCommandParser c \u003d new CookbookCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.parse(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookCommandParser c \u003d new CookbookCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CookbookCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CookbookCommandParser().parse(INVALID_ARGUMENT_NO_RECIPE_NAME));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new CookbookCommandParser().parse(INVALID_ARGUMENT_NO_RECIPE_DESCRIPTION));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 3,
      "teo-jun-xiong": 44,
      "hans555": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cookbook/CookbookListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class CookbookListCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_STRING \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_STRING \u003d \"invalid xyz\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "        CookbookListCommandParser c \u003d new CookbookListCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c.parse(VALID_STRING), new CookbookListCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "        CookbookListCommandParser c \u003d new CookbookListCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e c.parse(INVALID_STRING));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cookbook/CookbookRemoveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookRemoveCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookRemoveCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_INDEX_STRING \u003d \"recipe 1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_INDEX_STRING \u003d \"Invalid index string\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookRemoveCommandParser c \u003d new CookbookRemoveCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_INDEX_STRING), new CookbookRemoveCommand(VALID_INDEX));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookRemoveCommandParser c \u003d new CookbookRemoveCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.parse(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookRemoveCommandParser c \u003d new CookbookRemoveCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e c.parse(INVALID_INDEX_STRING));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 33,
      "hans555": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cookbook/CookbookSearchCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookSearchByInventoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookSearchByKeywordCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookSearchByTagCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeContainsTagsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookSearchCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_KEYWORDS_STRING \u003d \"recipe k/key k/words\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_KEYWORDS_ARGUMENTS \u003d \" k/key k/words\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final List\u003cString\u003e VALID_KEYWORDS_ONE \u003d Arrays.asList(\"key\", \"words\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final RecipeNameContainsKeywordsPredicate VALID_KEYWORD_PREDICATE_ONE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeNameContainsKeywordsPredicate(VALID_KEYWORDS_ONE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_TAGS_STRING \u003d \"tag t/easy t/difficult\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_TAGS_ARGUMENTS \u003d \" t/easy t/difficult\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final List\u003cString\u003e VALID_TAGS_ONE \u003d Arrays.asList(\"easy\", \"difficult\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final RecipeContainsTagsPredicate VALID_TAG_PREDICATE_ONE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeContainsTagsPredicate(VALID_TAGS_ONE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_INVENTORY_STRING \u003d \"inventory\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new CookbookSearchCommandParser().parse(VALID_KEYWORDS_STRING),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CookbookSearchByKeywordCommand(VALID_KEYWORD_PREDICATE_ONE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new CookbookSearchCommandParser().parse(VALID_TAGS_STRING),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CookbookSearchByTagCommand(VALID_TAG_PREDICATE_ONE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new CookbookSearchCommandParser().parse(VALID_INVENTORY_STRING),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CookbookSearchByInventoryCommand());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CookbookSearchCommandParser().parse(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseSearchByKeyword_validInput() throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(new CookbookSearchCommandParser().parseSearchByKeyword(VALID_KEYWORDS_ARGUMENTS),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CookbookSearchByKeywordCommand(VALID_KEYWORD_PREDICATE_ONE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseSearchByKeyword_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CookbookSearchCommandParser().parseSearchByKeyword(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseSearchByTag_validInput() throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(new CookbookSearchCommandParser().parseSearchByTag(VALID_TAGS_ARGUMENTS),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CookbookSearchByTagCommand(VALID_TAG_PREDICATE_ONE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseSearchByTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CookbookSearchCommandParser().parseSearchByTag(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseSearchByInventory_validInput() throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new CookbookSearchCommandParser().parseSearchByInventory(VALID_INVENTORY_STRING),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CookbookSearchByInventoryCommand());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseSearchByInventory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CookbookSearchCommandParser().parseSearchByInventory(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 78,
      "hans555": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cookbook/CookbookViewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookViewCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookViewCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_INDEX_STRING \u003d \"recipe 1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_INDEX_STRING \u003d \"Invalid index string\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookViewCommandParser c \u003d new CookbookViewCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_INDEX_STRING), new CookbookViewCommand(VALID_INDEX));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookViewCommandParser c \u003d new CookbookViewCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.parse(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookViewCommandParser c \u003d new CookbookViewCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e c.parse(INVALID_INDEX_STRING));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 33,
      "hans555": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/inventory/InventoryAddIngredientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryAddIngredientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class InventoryAddIngredientCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new IngredientQuantity(\"5\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INGREDIENT_KEYWORD \u003d \"ingredient\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_INGREDIENT_ARGUMENT \u003d INGREDIENT_KEYWORD + \" i/Ingredient q/5\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_INGREDIENT_ARGUMENT_NO_NAME \u003d INGREDIENT_KEYWORD + \" q/5\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d INGREDIENT_KEYWORD + \" Invalid argument\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryAddIngredientCommandParser c \u003d new InventoryAddIngredientCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Assertions.assertEquals(c.parse(VALID_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new InventoryAddIngredientCommand(VALID_INGREDIENT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InventoryAddIngredientCommandParser().parse(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, ()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            -\u003e new InventoryAddIngredientCommandParser().parse(INVALID_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, ()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            -\u003e new InventoryAddIngredientCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 37,
      "shanecsj": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/inventory/InventoryClearCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryClearCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static final String VALID_ARGUMENT \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        InventoryClearCommandParser i \u003d new InventoryClearCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(i.parse(VALID_ARGUMENT), new InventoryClearCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new InventoryClearCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/inventory/InventoryCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryAddIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryRemoveIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class InventoryCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new IngredientQuantity(\"5\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientName VALID_INGREDIENT_NAME \u003d new IngredientName(\"Ingredient\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientQuantity VALID_INGREDIENT_QUANTITY \u003d new IngredientQuantity(\"5\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_ADD_INGREDIENT_ARGUMENT \u003d \" add ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_REMOVE_INGREDIENT_ARGUMENT \u003d \" remove ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String VALID_REMOVE_INGREDIENT_ARGUMENT_NO_QUANTITY \u003d \" remove ingredient i/Ingredient\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_INGREDIENT_ARGUMENT_NO_NAME \u003d \" add q/5\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_NAME \u003d \" remove q/5\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \" Invalid argument\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryCommandParser c \u003d new InventoryCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_ADD_INGREDIENT_ARGUMENT), new InventoryAddIngredientCommand(VALID_INGREDIENT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_REMOVE_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new InventoryRemoveIngredientCommand(VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.parse(VALID_REMOVE_INGREDIENT_ARGUMENT_NO_QUANTITY),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new InventoryRemoveIngredientCommand(VALID_INGREDIENT_NAME, Optional.empty()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InventoryCommandParser().parse(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new InventoryCommandParser().parse(INVALID_ADD_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new InventoryCommandParser().parse(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new InventoryCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 9,
      "teo-jun-xiong": 41,
      "hans555": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/inventory/InventoryCookCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCookCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class InventoryCookCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_ARGUMENT \u003d \"recipe 1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"invalid 1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_ARGUMENT_INVALID_INDEX \u003d \"recipe 0\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index VALID_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "        InventoryCookCommandParser i \u003d new InventoryCookCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(i.parse(VALID_ARGUMENT), new InventoryCookCommand(VALID_INDEX));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new InventoryClearCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new InventoryClearCommandParser()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .parse(INVALID_ARGUMENT_INVALID_INDEX));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/inventory/InventoryRemoveIngredientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryRemoveIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class InventoryRemoveIngredientCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientName VALID_INGREDIENT_NAME \u003d new IngredientName(\"Ingredient\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientQuantity VALID_INGREDIENT_QUANTITY \u003d new IngredientQuantity(\"5\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INGREDIENT_KEYWORD \u003d \"ingredient\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_INGREDIENT_ARGUMENT \u003d INGREDIENT_KEYWORD + \" i/Ingredient q/5\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_INGREDIENT_ARGUMENT_NO_QUANTITY \u003d INGREDIENT_KEYWORD + \" i/Ingredient\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_INGREDIENT_ARGUMENT_NO_NAME \u003d INGREDIENT_KEYWORD + \" q/5\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d INGREDIENT_KEYWORD + \"Invalid argument\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parse_validInputWithQuantity() throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryRemoveIngredientCommandParser c \u003d new InventoryRemoveIngredientCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.parse(VALID_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new InventoryRemoveIngredientCommand(VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parse_validInputWithoutQuantity() throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryRemoveIngredientCommandParser c \u003d new InventoryRemoveIngredientCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.parse(VALID_INGREDIENT_ARGUMENT_NO_QUANTITY),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new InventoryRemoveIngredientCommand(VALID_INGREDIENT_NAME, Optional.empty()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryRemoveIngredientCommandParser c \u003d new InventoryRemoveIngredientCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.parse(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new InventoryRemoveIngredientCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new InventoryRemoveIngredientCommandParser().parse(INVALID_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 16,
      "teo-jun-xiong": 29,
      "shanecsj": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/recipe/RecipeAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddIngredientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddStepCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddTagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeAddCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        new IngredientQuantity(\"5\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ADD_INGREDIENT_ARGUMENT \u003d \"1 ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX \u003d \"ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME \u003d \"1 ingredient q/5\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_PARSE_ADD_INGREDIENT_ARGUMENT \u003d \"1 i/Ingredient q/5\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Step VALID_STEP \u003d new Step(\"Step\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Optional\u003cIndex\u003e VALID_STEP_INDEX \u003d Optional.of(new Index(0));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ADD_STEP_ARGUMENT \u003d \"1 step x/1 s/Step\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_STEP_ARGUMENT_NO_RECIPE_INDEX \u003d \"step x/1 s/Step\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_STEP_ARGUMENT_NO_STEP_INDEX \u003d \"1 step x/s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_STEP_ARGUMENT_NO_STEP_DESCRIPTION \u003d \"1 step s/Step\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_PARSE_ADD_STEP_ARGUMENT \u003d \"1 x/1 s/Step\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Tag VALID_TAG \u003d new Tag(\"Tag\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ADD_TAG_ARGUMENT \u003d \"1 tag t/Tag\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_TAG_ARGUMENT_NO_RECIPE_INDEX \u003d \"tag t/Tag\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_TAG_ARGUMENT_NO_TAG \u003d \"1 tag\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_PARSE_ADD_TAG_ARGUMENT \u003d \"1 t/Tag\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeAddCommandParser().parse(VALID_ADD_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeAddCommandParser().parse(VALID_ADD_STEP_ARGUMENT),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, VALID_STEP));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeAddCommandParser().parse(VALID_ADD_TAG_ARGUMENT),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parse(INVALID_ADD_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parse(INVALID_ADD_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parse(INVALID_ADD_STEP_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parse(INVALID_ADD_STEP_ARGUMENT_NO_STEP_INDEX));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parse(INVALID_ADD_STEP_ARGUMENT_NO_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parse(INVALID_ADD_TAG_ARGUMENT_NO_TAG));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parse(INVALID_ADD_TAG_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseAddIngredient_validInput() throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeAddCommandParser().parseAddIngredient(VALID_PARSE_ADD_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseAddIngredient_invalidInput() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parseAddIngredient(INVALID_ADD_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parseAddIngredient(INVALID_ADD_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseAddStep_validInput() throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeAddCommandParser().parseAddStep(VALID_PARSE_ADD_STEP_ARGUMENT),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, VALID_STEP));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseAddStep_invalidInput() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parseAddStep(INVALID_ADD_STEP_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parseAddIngredient(INVALID_ADD_STEP_ARGUMENT_NO_STEP_INDEX));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parseAddIngredient(INVALID_ADD_STEP_ARGUMENT_NO_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseAddTag_validInput() throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeAddCommandParser().parseAddTag(VALID_PARSE_ADD_TAG_ARGUMENT),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseAddTag_invalidInput() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parseAddTag(INVALID_ADD_TAG_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parseAddTag(INVALID_ADD_TAG_ARGUMENT_NO_TAG));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void containsIngredient_validInput() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(new RecipeAddCommandParser().containsIngredient(VALID_ADD_INGREDIENT_ARGUMENT));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(new RecipeAddCommandParser()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .containsIngredient(INVALID_ADD_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void containsStep_validInput() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(new RecipeAddCommandParser().containsStep(VALID_ADD_STEP_ARGUMENT));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(new RecipeAddCommandParser().containsStep(INVALID_ADD_STEP_ARGUMENT_NO_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(new RecipeAddCommandParser().containsStep(INVALID_ADD_STEP_ARGUMENT_NO_STEP_INDEX));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void containsTag_validInput() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(new RecipeAddCommandParser().containsTag(VALID_ADD_TAG_ARGUMENT));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(new RecipeAddCommandParser().containsTag(INVALID_ADD_TAG_ARGUMENT_NO_TAG));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 139,
      "hans555": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/recipe/RecipeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddStepCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddTagCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveIngredientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveStepCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveTagCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new IngredientQuantity(\"5\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ADD_INGREDIENT_ARGUMENT \u003d \"1 add ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX \u003d \"add ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME \u003d \"1 add ingredient q/5\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_REMOVE_INGREDIENT_ARGUMENT \u003d \"1 remove ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_REMOVE_INGREDIENT_NO_QUANTITY_ARGUMENT \u003d \"1 remove ingredient i/Ingredient\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX \u003d \"remove ingredient i/Ingredient \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        + \"q/5\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME \u003d \"1 add ingredient q/5\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Step VALID_STEP \u003d new Step(\"Step\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Optional\u003cIndex\u003e VALID_ADD_STEP_INDEX \u003d Optional.of(new Index(0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index VALID_REMOVE_STEP_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ADD_STEP_ARGUMENT \u003d \"1 add step x/1 s/Step\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_STEP_ARGUMENT_NO_RECIPE_INDEX \u003d \"add step x/1 s/Step\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_STEP_ARGUMENT_NO_STEP_INDEX \u003d \"1 add step x/s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_STEP_ARGUMENT_NO_STEP_DESCRIPTION \u003d \"1 add step s/Step\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_REMOVE_STEP_ARGUMENT \u003d \"1 remove step x/1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_STEP_ARGUMENT_NO_RECIPE_INDEX \u003d \"remove step x/1 s/Step\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_INDEX \u003d \"1 remove step x/s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_DESCRIPTION \u003d \"1 remove step s/Step\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Tag VALID_TAG \u003d new Tag(\"Tag\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ADD_TAG_ARGUMENT \u003d \"1 add tag t/Tag\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_TAG_ARGUMENT_NO_RECIPE_INDEX \u003d \"add tag t/Tag\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_TAG_ARGUMENT_NO_TAG \u003d \"1 add tag\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_REMOVE_TAG_ARGUMENT \u003d \"1 remove tag t/Tag\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_TAG_ARGUMENT_NO_RECIPE_INDEX \u003d \"remove tag t/Tag\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_TAG_ARGUMENT_NO_TAG \u003d \"1 remove tag\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeCommandParser().parse(VALID_ADD_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeCommandParser().parse(VALID_ADD_STEP_ARGUMENT),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "                new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_ADD_STEP_INDEX, VALID_STEP));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeCommandParser().parse(VALID_ADD_TAG_ARGUMENT),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeCommandParser().parse(VALID_REMOVE_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT.getName(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        Optional.of(VALID_INGREDIENT.getQuantity())));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(new RecipeCommandParser().parse(VALID_REMOVE_INGREDIENT_NO_QUANTITY_ARGUMENT),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT.getName(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        Optional.empty()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeCommandParser().parse(VALID_REMOVE_STEP_ARGUMENT),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": "                new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeCommandParser().parse(VALID_REMOVE_TAG_ARGUMENT),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeCommandParser().parse(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ADD_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ADD_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ADD_STEP_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ADD_STEP_ARGUMENT_NO_STEP_INDEX));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ADD_STEP_ARGUMENT_NO_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ADD_TAG_ARGUMENT_NO_TAG));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ADD_TAG_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_REMOVE_STEP_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_INDEX));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_REMOVE_TAG_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_REMOVE_TAG_ARGUMENT_NO_TAG));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 107,
      "shanecsj": 6,
      "hans555": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/recipe/RecipeRemoveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveIngredientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveStepCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveTagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeRemoveCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new IngredientQuantity(\"5\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_REMOVE_INGREDIENT_ARGUMENT \u003d \"1 ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX \u003d \"ingredient i/Ingredient \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"q/5\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME \u003d \"1 ingredient q/5\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_PARSE_REMOVE_INGREDIENT_ARGUMENT \u003d \"1 i/Ingredient q/5\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_PARSE_REMOVE_INGREDIENT_NO_QUANTITY_ARGUMENT \u003d \"1 i/Ingredient\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_STEP_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_REMOVE_STEP_ARGUMENT \u003d \"1 step x/1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_STEP_ARGUMENT_NO_RECIPE_INDEX \u003d \"step x/1 s/Step\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_INDEX \u003d \"1 step x/s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_DESCRIPTION \u003d \"1 step s/Step\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_PARSE_REMOVE_STEP_ARGUMENT \u003d \"1 x/1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Tag VALID_TAG \u003d new Tag(\"Tag\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_REMOVE_TAG_ARGUMENT \u003d \"1 tag t/Tag\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_TAG_ARGUMENT_NO_RECIPE_INDEX \u003d \"tag t/Tag\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_TAG_ARGUMENT_NO_TAG \u003d \"1 tag\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_PARSE_REMOVE_TAG_ARGUMENT \u003d \"1 t/Tag\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeRemoveCommandParser().parse(VALID_REMOVE_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT.getName(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        Optional.of(VALID_INGREDIENT.getQuantity())));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeRemoveCommandParser().parse(VALID_REMOVE_STEP_ARGUMENT),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeRemoveCommandParser().parse(VALID_REMOVE_TAG_ARGUMENT),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveCommandParser().parse(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveCommandParser().parse(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveCommandParser().parse(INVALID_REMOVE_STEP_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveCommandParser().parse(INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveCommandParser().parse(INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_INDEX));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveCommandParser().parse(INVALID_REMOVE_TAG_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveCommandParser().parse(INVALID_REMOVE_TAG_ARGUMENT_NO_TAG));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseRemoveIngredient_validInput() throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeRemoveCommandParser().parseRemoveIngredient(VALID_PARSE_REMOVE_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT.getName(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        Optional.of(VALID_INGREDIENT.getQuantity())));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void parseRemoveIngredientWithoutQuantity_validInput() throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(new RecipeRemoveCommandParser()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        .parseRemoveIngredient(VALID_PARSE_REMOVE_INGREDIENT_NO_QUANTITY_ARGUMENT),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT.getName(), Optional.empty()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseRemoveIngredient_invalidInput() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveCommandParser().parseRemoveIngredient(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveCommandParser()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .parseRemoveIngredient(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseRemoveStep_validInput() throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeRemoveCommandParser().parseRemoveStep(VALID_PARSE_REMOVE_STEP_ARGUMENT),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseRemoveStep_invalidInput() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveCommandParser().parseRemoveStep(INVALID_REMOVE_STEP_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveCommandParser().parseRemoveStep(INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_INDEX));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveCommandParser().parseRemoveStep(INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseRemoveTag_validInput() throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeRemoveCommandParser().parseRemoveTag(VALID_PARSE_REMOVE_TAG_ARGUMENT),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseRemoveTag_invalidInput() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveCommandParser().parseRemoveTag(INVALID_REMOVE_TAG_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveCommandParser().parseRemoveTag(INVALID_REMOVE_TAG_ARGUMENT_NO_TAG));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void containsIngredient_validInput() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(new RecipeRemoveCommandParser().containsIngredient(VALID_REMOVE_INGREDIENT_ARGUMENT));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(new RecipeRemoveCommandParser()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .containsIngredient(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void containsStep_validInput() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(new RecipeRemoveCommandParser().containsStep(VALID_REMOVE_STEP_ARGUMENT));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(new RecipeRemoveCommandParser().containsStep(INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void containsTag_validInput() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(new RecipeRemoveCommandParser().containsTag(VALID_REMOVE_TAG_ARGUMENT));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(new RecipeRemoveCommandParser().containsTag(INVALID_REMOVE_TAG_ARGUMENT_NO_TAG));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 136,
      "shanecsj": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalCart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CartTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Cart cart \u003d new Cart();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(Collections.emptyList(), cart.getIngredientList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cart.resetData(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData_withValidReadOnlyCart_replacesData() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart newData \u003d getTypicalCart();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.resetData(newData);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(newData, cart);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cart.hasIngredient(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_ingredientNotInCart_returnsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(cart.hasIngredient(APPLE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_ingredientInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.addIngredient(APPLE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(cart.hasIngredient(APPLE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_compatibleIngredientInCart_returnsTrue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.addIngredient(APPLE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(cart.hasIngredient(editedApple));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_incompatibleIngredientInCart_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.addIngredient(APPLE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(cart.hasIngredient(editedApple));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getIngredientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e cart.getIngredientList().remove(0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * A stub ReadOnlyCart whose ingredient list can violate interface constraints."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static class CartStub implements ReadOnlyCart {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private final ObservableList\u003cIngredient\u003e ingredients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartStub(Collection\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.ingredients.setAll(ingredients);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public ObservableList\u003cIngredient\u003e getIngredientList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return ingredients;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CookbookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HEALTHY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalCookbook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final Cookbook cookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(Collections.emptyList(), cookbook.getRecipeList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cookbook.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void resetData_withValidReadOnlyCookbook_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Cookbook newData \u003d getTypicalCookbook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        cookbook.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(newData, cookbook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData_withDuplicateRecipes_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Recipe editedCarbonara \u003d new RecipeBuilder(CARBONARA).withTags(VALID_TAG_HEALTHY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        List\u003cRecipe\u003e newRecipes \u003d Arrays.asList(CARBONARA, editedCarbonara);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        CookbookTest.CookbookStub newData \u003d new CookbookTest.CookbookStub(newRecipes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e cookbook.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cookbook.hasRecipe(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void hasRecipe_recipeNotInCookbook_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(cookbook.hasRecipe(CARBONARA));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void hasRecipe_recipeInCookbook_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        cookbook.addRecipe(CARBONARA);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(cookbook.hasRecipe(CARBONARA));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void hasRecipe_recipeWithSameIdentityFieldsInCookbook_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        cookbook.addRecipe(CARBONARA);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Recipe editedCarbonara \u003d new RecipeBuilder(CARBONARA).withTags(VALID_TAG_HEALTHY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(cookbook.hasRecipe(editedCarbonara));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void getRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e cookbook.getRecipeList().remove(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * A stub ReadOnlyCookbook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static class CookbookStub implements ReadOnlyCookbook {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        private final ObservableList\u003cRecipe\u003e recipes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        CookbookStub(Collection\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            this.recipes.setAll(recipes);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return recipes;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 3,
      "shanecsj": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/model/InventoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalInventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class InventoryTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(Collections.emptyList(), inventory.getIngredientList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e inventory.resetData(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData_withValidReadOnlyInventory_replacesData() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory newData \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.resetData(newData);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(newData, inventory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e inventory.hasIngredient(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_ingredientNotInInventory_returnsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(inventory.hasIngredient(APPLE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_ingredientInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.addIngredient(APPLE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(inventory.hasIngredient(APPLE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_compatibleIngredientInInventory_returnsTrue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.addIngredient(APPLE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(inventory.hasIngredient(editedApple));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_incompatibleIngredientInInventory_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.addIngredient(APPLE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(inventory.hasIngredient(editedApple));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getIngredientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e inventory.getIngredientList().remove(0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * A stub ReadOnlyInventory whose ingredient list can violate interface constraints."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static class InventoryStub implements ReadOnlyInventory {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private final ObservableList\u003cIngredient\u003e ingredients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryStub(Collection\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.ingredients.setAll(ingredients);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public ObservableList\u003cIngredient\u003e getIngredientList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return ingredients;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ALMOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalInventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.SCRAMBLED_EGG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.SPAGHETTI_BOLOGNESE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalCookbook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.RecipeInventoryIngredientsSimilarityComparator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(new Cookbook(), new Cookbook(modelManager.getCookbook()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(new Inventory(), new Inventory(modelManager.getInventory()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(new Cart(), new Cart(modelManager.getCart()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCookbookFilePath(Paths.get(\"cookbook/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setInventoryFilePath(Paths.get(\"inventory/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCartFilePath(Paths.get(\"cart/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCookbookFilePath(Paths.get(\"new/cookbook/file/path\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setInventoryFilePath(Paths.get(\"new/inventory/file/path\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCartFilePath(Paths.get(\"new/cart/file/path\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCookbookFilePath(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbookFilePath_validPath_setsCookbookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Path path \u003d Paths.get(\"cookbook/file/path\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager.setCookbookFilePath(path);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(path, modelManager.getCookbookFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setInventoryFilePath(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryFilePath_validPath_setsInventoryFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Path path \u003d Paths.get(\"inventory/file/path\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager.setInventoryFilePath(path);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(path, modelManager.getInventoryFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void hasClearedInventory_ingredientNotInInventory_returnsTrue() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager.addInventoryIngredient(APPLE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager.addInventoryIngredient(BANANA);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager.setInventory(modelManager.getInventory());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(!modelManager.hasInventoryIngredient(APPLE)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                \u0026\u0026 !modelManager.hasInventoryIngredient(BANANA));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCartFilePath(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartFilePath_validPath_setsCartFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Path path \u003d Paths.get(\"cart/file/path\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager.setCartFilePath(path);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(path, modelManager.getCartFilePath());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasCookbookRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCookbookRecipe(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasCookbookRecipe_recipeNotInCookbook_returnsFalse() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(modelManager.hasCookbookRecipe(CARBONARA));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasCookbookRecipe_recipeInCookbook_returnsTrue() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(modelManager.hasCookbookRecipe(CARBONARA));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void hasInventoryIngredient_nullIngredient_throwsNullIngredientException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasInventoryIngredient(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void hasInventoryIngredient_ingredientNotInCart_returnsFalse() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(modelManager.hasInventoryIngredient(APPLE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void hasInventoryIngredient_ingredientInCart_returnsTrue() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager.addInventoryIngredient(APPLE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(modelManager.hasInventoryIngredient(APPLE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void hasCartIngredient_nullIngredient_throwsNullIngredientException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCartIngredient(null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void hasCartIngredient_ingredientNotInCart_returnsFalse() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(modelManager.hasCartIngredient(APPLE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void hasCartIngredient_ingredientInCart_returnsTrue() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager.addCartIngredient(APPLE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(modelManager.hasCartIngredient(APPLE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void hasClearedCart_ingredientNotInCart_returnsTrue() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager.addCartIngredient(APPLE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager.addCartIngredient(ALMOND);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager.setCart(modelManager.getCart());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(!modelManager.hasCartIngredient(APPLE) \u0026\u0026 !modelManager.hasCartIngredient(ALMOND));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void sortCookbook() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager.setCookbook(getTypicalCookbook());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager.sortCookbook(new RecipeInventoryIngredientsSimilarityComparator(getTypicalInventory()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(SCRAMBLED_EGG, modelManager.getCookbook().getRecipeList().get(0));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(CARBONARA, modelManager.getCookbook().getRecipeList().get(1));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(SPAGHETTI_BOLOGNESE, modelManager.getCookbook().getRecipeList().get(2));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(AGLIO_OLIO, modelManager.getCookbook().getRecipeList().get(3));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getFilteredCookbookRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .getFilteredCookbookRecipeList().remove(0));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager \u003d new ModelManager(new Cookbook(), new Inventory(), new Cart(), userPrefs);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(new Cookbook(), new Inventory(), new Cart(),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                userPrefs);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        differentUserPrefs.setCookbookFilePath(Paths.get(\"differentCookbookFilePath\"));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        differentUserPrefs.setInventoryFilePath(Paths.get(\"differentInventoryFilePath\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        differentUserPrefs.setCartFilePath(Paths.get(\"differentCartFilePath\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(new Cookbook(), new Inventory(), new Cart(),"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                differentUserPrefs)));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 59,
      "teo-jun-xiong": 10,
      "-": 91,
      "tzihiang": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCookbookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setInventoryFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCartFilePath(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 13,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/CompatibleIngredientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CompatibleIngredientListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final CompatibleIngredientList compatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(compatibleIngredientList.contains(APPLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientInList_returnsTrue() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(compatibleIngredientList.contains(APPLE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientWithSameNameAndUnitInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(compatibleIngredientList.contains(editedApple));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientWithSameNameAndDifferentUnitInList_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(compatibleIngredientList.contains(editedApple));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e compatibleIngredientList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_existingIngredientWithSameUnit_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedCompatibleIngredientList.add(APPLE.add(APPLE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_existingIngredientWithDifferentUnit_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(editedApple);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(compatibleIngredientList.contains(editedApple));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientIsSameIngredient_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.setIngredient(APPLE, APPLE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedCompatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.setIngredient(APPLE, editedApple);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedCompatibleIngredientList.add(editedApple);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.setIngredient(APPLE, BANANA);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedCompatibleIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientHasNonUniqueIdentity_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.setIngredient(APPLE, BANANA);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedCompatibleIngredientList.add(BANANA.add(BANANA));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e compatibleIngredientList.remove((Ingredient) null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_ingredientDoesNotExist_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IngredientNotFoundException.class, () -\u003e compatibleIngredientList.remove(APPLE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_existingIngredient_removesIngredient() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.remove(APPLE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_nullIngredientName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e compatibleIngredientList.remove((IngredientName) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_ingredientNameDoesNotExist_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IngredientNotFoundException.class, () -\u003e compatibleIngredientList.remove(APPLE.getName()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_existingIngredientName_removesIngredient() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(editedApple);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.remove(APPLE.getName());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_compatibleIngredientList_replacesOwnListWithProvidedCompatibleIngredientList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedCompatibleIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.setIngredients(expectedCompatibleIngredientList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                compatibleIngredientList.setIngredients((List\u003cIngredient\u003e) null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cIngredient\u003e ingredientList \u003d Collections.singletonList(BANANA);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.setIngredients(ingredientList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedCompatibleIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new IngredientName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor_invalidIngredientName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String invalidIngredientName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new IngredientName(invalidIngredientName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isValidIngredientName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null ingredient name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e IngredientName.isValidIngredientName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // invalid ingredient name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"r!ce\")); // contains invalid symbol"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid ingredient name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"eggs\")); // lower case alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"EGGS\")); // lower case alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"100 calorie yogurt\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Full Cream Milk\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Full Cream Milk \")); // with trailing whitespace"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Hershey\u0027s Kisses\")); // with apostrophe"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Self-raising flour\")); // with dash"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"70% dark chocolate\")); // with numbers and percent sign"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Organic whole milk Greek yogurt\")); // long ingredient names"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toString_validIngredient_returnsStringRepresentation() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"eggs\", new IngredientName(\"eggs\").toString()); // lower case alphabets only"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"EGGS\", new IngredientName(\"EGGS\").toString()); // upper case alphabets only"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"12345\", new IngredientName(\"12345\").toString()); // numbers only"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"100 calorie yogurt\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new IngredientName(\"100 calorie yogurt\").toString()); // alphanumeric characters"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Full Cream Milk\", new IngredientName(\"Full Cream Milk\").toString()); // with capital letter"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Full Cream Milk\", new IngredientName(\"Full Cream Milk \").toString()); // with trailing whitespace"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Hershey\u0027s Kisses\", new IngredientName(\"Hershey\u0027s Kisses\").toString()); // with apostrophe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Self-raising flour\", new IngredientName(\"Self-raising flour\").toString()); // with dash"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"70% dark chocolate\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new IngredientName(\"70% dark chocolate\").toString()); // with numbers and percent sign"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Organic whole milk Greek yogurt\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new IngredientName(\"Organic whole milk Greek yogurt\").toString()); // long ingredient names"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientName testIngredientName \u003d new IngredientName(\"Eggs\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientName.equals(new IngredientName(\"Eggs\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientName.equals(testIngredientName));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name with different case -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientName.equals(new IngredientName(\"eggs\")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name with trailing whitespace -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientName.equals(new IngredientName(\"Eggs \")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientName.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient name -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientName.equals(new IngredientName(\"Milk\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 84,
      "shanecsj": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientQuantityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.NonPositiveIngredientQuantityException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientQuantityTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new IngredientQuantity(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor_invalidIngredientQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String invalidIngredientQuantity \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new IngredientQuantity(invalidIngredientQuantity));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isValidIngredientQuantity() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null ingredient quantity"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e IngredientQuantity.isValidIngredientQuantity(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // invalid ingredient quantity"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"dozen\")); // starts with alphabets"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"1.\")); // whole number with decimal point"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"1 / 2 cups\")); // spaces in fraction"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"1 piece1\")); // number in unit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"01 g\")); // leading zero"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"0 g\")); // zero whole number"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"0.0 g\")); // zero decimal"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\".0 g\")); // zero value"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"0/1 g\")); // zero numerator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"1/0 g\")); // zero denominator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"0 1/2 g\")); // zero whole part"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"-1.2 g\")); // negative decimal"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"-1/2 g\")); // negative fraction"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid ingredient quantity"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"12345\")); // whole number"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"0.5\")); // decimal number"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"1/2\")); // pure fraction"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"1 1/2\")); // mixed fraction"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"100 ml\")); // whole number and unit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"100ml\")); // no space between value and unit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"2.5 cups\")); // decimal number and unit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\".5 cups\")); // starts with decimal point"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"1/2 cups\")); // pure fractions and unit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"2 1/2 cups\")); // mixed fractions and unit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"1 Tablespoon\")); // with capital letters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"1 rounded tsp\")); // unit with spaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasSameUnitAs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity a \u003d new IngredientQuantity(\"1 cup\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity b \u003d new IngredientQuantity(\"0.25 cup\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity c \u003d new IngredientQuantity(\"1/2 cup\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity d \u003d new IngredientQuantity(\"100 ml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(a.hasSameUnitAs(a));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(a.hasSameUnitAs(b));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(a.hasSameUnitAs(c));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(b.hasSameUnitAs(a));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(b.hasSameUnitAs(b));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(b.hasSameUnitAs(c));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(c.hasSameUnitAs(a));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(c.hasSameUnitAs(b));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(c.hasSameUnitAs(c));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(d.hasSameUnitAs(d));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(a.hasSameUnitAs(d));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(b.hasSameUnitAs(d));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(c.hasSameUnitAs(d));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(d.hasSameUnitAs(a));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(d.hasSameUnitAs(b));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(d.hasSameUnitAs(c));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity a \u003d new IngredientQuantity(\"1 cup\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity b \u003d new IngredientQuantity(\"0.25 cup\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity c \u003d new IngredientQuantity(\"1.2cup\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity d \u003d new IngredientQuantity(\"3/4 cup\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity e \u003d new IngredientQuantity(\"2 1/2 cup\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity f \u003d new IngredientQuantity(\"100 ml\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e a.add(f));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e b.add(f));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e c.add(f));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e d.add(f));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e e.add(f));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.add(a));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.add(b));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.add(c));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.add(d));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.add(e));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.25 cup\", a.add(b).toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.2 cup\", a.add(c).toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 3/4 cup\", a.add(d).toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3 1/2 cup\", a.add(e).toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.25 cup\", b.add(a).toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.45 cup\", b.add(c).toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 cup\", b.add(d).toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 3/4 cup\", b.add(e).toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.2 cup\", c.add(a).toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.45 cup\", c.add(b).toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.95 cup\", c.add(d).toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3.7 cup\", c.add(e).toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 3/4 cup\", d.add(a).toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 cup\", d.add(b).toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.95 cup\", d.add(c).toString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3 1/4 cup\", d.add(e).toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3 1/2 cup\", e.add(a).toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 3/4 cup\", e.add(b).toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3.7 cup\", e.add(c).toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3 1/4 cup\", e.add(d).toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void subtract() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity a \u003d new IngredientQuantity(\"1 cup\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity b \u003d new IngredientQuantity(\"0.25 cup\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity c \u003d new IngredientQuantity(\"1.2cup\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity d \u003d new IngredientQuantity(\"3/4 cup\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity e \u003d new IngredientQuantity(\"2 1/2 cup\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity f \u003d new IngredientQuantity(\"100 ml\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e a.subtract(f));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e b.subtract(f));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e c.subtract(f));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e d.subtract(f));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e e.subtract(f));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.subtract(a));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.subtract(b));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.subtract(c));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.subtract(d));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.subtract(e));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.75 cup\", a.subtract(b).toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e a.subtract(c).toString());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/4 cup\", a.subtract(d).toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e a.subtract(e).toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e b.subtract(a).toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e b.subtract(c).toString());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e b.subtract(d).toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e b.subtract(e).toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.2 cup\", c.subtract(a).toString());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.95 cup\", c.subtract(b).toString());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.45 cup\", c.subtract(d).toString());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e c.subtract(e).toString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e d.subtract(a).toString());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/2 cup\", d.subtract(b).toString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e d.subtract(c).toString());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e d.subtract(e).toString());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 1/2 cup\", e.subtract(a).toString());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 1/4 cup\", e.subtract(b).toString());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.3 cup\", e.subtract(c).toString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 3/4 cup\", e.subtract(d).toString());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void asProportionOf() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity a \u003d new IngredientQuantity(\"1 cup\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity b \u003d new IngredientQuantity(\"0.25 cup\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity c \u003d new IngredientQuantity(\"1.2cup\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity d \u003d new IngredientQuantity(\"3/4 cup\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity e \u003d new IngredientQuantity(\"2 1/2 cup\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity f \u003d new IngredientQuantity(\"100 ml\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e a.asProportionOf(f));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e b.asProportionOf(f));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e c.asProportionOf(f));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e d.asProportionOf(f));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e e.asProportionOf(f));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.asProportionOf(a));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.asProportionOf(b));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.asProportionOf(c));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.asProportionOf(d));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.asProportionOf(e));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, a.asProportionOf(b));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1 / 1.2, a.asProportionOf(c));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, a.asProportionOf(d));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0.4, a.asProportionOf(e));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0.25, b.asProportionOf(a));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0.25 / 1.2, b.asProportionOf(c));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1.0 / 3, b.asProportionOf(d));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0.1, b.asProportionOf(e));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, c.asProportionOf(a));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, c.asProportionOf(b));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, c.asProportionOf(d));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0.48, c.asProportionOf(e));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0.75, d.asProportionOf(a));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, d.asProportionOf(b));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0.75 / 1.2, d.asProportionOf(c));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0.3, d.asProportionOf(e));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, e.asProportionOf(a));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, e.asProportionOf(b));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, e.asProportionOf(c));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, e.asProportionOf(d));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseValue() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid ingredient quantity"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"12345\", IngredientQuantity.parseValue(\"12345\").toString()); // whole number"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.5\", IngredientQuantity.parseValue(\"0.5\").toString()); // decimal number"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/2\", IngredientQuantity.parseValue(\"1/2\").toString()); // pure fraction"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 1/2\", IngredientQuantity.parseValue(\"1 1/2\").toString()); // mixed fraction"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"100\", IngredientQuantity.parseValue(\"100 ml\").toString()); // whole number and unit"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"100\", IngredientQuantity.parseValue(\"100ml\").toString()); // no space between value and unit"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.5\", IngredientQuantity.parseValue(\"2.5 cups\").toString()); // decimal number and unit"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.5\", IngredientQuantity.parseValue(\".5 cups\").toString()); // starts with decimal point"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/2\", IngredientQuantity.parseValue(\"1/2 cups\").toString()); // pure fractions and unit"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.3\", IngredientQuantity.parseValue(\"2 3/10 cups\").toString()); // denominator larger than 6"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1\", IngredientQuantity.parseValue(\"1 Tablespoon\").toString()); // with capital letters"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1\", IngredientQuantity.parseValue(\"1 rounded tsp\").toString()); // unit with spaces;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseUnit() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid ingredient quantity"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"\", IngredientQuantity.parseUnit(\"12345\")); // whole number"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"\", IngredientQuantity.parseUnit(\"0.5\")); // decimal number"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"\", IngredientQuantity.parseUnit(\"1/2\")); // pure fraction"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"\", IngredientQuantity.parseUnit(\"1 1/2\")); // mixed fraction"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"ml\", IngredientQuantity.parseUnit(\"100 ml\")); // whole number and unit"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"ml\", IngredientQuantity.parseUnit(\"100ml\")); // no space between value and unit"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"cups\", IngredientQuantity.parseUnit(\"2.5 cups\")); // decimal number and unit"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"cups\", IngredientQuantity.parseUnit(\".5 cups\")); // starts with decimal point"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"cups\", IngredientQuantity.parseUnit(\"1/2 cups\")); // pure fractions and unit"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"cups\", IngredientQuantity.parseUnit(\"2 3/5 cups\")); // mixed fractions and unit"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Tablespoon\", IngredientQuantity.parseUnit(\"1 Tablespoon\")); // with capital letters"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"rounded tsp\", IngredientQuantity.parseUnit(\"1 rounded tsp \")); // unit with spaces;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toString_validIngredientQuantity_returnsStringRepresentation() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid ingredient quantity"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"12345\", new IngredientQuantity(\"12345\").toString()); // whole number"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.5\", new IngredientQuantity(\"0.5\").toString()); // decimal number"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/2\", new IngredientQuantity(\"1/2\").toString()); // pure fraction"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 1/2\", new IngredientQuantity(\"1 1/2\").toString()); // mixed fraction"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"100 ml\", new IngredientQuantity(\"100 ml\").toString()); // whole number and unit"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"100 ml\", new IngredientQuantity(\"100ml\").toString()); // no space between value and unit"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.5 cups\", new IngredientQuantity(\"2.5 cups\").toString()); // decimal number and unit"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.5 cups\", new IngredientQuantity(\".5 cups\").toString()); // starts with decimal point"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/2 cups\", new IngredientQuantity(\"1/2 cups\").toString()); // pure fractions and unit"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.3 cups\", new IngredientQuantity(\"2 3/10 cups\").toString()); // mixed fractions and unit"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 Tablespoon\", new IngredientQuantity(\"1 Tablespoon\").toString()); // with capital letters"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 rounded tsp\", new IngredientQuantity(\"1 rounded tsp \").toString()); // unit with spaces;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity testIngredientQuantity \u003d new IngredientQuantity(\"100 ml\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same quantity -\u003e returns true"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientQuantity.equals(new IngredientQuantity(\"100 ml\")));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientQuantity.equals(testIngredientQuantity));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same quantity with no whitespace between value and unit -\u003e returns true"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientQuantity.equals(new IngredientQuantity(\"100ml\")));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same quantity with trailing whitespace -\u003e returns true"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientQuantity.equals(new IngredientQuantity(\"100 ml \")));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientQuantity.equals(null));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient quantity -\u003e returns false"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientQuantity.equals(new IngredientQuantity(\"200 g\")));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient quantity value -\u003e returns false"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientQuantity.equals(new IngredientQuantity(\"200 ml\")));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient quantity unit -\u003e returns false"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientQuantity.equals(new IngredientQuantity(\"100 g\")));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient quantity unit -\u003e returns false"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientQuantity.equals(new IngredientQuantity(\"100\")));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 307
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IncompatibleIngredientException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.NonPositiveIngredientQuantityException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_compatibleIngredient_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient expectedIngredient \u003d new IngredientBuilder(APPLE)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .withQuantity(APPLE.getQuantity().add(editedApple.getQuantity()).toString()).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedIngredient, APPLE.add(editedApple));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_ingredientWithDifferentUnit_throwsIncompatibleIngredientException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IncompatibleIngredientException.class, () -\u003e APPLE.add(editedApple));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_differentIngredient_throwsIncompatibleIngredientException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IncompatibleIngredientException.class, () -\u003e APPLE.add(BANANA));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void subtract_compatibleIngredient_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient expectedIngredient \u003d new IngredientBuilder(APPLE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .withQuantity(APPLE.getQuantity().subtract(editedApple.getQuantity()).toString()).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedIngredient, APPLE.subtract(editedApple));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void subtract_equalIngredientQuantity_throwsNonPositiveIngredientQuantityException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e APPLE.subtract(APPLE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void subtract_largerIngredientQuantity_throwsNonPositiveIngredientQuantityException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e editedApple.subtract(APPLE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void subtract_ingredientWithDifferentUnit_throwsIncompatibleIngredientException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IncompatibleIngredientException.class, () -\u003e APPLE.subtract(editedApple));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void subtract_differentIngredient_throwsIncompatibleIngredientException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IncompatibleIngredientException.class, () -\u003e APPLE.subtract(BANANA));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void asProportionOf_compatibleIngredient_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(APPLE.getQuantity().asProportionOf(BANANA.getQuantity()), APPLE.asProportionOf(editedApple));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void asProportionOf_ingredientWithDifferentUnit_throwsIncompatibleIngredientException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IncompatibleIngredientException.class, () -\u003e APPLE.asProportionOf(editedApple));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void asProportionOf_differentIngredient_throwsIncompatibleIngredientException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IncompatibleIngredientException.class, () -\u003e APPLE.asProportionOf(BANANA));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isCompatibleWith() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.isCompatibleWith(APPLE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.isCompatibleWith(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withName(VALID_INGREDIENT_NAME_BANANA).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.isCompatibleWith(editedApple));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name, different quantity value -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.isCompatibleWith(editedApple));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name, different quantity unit -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.isCompatibleWith(editedApple));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isSameIngredient() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.isSameIngredient(APPLE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.isSameIngredient(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withName(VALID_INGREDIENT_NAME_BANANA).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.isSameIngredient(editedApple));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name, different quantity value -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.isSameIngredient(editedApple));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name, different quantity unit -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.isSameIngredient(editedApple));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient appleCopy \u003d new IngredientBuilder(APPLE).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.equals(appleCopy));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.equals(APPLE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.equals(null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.equals(5));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.equals(BANANA));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withName(VALID_INGREDIENT_NAME_BANANA).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name, different quantity value -\u003e returns false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name, different quantity unit -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/UniqueIngredientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.CHICKEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IncompatibleIngredientException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class UniqueIngredientListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private final UniqueIngredientList uniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void size() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0, uniqueIngredientList.size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, uniqueIngredientList.size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.remove(APPLE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0, uniqueIngredientList.size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.contains(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(uniqueIngredientList.contains(APPLE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientInList_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(uniqueIngredientList.contains(APPLE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientWithSameNameAndSameUnitInList_returnsTrue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(uniqueIngredientList.contains(editedApple));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientWithSameNameAndDifferentUnitInList_returnsTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(uniqueIngredientList.contains(editedApple));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.add(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_existingIngredientWithSameUnit_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(APPLE.add(APPLE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_existingIngredientWithDifferentUnit_throwsIncompatibleIngredientException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IncompatibleIngredientException.class, () -\u003e uniqueIngredientList.add(editedApple));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_nullTargetIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredient(null, APPLE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_nullEditedIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredient(APPLE, null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_targetIngredientNotInList_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IngredientNotFoundException.class, () -\u003e uniqueIngredientList.setIngredient(APPLE, APPLE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientIsSameIngredient_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredient(APPLE, APPLE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredient(APPLE, editedApple);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(editedApple);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredient(APPLE, BANANA);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientHasNonUniqueIdentity_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredient(APPLE, BANANA);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(BANANA.add(BANANA));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.remove((Ingredient) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_ingredientDoesNotExist_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IngredientNotFoundException.class, () -\u003e uniqueIngredientList.remove(APPLE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_existingIngredient_removesIngredient() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.remove(APPLE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_nullIngredientName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.remove((IngredientName) null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_ingredientNameDoesNotExist_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IngredientNotFoundException.class, () -\u003e uniqueIngredientList.remove(APPLE.getName()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_existingIngredientName_removesIngredient() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.remove(APPLE.getName());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_nullUniqueIngredientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                uniqueIngredientList.setIngredients((UniqueIngredientList) null));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_uniqueIngredientList_replacesOwnListWithProvidedUniqueIngredientList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredients(expectedUniqueIngredientList);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredients((List\u003cIngredient\u003e) null));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cIngredient\u003e ingredientList \u003d Collections.singletonList(BANANA);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredients(ingredientList);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_listWithDuplicateCompatibleIngredients_clearsOwnListAndAddsIngredientsInProvidedList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cIngredient\u003e listWithDuplicateIngredients \u003d Arrays.asList(APPLE, APPLE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredients(listWithDuplicateIngredients);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(APPLE.add(APPLE));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_listWithDuplicateIncompatibleIngredients_throwsIncompatibleIngredientException() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cIngredient\u003e listWithDuplicateIngredients \u003d Arrays.asList(APPLE, editedApple);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IncompatibleIngredientException.class, () -\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                uniqueIngredientList.setIngredients(listWithDuplicateIngredients));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            -\u003e uniqueIngredientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void sort_success() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueIngredientList.add(CHICKEN);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.sort(new IngredientDefaultComparator());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueIngredientList editedList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editedList.add(APPLE);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editedList.add(BANANA);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editedList.add(CHICKEN);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(uniqueIngredientList, editedList);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 212,
      "hans555": 12,
      "tzihiang": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeContainsInventoryIngredientsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getValidRecipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeContainsInventoryIngredientsPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            new IngredientQuantity(\"1\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Recipe VALID_RECIPE \u003d getValidRecipe();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void test_inventoryContainsAllRecipeIngredients_returnsTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.setIngredients(VALID_RECIPE.getIngredients());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(VALID_RECIPE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.setInventory(inventory);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        RecipeContainsInventoryIngredientsPredicate c \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            new RecipeContainsInventoryIngredientsPredicate(model.getInventory());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(c.test(VALID_RECIPE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void test_inventoryContainsSomeRecipeIngredients_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.addIngredient(VALID_INGREDIENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.addCookbookRecipe(VALID_RECIPE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.setInventory(inventory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        RecipeContainsInventoryIngredientsPredicate c \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            new RecipeContainsInventoryIngredientsPredicate(model.getInventory());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(c.test(VALID_RECIPE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void test_inventoryDoesNotContainRecipeIngredients_returnsFalse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.addCookbookRecipe(VALID_RECIPE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.setInventory(new Inventory());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeContainsInventoryIngredientsPredicate c \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeContainsInventoryIngredientsPredicate(model.getInventory());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(c.test(VALID_RECIPE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(VALID_RECIPE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addInventoryIngredient(VALID_INGREDIENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeContainsInventoryIngredientsPredicate c \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeContainsInventoryIngredientsPredicate(model.getInventory());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeContainsInventoryIngredientsPredicate(model.getInventory()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 37,
      "teo-jun-xiong": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeContainsTagsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getValidRecipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeContainsTagsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final List\u003cString\u003e VALID_TAGS \u003d Arrays.asList(\"tag\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Recipe VALID_RECIPE \u003d getValidRecipe();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeContainsTagsPredicate c \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeContainsTagsPredicate(VALID_TAGS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeContainsTagsPredicate(VALID_TAGS));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void test_validInput() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(VALID_RECIPE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeContainsTagsPredicate c \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeContainsTagsPredicate(VALID_TAGS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(c.test(VALID_RECIPE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(VALID_RECIPE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeContainsTagsPredicate c \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeContainsTagsPredicate(VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeContainsTagsPredicate(VALID_TAGS));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeDescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeDescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeDescription(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String invalidRecipeDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new RecipeDescription(invalidRecipeDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void isValidRecipeDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e RecipeDescription.isValidRecipeDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(RecipeDescription.isValidRecipeDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(RecipeDescription.isValidRecipeDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"eggs scrambled with pepper\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"11223344\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"1st in the world\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"Succulent Pork Belly\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"A-grade\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"Roasted cod with crushed potatoes, artichoke, \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                + \"salted capers, red wine and lemon sauce\")); // long descriptions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeNameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        list.add(\"Carbonara\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeNameContainsKeywordsPredicate c \u003d new RecipeNameContainsKeywordsPredicate(list);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeNameContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void test_validInput() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        list.add(\"Carbonara\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeNameContainsKeywordsPredicate c \u003d new RecipeNameContainsKeywordsPredicate(list);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(c.test(CARBONARA));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeNameContainsKeywordsPredicate d \u003d new RecipeNameContainsKeywordsPredicate(list);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(c.test(AGLIO_OLIO));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeNameContainsKeywordsPredicate(list),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeNameContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        list.add(\"Carbonara\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeNameContainsKeywordsPredicate(list),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeNameContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ArrayList\u003cString\u003e otherList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(new RecipeNameContainsKeywordsPredicate(list),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeNameContainsKeywordsPredicate(otherList));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 2,
      "teo-jun-xiong": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String invalidRecipeName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new RecipeName(invalidRecipeName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void isValidRecipeName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e RecipeName.isValidRecipeName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(RecipeName.isValidRecipeName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(RecipeName.isValidRecipeName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"bacon carbonara\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"0123210\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"number 1 cake\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"Beef Wellington\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"Shepherd\u0027s Pie\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"Slow-roasted Cumbrian saddleback pork belly\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final RecipeName VALID_RECIPE_NAME \u003d new RecipeName(\"Recipe\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final RecipeDescription VALID_RECIPE_DESCRIPTION \u003d new RecipeDescription(\"Description\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final UniqueIngredientList VALID_INGREDIENTS \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final UniqueStepList VALID_STEPS \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Set\u003cTag\u003e VALID_TAGS \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipe \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipe, new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipeOverloaded, new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(null, VALID_RECIPE_DESCRIPTION));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(VALID_RECIPE_NAME, null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(null, null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(null, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(VALID_RECIPE_NAME, null, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, null,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_INGREDIENTS, null, VALID_TAGS));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_INGREDIENTS, VALID_STEPS, null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(null, null, null,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                null, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void getName_validInput() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipeOverloaded.getName(), VALID_RECIPE_NAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void getDescription_validInput() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipeOverloaded.getDescription(), VALID_RECIPE_DESCRIPTION);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void getIngredients_validInput() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(recipeOverloaded.getIngredients(), VALID_INGREDIENTS.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void getSteps_validInput() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipeOverloaded.getSteps(), VALID_STEPS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void getTags_validInput() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipeOverloaded.getTags(), VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void isSameRecipe_validInput() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipe \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(recipe.isSameRecipe(recipe));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(recipeOverloaded.isSameRecipe(recipeOverloaded));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(recipe.isSameRecipe(recipeOverloaded));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipe \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipe, recipe);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipeOverloaded, recipeOverloaded);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipe, recipeOverloaded);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(recipe, null);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        tags.add(new Tag(\"Easy\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, tags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(recipe, recipeOverloaded);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "shanecsj": 2,
      "teo-jun-xiong": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/UniqueRecipeListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class UniqueRecipeListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final UniqueRecipeList uniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void containsNullRecipeThrowsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.contains(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void contains_recipeNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(uniqueRecipeList.contains(CARBONARA));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void contains_recipeInList_returnsTrue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        uniqueRecipeList.add(CARBONARA);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(uniqueRecipeList.contains(CARBONARA));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void add_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.add(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void add_duplicateRecipe_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        uniqueRecipeList.add(CARBONARA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.add(CARBONARA));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipe_nullTargetRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipe(null, CARBONARA));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipe_nullEditedRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipe(CARBONARA, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipe_targetRecipeNotInList_throwsRecipeNotFoundException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(RecipeNotFoundException.class, () -\u003e uniqueRecipeList.setRecipe(CARBONARA, CARBONARA));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipe_editedRecipeIsSameRecipe_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        uniqueRecipeList.add(CARBONARA);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        uniqueRecipeList.setRecipe(CARBONARA, CARBONARA);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        expectedUniqueRecipeList.add(CARBONARA);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/step/StepTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class StepTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Step(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void constructor_invalidStep_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String invalidStep \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Step(invalidStep));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void isValidStep() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "        // null step"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Step.isValidStep(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "        // invalid step"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertFalse(Step.isValidStep(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertFalse(Step.isValidStep(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        // valid step"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(Step.isValidStep(\"hahahaha\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(Step.isValidStep(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(Step.isValidStep(\"throw 2 eggs in the water\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(Step.isValidStep(\"Sear the meat\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(Step.isValidStep(\"Peel the egg. Then throw the egg in the soup.\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hans555": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/step/UniqueStepListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.exceptions.DuplicateStepException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.exceptions.StepNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class UniqueStepListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Step TESTSTEP \u003d new Step(\"Cook 1 egg.\"); // for the time being only"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Step TESTSTEP2 \u003d new Step(\"Boil 2 egg.\"); // for the time being only"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final UniqueStepList uniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void contains_nullStep_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void contains_stepNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertFalse(uniqueStepList.contains(TESTSTEP));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void contains_stepInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(uniqueStepList.contains(TESTSTEP));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void add_nullStep_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.add(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void add_duplicateStep_throwsDuplicateStepException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(DuplicateStepException.class, () -\u003e uniqueStepList.add(TESTSTEP));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep_nullTargetStep_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.setStep(null, TESTSTEP));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep_nullEditedStep_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.setStep(TESTSTEP, null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep_targetStepNotInList_throwsStepNotFoundException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(StepNotFoundException.class, () -\u003e uniqueStepList.setStep(TESTSTEP, TESTSTEP));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep_editedStepIsSameStep_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.setStep(TESTSTEP, TESTSTEP);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList expectedUniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": "        expectedUniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(expectedUniqueStepList, uniqueStepList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setStep_editedStepHasDifferentDescription_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.setStep(TESTSTEP, TESTSTEP2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList expectedUniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": "        expectedUniqueStepList.add(TESTSTEP2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(expectedUniqueStepList, uniqueStepList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep_editedStepHasNonUniqueDescription_throwsDuplicateStepException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(DuplicateStepException.class, () -\u003e uniqueStepList.setStep(TESTSTEP, TESTSTEP2));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void remove_nullStep_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.remove((Step) null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void remove_stepDoesNotExist_throwsStepNotFoundException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(StepNotFoundException.class, () -\u003e uniqueStepList.remove(TESTSTEP));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void remove_existingStep_removesStep() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.remove(TESTSTEP);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList expectedUniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(expectedUniqueStepList, uniqueStepList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps_nullUniqueStepList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.setSteps((UniqueStepList) null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps_uniqueStepList_replacesOwnListWithProvidedUniqueStepList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList expectedUniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hans555"
        },
        "content": "        expectedUniqueStepList.add(TESTSTEP2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.setSteps(expectedUniqueStepList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(expectedUniqueStepList, uniqueStepList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.setSteps((List\u003cStep\u003e) null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hans555"
        },
        "content": "        List\u003cStep\u003e stepList \u003d Collections.singletonList(TESTSTEP2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.setSteps(stepList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList expectedUniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hans555"
        },
        "content": "        expectedUniqueStepList.add(TESTSTEP2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(expectedUniqueStepList, uniqueStepList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps_listWithDuplicateSteps_throwsDuplicateStepException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hans555"
        },
        "content": "        List\u003cStep\u003e listWithDuplicateSteps \u003d Arrays.asList(TESTSTEP, TESTSTEP);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(DuplicateStepException.class, () -\u003e uniqueStepList.setSteps(listWithDuplicateSteps));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hans555"
        },
        "content": "            -\u003e uniqueStepList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "hans555": 148
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedIngredientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.storage.JsonAdaptedIngredient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BUTTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonAdaptedIngredientTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String INVALID_INGREDIENT_NAME \u003d \"R!ce\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String INVALID_INGREDIENT_QUANTITY \u003d \"one\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String VALID_INGREDIENT_NAME \u003d BUTTER.getName().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String VALID_INGREDIENT_QUANTITY \u003d BUTTER.getQuantity().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_validIngredientDetails_returnsIngredient() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(BUTTER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(BUTTER, ingredient.toModelType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_invalidIngredientName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonAdaptedIngredient(INVALID_INGREDIENT_NAME, VALID_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String expectedMessage \u003d IngredientName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_nullIngredientName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(null, VALID_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, IngredientName.class.getSimpleName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_invalidIngredientQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonAdaptedIngredient(VALID_INGREDIENT_NAME, INVALID_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String expectedMessage \u003d IngredientQuantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_nullIngredientQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(VALID_INGREDIENT_NAME, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, IngredientQuantity.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedRecipeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.storage.JsonAdaptedRecipe.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class JsonAdaptedRecipeTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_INGREDIENT_NAME \u003d \"r!ce\"; // contains invalid symbol"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_INGREDIENT_QUANTITY \u003d \"one\"; // starts with alphabets"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_RECIPE_DESCRIPTION \u003d \" \"; // spaces only"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_RECIPE_NAME \u003d \" \"; // spaces only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_STEP_DESCRIPTION \u003d \" \"; // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\"; // contains symbol"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_INGREDIENT_NAME \u003d APPLE.getName().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_INGREDIENT_QUANTITY \u003d APPLE.getQuantity().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final List\u003cJsonAdaptedIngredient\u003e VALID_INGREDIENTS \u003d CARBONARA.getIngredients().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_RECIPE_NAME \u003d CARBONARA.getName().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_RECIPE_DESCRIPTION \u003d CARBONARA.getDescription().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final List\u003cJsonAdaptedStep\u003e VALID_STEPS \u003d CARBONARA.getSteps()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .map(JsonAdaptedStep::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d CARBONARA.getTags().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_validRecipeDetails_returnsRecipe() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(CARBONARA);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(CARBONARA, recipe.toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_invalidRecipeName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new JsonAdaptedRecipe(INVALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        VALID_INGREDIENTS, VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String expectedMessage \u003d RecipeName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_nullRecipeName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(null, VALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                VALID_INGREDIENTS, VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, RecipeName.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_invalidRecipeDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new JsonAdaptedRecipe(VALID_RECIPE_NAME, INVALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        VALID_INGREDIENTS, VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String expectedMessage \u003d RecipeDescription.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_nullRecipeDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(VALID_RECIPE_NAME, null,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                VALID_INGREDIENTS, VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, RecipeDescription.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_invalidRecipeIngredientName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        List\u003cJsonAdaptedIngredient\u003e invalidIngredients \u003d new ArrayList\u003c\u003e(VALID_INGREDIENTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        invalidIngredients.add(new JsonAdaptedIngredient(INVALID_INGREDIENT_NAME, VALID_INGREDIENT_QUANTITY));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new JsonAdaptedRecipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        invalidIngredients, VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String expectedMessage \u003d IngredientName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_invalidRecipeIngredientQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        List\u003cJsonAdaptedIngredient\u003e invalidIngredients \u003d new ArrayList\u003c\u003e(VALID_INGREDIENTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        invalidIngredients.add(new JsonAdaptedIngredient(VALID_INGREDIENT_NAME, INVALID_INGREDIENT_QUANTITY));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new JsonAdaptedRecipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        invalidIngredients, VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String expectedMessage \u003d IngredientQuantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_invalidRecipeSteps_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        List\u003cJsonAdaptedStep\u003e invalidSteps \u003d new ArrayList\u003c\u003e(VALID_STEPS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        invalidSteps.add(new JsonAdaptedStep(INVALID_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new JsonAdaptedRecipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        VALID_INGREDIENTS, invalidSteps, VALID_TAGS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String expectedMessage \u003d Step.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new JsonAdaptedRecipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        VALID_INGREDIENTS, VALID_STEPS, invalidTags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, recipe::toModelType);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "shanecsj": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedStepTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.storage.JsonAdaptedStep.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalSteps.CARBONARA_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class JsonAdaptedStepTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_STEP_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_STEP_DESCRIPTION \u003d CARBONARA_ONE.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void toModelType_validStepDescription_returnsStep() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        JsonAdaptedStep step \u003d new JsonAdaptedStep(VALID_STEP_DESCRIPTION);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(CARBONARA_ONE, step.toModelType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void toModelType_invalidStepDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        JsonAdaptedStep step \u003d new JsonAdaptedStep(INVALID_STEP_DESCRIPTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        String expectedMessage \u003d Step.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, step::toModelType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void toModelType_nullStepDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        JsonAdaptedStep step \u003d new JsonAdaptedStep((String) null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"step description\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, step::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonCartStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.HAZELNUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ICECREAM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalCart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonCartStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonIngredientListStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readCart_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCart(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCart\u003e readCart(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new JsonCartStorage(Paths.get(filePath)).readCart(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(readCart(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCart(\"notJsonFormatIngredientList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readCart_invalidIngredientCart_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCart(\"invalidIngredientList.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readCart_invalidAndValidIngredientCart_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCart(\"invalidAndValidIngredientList.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readAndSaveCart_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempCart.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart original \u003d getTypicalCart();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCartStorage jsonCartStorage \u003d new JsonCartStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonCartStorage.saveCart(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyCart readBack \u003d jsonCartStorage.readCart(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Cart(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.addIngredient(HAZELNUT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.removeIngredient(APPLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonCartStorage.saveCart(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        readBack \u003d jsonCartStorage.readCart(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Cart(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.addIngredient(ICECREAM);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonCartStorage.saveCart(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        readBack \u003d jsonCartStorage.readCart().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Cart(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart_nullCart_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCart(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Saves {@code cart} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void saveCart(ReadOnlyCart cart, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            new JsonCartStorage(Paths.get(filePath)).saveCart(cart, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCart(new Cart(), null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonCookbookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalCookbook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class JsonCookbookStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonCookbookStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void readCookbook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCookbook(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCookbook\u003e readCookbook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new JsonCookbookStorage(Paths.get(filePath)).readCookbook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(readCookbook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCookbook(\"notJsonFormatCookbook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void readCookbook_invalidRecipeCookbook_throwDataConversionException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCookbook(\"invalidRecipeCookbook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void readCookbook_invalidAndValidRecipeCookbook_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCookbook(\"invalidAndValidRecipeCookbook.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void readAndSaveCookbook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempCookbook.json\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Cookbook original \u003d getTypicalCookbook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonCookbookStorage jsonCookbookStorage \u003d new JsonCookbookStorage(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        jsonCookbookStorage.saveCookbook(original, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        ReadOnlyCookbook readBack \u003d jsonCookbookStorage.readCookbook(filePath).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(original, new Cookbook(readBack));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        original.removeRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        jsonCookbookStorage.saveCookbook(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        readBack \u003d jsonCookbookStorage.readCookbook(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(original, new Cookbook(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        jsonCookbookStorage.saveCookbook(original); // file path not specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        readBack \u003d jsonCookbookStorage.readCookbook().get(); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(original, new Cookbook(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void saveCookbook_nullCookbook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCookbook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Saves {@code cookbook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private void saveCookbook(ReadOnlyCookbook cookbook, String filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            new JsonCookbookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    .saveCookbook(cookbook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void saveCookbook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCookbook(new Cookbook(), null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonInventoryStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.HAZELNUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ICECREAM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonInventoryStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonIngredientListStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readInventory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readInventory(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyInventory\u003e readInventory(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new JsonInventoryStorage(Paths.get(filePath)).readInventory(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(readInventory(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventory(\"notJsonFormatIngredientList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readInventory_invalidIngredientInventory_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventory(\"invalidIngredientList.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readInventory_invalidAndValidIngredientInventory_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventory(\"invalidAndValidIngredientList.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readAndSaveInventory_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempInventory.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory original \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonInventoryStorage jsonInventoryStorage \u003d new JsonInventoryStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonInventoryStorage.saveInventory(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyInventory readBack \u003d jsonInventoryStorage.readInventory(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.addIngredient(HAZELNUT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.removeIngredient(APPLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonInventoryStorage.saveInventory(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        readBack \u003d jsonInventoryStorage.readInventory(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.addIngredient(ICECREAM);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonInventoryStorage.saveInventory(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        readBack \u003d jsonInventoryStorage.readInventory().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory_nullInventory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveInventory(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Saves {@code inventory} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void saveInventory(ReadOnlyInventory inventory, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            new JsonInventoryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .saveInventory(inventory, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveInventory(new Inventory(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableCartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.TypicalIngredients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonSerializableCartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonSerializableIngredientListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TYPICAL_INGREDIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalIngredients.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path INVALID_INGREDIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidIngredient.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path DUPLICATE_INGREDIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateIngredients.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_typicalIngredientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableCart dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_INGREDIENTS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableCart.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart cartFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart typicalIngredientsCart \u003d TypicalIngredients.getTypicalCart();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(cartFromFile, typicalIngredientsCart);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_invalidIngredientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableCart dataFromFile \u003d JsonUtil.readJsonFile(INVALID_INGREDIENT_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableCart.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_duplicateIngredients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableCart dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_INGREDIENTS_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableCart.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableCart.MESSAGE_DUPLICATE_INGREDIENT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableCookbookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "//import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "//import seedu.address.testutil.TypicalRecipes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class JsonSerializableCookbookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonSerializableCookbookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //private static final Path TYPICAL_RECIPES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalRecipes.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Path INVALID_RECIPE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidRecipe.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Path DUPLICATE_RECIPES_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateRecipes.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //public void toModelType_typicalRecipesFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //    JsonSerializableCookbook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_RECIPES_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //            JsonSerializableCookbook.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //    Cookbook cookbookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //    Cookbook typicalRecipesCookbook \u003d TypicalRecipes.getTypicalCookbook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //    assertEquals(cookbookFromFile, typicalRecipesCookbook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_invalidRecipeFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonSerializableCookbook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_RECIPE_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                JsonSerializableCookbook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_duplicateRecipes_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonSerializableCookbook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_RECIPES_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                JsonSerializableCookbook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableCookbook.MESSAGE_DUPLICATE_RECIPE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableInventoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.TypicalIngredients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonSerializableInventoryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonSerializableIngredientListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TYPICAL_INGREDIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalIngredients.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path INVALID_INGREDIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidIngredient.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path DUPLICATE_INGREDIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateIngredients.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_typicalIngredientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_INGREDIENTS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory inventoryFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory typicalIngredientsInventory \u003d TypicalIngredients.getTypicalInventory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(inventoryFromFile, typicalIngredientsInventory);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_invalidIngredientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(INVALID_INGREDIENT_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_duplicateIngredients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_INGREDIENTS_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableInventory.MESSAGE_DUPLICATE_INGREDIENT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalCart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalInventory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalCookbook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCookbookStorage cookbookStorage \u003d new JsonCookbookStorage(getTempFilePath(\"cookbook\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d new JsonInventoryStorage(getTempFilePath(\"inventory\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCartStorage cartStorage \u003d new JsonCartStorage(getTempFilePath(\"cart\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storageManager \u003d new StorageManager(cookbookStorage, inventoryStorage, cartStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void cookbookReadSave() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * {@link JsonCookbookStorage} class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonCookbookStorageTest} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cookbook original \u003d getTypicalCookbook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storageManager.saveCookbook(original);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyCookbook retrieved \u003d original; //storageManager.readCookbook().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Cookbook(retrieved));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void inventoryReadSave() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * {@link JsonInventoryStorage} class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonInventoryStorageTest} class."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory original \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storageManager.saveInventory(original);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyInventory retrieved \u003d original; //storageManager.readInventory().get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Inventory(retrieved));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void cartReadSave() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * {@link JsonCartStorage} class."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonCartStorageTest} class."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart original \u003d getTypicalCart();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storageManager.saveCart(original);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyCart retrieved \u003d original; //storageManager.readCart().get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Cart(retrieved));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getCookbookFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertNotNull(storageManager.getCookbookFilePath());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getInventoryFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertNotNull(storageManager.getInventoryFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getCartFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertNotNull(storageManager.getCartFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 58,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/IngredientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A utility class to help with building {@code Ingredient} objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String DEFAULT_INGREDIENT_NAME \u003d \"Apples\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String DEFAULT_INGREDIENT_QUANTITY \u003d \"10\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private IngredientName ingredientName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private IngredientQuantity ingredientQuantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredientName \u003d new IngredientName(DEFAULT_INGREDIENT_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredientQuantity \u003d new IngredientQuantity(DEFAULT_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Initializes the IngredientBuilder with the data of {@code ingredientToCopy}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientBuilder(Ingredient ingredientToCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredientName \u003d ingredientToCopy.getName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredientQuantity \u003d ingredientToCopy.getQuantity();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sets the {@code IngredientName} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientBuilder withName(String ingredientName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientName \u003d new IngredientName(ingredientName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sets the {@code IngredientQuantity} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientBuilder withQuantity(String ingredientQuantity) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientQuantity \u003d new IngredientQuantity(ingredientQuantity);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient build() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Ingredient(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecipeBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * A utility class to help with building Recipe objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String DEFAULT_RECIPE_NAME \u003d \"CARBONARA\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String DEFAULT_RECIPE_DESCRIPTION \u003d \"The best dish sold in NUS.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private RecipeName recipeName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private RecipeDescription recipeDescription;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private UniqueIngredientList ingredients;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private UniqueStepList steps;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeName \u003d new RecipeName(DEFAULT_RECIPE_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeDescription \u003d new RecipeDescription(DEFAULT_RECIPE_DESCRIPTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        steps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Initializes the RecipeBuilder with the data of {@code recipeToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeBuilder(Recipe recipeToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipeName \u003d recipeToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipeDescription \u003d recipeToCopy.getDescription();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients.setIngredients(recipeToCopy.getIngredients());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.steps \u003d recipeToCopy.getSteps();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e(recipeToCopy.getTags());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Sets the {@code recipeName} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @param recipeName"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeBuilder withRecipeName(String recipeName) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.recipeName \u003d new RecipeName(recipeName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Sets the {@code recipeDescription} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @param recipeDescription"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeBuilder withRecipeDescription(String recipeDescription) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.recipeDescription \u003d new RecipeDescription(recipeDescription);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Adds the {@code ingredient} to the ingredient list of the recipe."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @param ingredient"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public RecipeBuilder withIngredients(Ingredient ingredient) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.ingredients.add(ingredient);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Adds the {@code steps} to the steps list of the recipe."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @param step"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public RecipeBuilder withStep(Step step) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.steps.add(step);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public Recipe build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new Recipe(recipeName, recipeDescription, ingredients, steps, tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "teo-jun-xiong": 63,
      "shanecsj": 12,
      "tzihiang": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StepBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * A utility class to help with building {@code Step} objects"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class StepBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String DEFAULT_STEP_NAME \u003d \"Drink some water\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private String stepName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public StepBuilder(String stepName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.stepName \u003d stepName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public StepBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.stepName \u003d DEFAULT_STEP_NAME;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Sets the {@code stepName} to this step\u0027s stepName."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public StepBuilder editStep(String stepName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.stepName \u003d stepName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public Step build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new Step(stepName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static void getMidIndex(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static void getLastIndex(Model model) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 2,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIngredients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_ALMOND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_BANANA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A utility class containing a list of {@code Ingredient} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class TypicalIngredients {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient APPLE \u003d new IngredientBuilder().withName(\"Apples\").withQuantity(\"5\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient BUTTER \u003d new IngredientBuilder().withName(\"Butter\").withQuantity(\"200 g\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient CHICKEN \u003d new IngredientBuilder().withName(\"Chicken\").withQuantity(\"600 g\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient DUCK \u003d new IngredientBuilder().withName(\"Duck\").withQuantity(\"800 g\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient EGG \u003d new IngredientBuilder().withName(\"Eggs\").withQuantity(\"12\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient FLOUR \u003d new IngredientBuilder().withName(\"Flour\").withQuantity(\"500 g\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient GARLIC \u003d new IngredientBuilder().withName(\"Garlic\").withQuantity(\"3 cloves\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient HAZELNUT \u003d new IngredientBuilder().withName(\"Hazelnuts\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient ICECREAM \u003d new IngredientBuilder().withName(\"Ice cream\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    // Manually added - Ingredient\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient ALMOND \u003d new IngredientBuilder().withName(VALID_INGREDIENT_NAME_ALMOND)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient BANANA \u003d new IngredientBuilder().withName(VALID_INGREDIENT_NAME_BANANA)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String KEYWORD_MATCHING_APPLE \u003d \"Apple\"; // A keyword that matches APPLE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private TypicalIngredients() {} // prevents instantiation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an {@code Inventory} with all the typical ingredients."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static Inventory getTypicalInventory() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (Ingredient ingredient : getTypicalIngredients()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            inventory.addIngredient(ingredient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns a {@code Cart} with all the typical Ingredients."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static Cart getTypicalCart() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart cart \u003d new Cart();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (Ingredient ingredient : getTypicalIngredients()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            cart.addIngredient(ingredient);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cart;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static List\u003cIngredient\u003e getTypicalIngredients() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPLE, BUTTER, CHICKEN, DUCK, EGG, FLOUR, GARLIC));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRecipes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * A utility class containing a list of {@code Recipe} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class TypicalRecipes {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static final Recipe[] TYPICAL_RECIPES \u003d SampleDataUtil.getSampleRecipes();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final Recipe SCRAMBLED_EGG \u003d TYPICAL_RECIPES[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final Recipe CARBONARA \u003d TYPICAL_RECIPES[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final Recipe AGLIO_OLIO \u003d TYPICAL_RECIPES[2];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final Recipe SPAGHETTI_BOLOGNESE \u003d TYPICAL_RECIPES[3];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private TypicalRecipes() {} // prevents instantiation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Returns a {@code Recipe} with sample ingredients, steps, and tags."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static Recipe getValidRecipe() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        UniqueIngredientList ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ingredients.add(new Ingredient(new IngredientName(\"Ingredient\"), new IngredientQuantity(\"5\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        UniqueStepList steps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        steps.add(new Step(\"Step\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new Recipe("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeName(\"Recipe\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeDescription(\"Description\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                ingredients,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                steps,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                SampleDataUtil.getTagSet(\"Tag\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns a {@code Cookbook} with all the typical recipes."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static Cookbook getTypicalCookbook() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cookbook cookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (Recipe recipe : getTypicalRecipes()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            cookbook.addRecipe(recipe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cookbook;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static List\u003cRecipe\u003e getTypicalRecipes() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(AGLIO_OLIO, CARBONARA, SCRAMBLED_EGG, SPAGHETTI_BOLOGNESE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 6,
      "teo-jun-xiong": 51,
      "tzihiang": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalSteps.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * A utility class containing a list of {@code Step} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class TypicalSteps {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Step CARBONARA_ONE \u003d new Step(\"Boil the pasta.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Step CARBONARA_TWO \u003d new Step(\"Fry pancetta in oil in a frying pan for a few mins \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"until golden and crisp. Add garlic, fry for 1 min.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Step CARBONARA_THREE \u003d new Step(\"Turn off the heat.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Step CARBONARA_FOUR \u003d new Step(\"Briefly whisk egg and yolks with most of the Parmesan \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"and some seasoning.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private TypicalSteps() {} // prevents instantiation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static List\u003cStep\u003e getTypicalSteps() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CARBONARA_ONE, CARBONARA_TWO, CARBONARA_THREE, CARBONARA_FOUR));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 26
    }
  }
]
