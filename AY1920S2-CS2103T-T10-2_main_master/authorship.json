[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "mainClassName \u003d \u0027cardibuddy.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    archiveName \u003d \u0027cardibuddy.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 153,
      "phaebaez": 1
    }
  },
  {
    "path": "src/main/java/cardibuddy/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 4,
      "-": 61
    }
  },
  {
    "path": "src/main/java/cardibuddy/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " *     Error: JavaFX runtime components are missing,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " *     and are required to run this application"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 23
    }
  },
  {
    "path": "src/main/java/cardibuddy/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.CardiBuddy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.storage.CardiBuddyStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.storage.JsonCardiBuddyStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.ui.Ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.ui.UiManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    protected LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CardiBuddy ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        CardiBuddyStorage cardiBuddyStorage \u003d new JsonCardiBuddyStorage(userPrefs.getCardiBuddyFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        storage \u003d new StorageManager(cardiBuddyStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logicToUiManager \u003d new LogicToUiManager((UiManager) ui);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logic.setLogicToUiManager(logicToUiManager);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s cardibuddy book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The data from the sample cardibuddy book will be used instead if {@code storage}\u0027s cardibuddy book is not found,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * or an empty cardibuddy book will be used instead if errors occur when reading {@code storage}\u0027s cardibuddy book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Optional\u003cReadOnlyCardiBuddy\u003e cardiBuddyOptional;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ReadOnlyCardiBuddy initialData;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            cardiBuddyOptional \u003d storage.readCardiBuddy();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (!cardiBuddyOptional.isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample CardiBuddy\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            initialData \u003d cardiBuddyOptional.orElseGet(SampleDataUtil::getSampleCardiBuddy);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty CardiBuddy\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            initialData \u003d new CardiBuddy();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CardiBuddy\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            initialData \u003d new CardiBuddy();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CardiBuddy\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logger.info(\"Starting CardiBuddy \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Cardi Buddy ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 49,
      "-": 140
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static final String LOG_FILE \u003d \"cardibuddy.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_COMMAND \u003d \"Incomplete command! \\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_DECK_OR_FLASHCARD_PREFIX \u003d \"Include d/ or c/ prefixes to add a deck or card.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_INVALID_DECK \u003d \"A deck should not have a question and/or an answer.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_INVALID_DECK_DISPLAYED_INDEX \u003d \"The deck index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD \u003d \"A flashcard should have a question and an answer.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX \u003d \"The card index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_INVALID_TWO_WORD_COMMAND \u003d \"Remember to add \u0027card\u0027 or \u0027deck\u0027 \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"after your command\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_NOT_IN_DECK \u003d \"This operation can only be done in a deck.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_WRONG_DECK \u003d \"The opened deck is different from the deck that\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \" you have inputted. Please open the correct deck.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_DECKS_LISTED_OVERVIEW \u003d \"%1$d decks listed!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_FLASHCARDS_LISTED_OVERVIEW \u003d \"%1$d cards listed!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_DECK_CANNOT_BE_FLASHCARD \u003d \"Operation would result in the object created \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"being both a deck and a card!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_EMPTY_DECK \u003d \"The deck contains no flashcards to test!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_NO_TESTSESSION \u003d \"There is no test session ongoing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_UNANSWERED_QUESTION \u003d \"%s: Have you answered this question yet?%s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_USER_ANSWER \u003d \"Your input: %s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_FLASHCARD_ANSWER \u003d \"Correct answer: %s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_NOTHING_TO_REDO \u003d \"There are no commands to redo.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_NOTHING_TO_UNDO \u003d \"There are no commands to undo. \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_TEST_COMPLETE \u003d \"Test has ended!\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"Type \u0027statistics\u0027 to show the statistics for this question, or type \u0027end\u0027 to return to the home page.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_TEST_ONGOING \u003d \"You can\u0027t use this command right now, a test is still ongoing!\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"\\nType \u0027quit\u0027 if you wish to quit the test.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 16,
      "airshhlay": 9,
      "phaebaez": 11
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 37
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/CommandHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Represents the history of commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private static final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final ObservableList\u003cString\u003e history \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableHistory \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            FXCollections.unmodifiableObservableList(history);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandHistory() {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        history.addAll(commandHistory.history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Adds an {code commandString} string to the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public void add(String commandString) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(commandString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        history.add(commandString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return unmodifiableHistory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return history.equals(other.history);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return history.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "phaebaez": 61
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.model.deck.Statistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @see cardibuddy.model.Model#getCardiBuddy()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ReadOnlyCardiBuddy getCardiBuddy();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of decks */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ObservableList\u003cDeck\u003e getFilteredDeckList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of flashcards */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ObservableList\u003cCard\u003e getFilteredFlashcardList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns the Statistics of the Model."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Path getCardiBuddyFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void setLogicToUiManager(LogicToUiManager logicToUiManager);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 6,
      "haveaqiupill": 20,
      "airshhlay": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.CardiBuddyParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.model.deck.Statistics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private final CardiBuddyParser cardiBuddyParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final CommandHistory commandHistory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private boolean cardiBuddyModified;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardiBuddyParser \u003d new CardiBuddyParser(model.getCardiBuddy());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setLogicToUiManager(LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardiBuddyParser.setLogicToUiManager(logicToUiManager);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        cardiBuddyModified \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            Command command \u003d cardiBuddyParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            commandResult \u003d command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            commandHistory.add(commandText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (cardiBuddyModified) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            logger.info(\"CardiBuddy has been modified, saving to file.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                storage.saveCardiBuddy(model.getCardiBuddy());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ReadOnlyCardiBuddy getCardiBuddy() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return model.getCardiBuddy();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return model.getFilteredDeckList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return model.getStatistics();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Path getCardiBuddyFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return model.getCardiBuddyFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 6,
      "haveaqiupill": 29,
      "airshhlay": 6,
      "-": 53,
      "phaebaez": 13
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/LogicToUiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.AnswerType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.TestResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.ui.UiManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Allows the Commands to control the change in view of the MainWindow panel."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class LogicToUiManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    protected UiManager ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private String openedDeck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Deck displayedDeck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean inDeck \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public LogicToUiManager(UiManager ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void openFlashcardPanel(int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ui.getMainWindow().fillInnerPartsWithCards(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setNewCommandBox() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ui.setNewCommandBox();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void updateFlashcardPanel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ui.getMainWindow().updateCards(displayedDeck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void removeFlashcards() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ui.getMainWindow().removeFlashcards();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void openStatisticPanel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ui.getMainWindow().fillInnerPartsWithStatistic();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void openStatisticPanel(int deckIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ui.getMainWindow().fillInnerPartsWithStatistic(deckIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void openStatisticPanel(int deckIndex, int sessionIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        ui.getMainWindow().fillInnerPartsWithStatistic(deckIndex, sessionIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void openDeckPanel() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ui.getMainWindow().fillInnerPartsWithDecks();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setOpenedDeck(Deck openedDeck) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (openedDeck \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            inDeck \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            this.openedDeck \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            inDeck \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            this.openedDeck \u003d openedDeck.getTitle().toString().toLowerCase();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.displayedDeck \u003d openedDeck;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Deck getDisplayedDeck() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return displayedDeck;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean isInDeck() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.inDeck;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Displays the current question for the ongoing test session."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * This question is displayed on the left panel."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param question question belonging to the current flashcard being tested"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void showTestQuestion(Question question, AnswerType answerType) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ui.getMainWindow().fillInnerPartsWithQuestion(question, answerType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Displays the current status of the test (How many flashcards left, encouragement)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * This status is displayed on the right panel."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param testQueueSize the number of flashcards left to test, excluding the current one being tested"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void showTestStatus(int testQueueSize) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ui.getMainWindow().showTestStatus(testQueueSize);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Displays the result of the user\u0027s answering of the current flashcard being tested."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * This result replaces the question being displayed, in the left panel."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param testResult"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void showTestResult(TestResult testResult) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ui.getMainWindow().fillInnerPartsWithResult(testResult);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Displays the main page again."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Adds the deck list back to the left panel, but clears the right panel."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void showTestEnd() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ui.getMainWindow().fillInnerPartsWithDecks();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ui.getMainWindow().clearFlashcardListPanel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 10,
      "haveaqiupill": 66,
      "airshhlay": 36
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/AddCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Adds a Flashcard to the specified deck."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public abstract class AddCardCommand extends AddCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 7,
      "phaebaez": 7
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Represents an add command to be extended into add deck and add card commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    protected static final Logger LOGGER \u003d LogsCenter.getLogger(AddCommand.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 8,
      "phaebaez": 9
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/AddDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_TEST_ONGOING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Adds a deck to the cardibuddy storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class AddDeckCommand extends AddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"d\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"add d/: Adds a deck to the cardibuddy book. \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_DECK + \"DECK_TITLE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Example (adding a deck): \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_DECK + \"CS2103T \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_TAG + \"Hard \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_TAG + \"Software Engineering\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deck added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"This deck already exists in the cardibuddy library\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static List\u003cCard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final Deck toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Deck}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public AddDeckCommand(Deck deck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        toAdd \u003d deck;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcards \u003d deck.getFlashcards();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (model.hasOngoingTestSession()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_TEST_ONGOING);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (model.hasDeck(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        model.addDeck(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.commitCardiBuddy();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        LOGGER.info(\"Deck has been added\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof AddDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddDeckCommand) other).toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 65,
      "airshhlay": 4,
      "phaebaez": 3
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/AddFlashcardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_FLASHCARD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Adds a Flashcard (without image) to a deck."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class AddFlashcardCommand extends AddCardCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"add c/: Adds a flashcard to a deck. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_FLASHCARD + \"DECK_INDEX \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Example (adding a flashcard): \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_FLASHCARD + \"1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_QUESTION + \"A queue cannot be implemented using an array \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_ANSWER + \"False \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_ADD_FLASHCARD \u003d \"To add a flashcard to the cardibuddy book. \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_FLASHCARD + \"DECK_INDEX \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Example: add \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_FLASHCARD + \"/ Java \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_QUESTION + \"A queue cannot be implemented using an array \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_ANSWER + \"False \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_TAG + \"Programming\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New flashcard added:\\n%1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists in the deck\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final Flashcard toAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public AddFlashcardCommand(Flashcard flashcard, LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        toAdd \u003d flashcard;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (logicToUiManager.getDisplayedDeck().hasFlashcard(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        model.addFlashcard(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logicToUiManager.getDisplayedDeck().addCard(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        LOGGER.info(\"Flashcard has been added\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logicToUiManager.getDisplayedDeck().updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logicToUiManager.updateFlashcardPanel();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof AddFlashcardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddFlashcardCommand) other).toAdd));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 81,
      "phaebaez": 2
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_TEST_ONGOING;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.CardiBuddy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Clears all decks and cards from the cardibuddy."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Cardibuddy has been cleared\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (model.hasOngoingTestSession()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_TEST_ONGOING);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.setCardiBuddy(new CardiBuddy());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.commitCardiBuddy();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 15,
      "airshhlay": 4,
      "phaebaez": 10
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Represents a command with hidden internal cardibuddy.logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "phaebaez": 21
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final boolean test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final boolean insert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean test, boolean insert, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.test \u003d test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.insert \u003d insert;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this(feedbackToUser, false, false, false, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean isTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return test;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean isInsert() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return insert;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 insert \u003d\u003d otherCommandResult.insert"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 test \u003d\u003d otherCommandResult.test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, insert, test, exit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 19,
      "-": 67,
      "phaebaez": 1
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/DeleteCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_TEST_ONGOING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Deletes a card from the opened deck."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DeleteCardCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"card\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \": Deletes a flashcard identified by the index number used in the displayed cardibuddy book.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_DELETE_CARD_SUCCESS \u003d \"Deleted Card:\\n%1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeleteCardCommand(Index targetIndex, LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (model.hasOngoingTestSession()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_TEST_ONGOING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cCard\u003e lastShownList \u003d logicToUiManager.getDisplayedDeck().getFilteredFlashcardList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Card cardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logicToUiManager.getDisplayedDeck().deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logicToUiManager.updateFlashcardPanel();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.commitCardiBuddy();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CARD_SUCCESS, cardToDelete));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof DeleteCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCardCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 57,
      "airshhlay": 5,
      "phaebaez": 3
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Represents a delete command to be extended into search deck and search card commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \": Deletes a deck or flashcard identified by the index number used in the displayed cardibuddy book.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" deck 1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 13,
      "phaebaez": 4
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/DeleteDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_TEST_ONGOING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Deletes a deck based on index."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DeleteDeckCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deck\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \": Deletes a deck identified by the index number used in the displayed cardibuddy book.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_DELETE_DECK_SUCCESS \u003d \"Deleted Deck:\\n%1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeleteDeckCommand(Index targetIndex, LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (model.hasOngoingTestSession()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_TEST_ONGOING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck deckToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        model.deleteDeck(deckToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logicToUiManager.removeFlashcards();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.commitCardiBuddy();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DECK_SUCCESS, deckToDelete));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof DeleteDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteDeckCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 56,
      "airshhlay": 4,
      "phaebaez": 3
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_TEST_ONGOING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Edits Deck Title or its Tags."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the deck identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"by the index number used in the displayed deck list.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_DECK + \"DECK_TITLE \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_TAG + \"TAG... or t/ to clear all existing tags\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 d/ t/Hard\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_EDIT_DECK_SUCCESS \u003d \"Edited deck\" + \": %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"All fields to edit must be provided.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"This deck already exists in the cardibuddy library.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final EditDeckDescriptor editDeckDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * @param index of the deck in the filtered deck list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * @param editDeckDescriptor details to edit the deck with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public EditCommand(Index index, EditDeckDescriptor editDeckDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(editDeckDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        this.editDeckDescriptor \u003d new EditDeckDescriptor(editDeckDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (model.hasOngoingTestSession()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_TEST_ONGOING);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        Deck deckToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        Deck editedDeck \u003d createEditedDeck(deckToEdit, editDeckDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (!deckToEdit.isSameDeck(editedDeck) \u0026\u0026 model.hasDeck(editedDeck)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.setDeck(deckToEdit, editedDeck);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.commitCardiBuddy();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_DECK_SUCCESS, editedDeck));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Creates and returns a {@code Deck} with the details of {@code deckToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * edited with {@code editDeckDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private static Deck createEditedDeck(Deck deckToEdit, EditDeckDescriptor editDeckDescriptor) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        assert deckToEdit !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Title updatedTitle \u003d editDeckDescriptor.getTitle().orElse(deckToEdit.getTitle());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editDeckDescriptor.getTags().orElse(deckToEdit.getTags());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new Deck(updatedTitle, updatedTags, deckToEdit.getFlashcards());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                \u0026\u0026 editDeckDescriptor.equals(e.editDeckDescriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static class EditDeckDescriptor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        public EditDeckDescriptor() {}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        public EditDeckDescriptor(EditDeckDescriptor toCopy) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        public boolean isFieldEdited() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return !(title \u003d\u003d null) || CollectionUtil.isAnyNonNull(tags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return (title !\u003d null) ? Optional.of(title) : Optional.empty();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            if (!(other instanceof EditDeckDescriptor)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            EditDeckDescriptor e \u003d (EditDeckDescriptor) other;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return getTitle().equals(e.getTitle()) \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 35,
      "airshhlay": 4,
      "phaebaez": 145
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Cardibuddy as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "phaebaez": 6
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/FilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_TEST_ONGOING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.FilterDeckKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Finds and lists all decks and cards in cardibuddy whose tags contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \": Finds all decks whose titles contain any of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Parameters: KEYWORD [\u0026] [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" java\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final FilterDeckKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public FilterCommand(FilterDeckKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public FilterDeckKeywordsPredicate getPredicate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (model.hasOngoingTestSession()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_TEST_ONGOING);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        model.updateFilteredDeckList(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                String.format(Messages.MESSAGE_DECKS_LISTED_OVERVIEW, model.getFilteredDeckList().size()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 49,
      "airshhlay": 7,
      "phaebaez": 1
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "phaebaez": 5
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/HistoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Shows the history of commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Displayed command history: \\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "phaebaez": 35
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/InsertImageCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_FLASHCARD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Imagecard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Adds a Flashcard to the specified deck."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class InsertImageCommand extends AddCardCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"p\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"add c/: Adds a flashcard to a deck. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_FLASHCARD + \"DECK_INDEX \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Example (adding a flashcard): \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_FLASHCARD + \"1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_QUESTION + \"A queue cannot be implemented using an array \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_ANSWER + \"False \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_ADD_FLASHCARD \u003d \"To add a flashcard to the cardibuddy book. \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_FLASHCARD + \"DECK_INDEX \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Example: add \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_FLASHCARD + \"/ Java \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_QUESTION + \"A queue cannot be implemented using an array \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_ANSWER + \"False \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_TAG + \"Programming\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New flashcard added: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists in the deck\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final Imagecard toAdd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public InsertImageCommand(Imagecard imagecard, LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(imagecard);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        toAdd \u003d imagecard;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (logicToUiManager.getDisplayedDeck().hasFlashcard(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logicToUiManager.getDisplayedDeck().addCard(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        LOGGER.info(\"Flashcard has been added\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logicToUiManager.getDisplayedDeck().updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logicToUiManager.updateFlashcardPanel();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.commitCardiBuddy();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), false, false, false, false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof InsertImageCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 toAdd.equals(((InsertImageCommand) other).toAdd));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 80,
      "phaebaez": 3
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_TEST_ONGOING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Lists all decks/flashcards in the directory to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all decks\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ListCommand(LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (logicToUiManager.isInDeck()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            logicToUiManager.removeFlashcards();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            logicToUiManager.setOpenedDeck(null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (model.hasOngoingTestSession()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_TEST_ONGOING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 23,
      "airshhlay": 4,
      "phaebaez": 9
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/OpenCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_TEST_ONGOING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Opens the Deck that corresponds with the index and the subsequent Flashcards."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class OpenCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \": Opens the deck identified by the index number used in the displayed cardibuddy book.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_OPEN_DECK_SUCCESS \u003d \"Opened Deck: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public OpenCommand(Index targetIndex, LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (model.hasOngoingTestSession()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_TEST_ONGOING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        Deck deckToOpen \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logicToUiManager.openFlashcardPanel(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logicToUiManager.setOpenedDeck(deckToOpen);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_OPEN_DECK_SUCCESS, deckToOpen));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                || (other instanceof OpenCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((OpenCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 4,
      "haveaqiupill": 10,
      "phaebaez": 51
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_TEST_ONGOING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Reverts the {@code model}\u0027s CardiBuddy to its previously undone state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redone last command: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (model.hasOngoingTestSession()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_TEST_ONGOING);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (!model.canRedo()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOTHING_TO_REDO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.redo();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.updateFilteredDeckList(Model.PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.updateFilteredFlashcardList(Model.PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 4,
      "phaebaez": 32
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/SearchCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_NOT_IN_DECK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_TEST_ONGOING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.exceptions.NotInDeckException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.SearchCardKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Finds and lists all decks and cards in cardibuddy whose title contains any of the argument keywords."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class SearchCardCommand extends SearchCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"card\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \": Finds all decks whose titles contain any of \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" java\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final SearchCardKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public SearchCardCommand(SearchCardKeywordsPredicate predicate, LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws RuntimeException, CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (model.hasOngoingTestSession()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_TEST_ONGOING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assert true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!logicToUiManager.isInDeck()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new NotInDeckException(String.format(MESSAGE_NOT_IN_DECK"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    + \" You need to open a deck first. \\n\" + OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logicToUiManager.getDisplayedDeck().updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logicToUiManager.updateFlashcardPanel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                String.format(Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        logicToUiManager.getDisplayedDeck().getFilteredFlashcardList().size()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof SearchCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchCardCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 61,
      "airshhlay": 6,
      "phaebaez": 1
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/SearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Represents a search command to be extended into search deck and search card commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public abstract class SearchCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 12
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/SearchDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_TEST_ONGOING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.SearchDeckKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Finds and lists all decks and cards in cardibuddy whose title contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class SearchDeckCommand extends SearchCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deck\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \": Finds all decks whose titles contain any of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" java\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final SearchDeckKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public SearchDeckCommand(SearchDeckKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (model.hasOngoingTestSession()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_TEST_ONGOING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        model.updateFilteredDeckList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                String.format(Messages.MESSAGE_DECKS_LISTED_OVERVIEW, model.getFilteredDeckList().size()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof SearchDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchDeckCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 45,
      "airshhlay": 6,
      "phaebaez": 1
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/StatisticsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_TEST_ONGOING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Shows the Statistics report of a specific Deck or every Deck at once."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class StatisticsCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"statistics\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \": Shows the user\u0027s statistics in general (if no parameters),\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \" of a deck (if deck_index is included),\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \" or of a testSession of a deck (if deck_index AND test_index is included.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"Parameters: (optional) DECK_INDEX (optional) TEST_INDEX\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_OPEN_STATISTIC_SUCCESS \u003d \"Opened statistics\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_OPEN_DECK_STATISTIC_SUCCESS \u003d \"Opened statistics of Deck: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_OPEN_SESSION_STATISTIC_SUCCESS \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                                                \"Opened statistics of Session %1$d of Deck %2$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Index deckIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Index sessionIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Opens the Statistic report of all the Decks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param logicToUiManager manager to set the UI into"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public StatisticsCommand(LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.deckIndex \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.sessionIndex \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Opens the Statistic report of a specific Deck."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param deckIndex target Deck"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param logicToUiManager manager to set the UI into"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public StatisticsCommand(Index deckIndex, LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.deckIndex \u003d deckIndex;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.sessionIndex \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Opens the Statistic report of a specific Deck."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param deckIndex target Deck"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param logicToUiManager manager to set the UI into"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public StatisticsCommand(Index deckIndex, Index sessionIndex, LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.deckIndex \u003d deckIndex;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.sessionIndex \u003d sessionIndex;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (model.hasOngoingTestSession()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_TEST_ONGOING);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // result to show statistics (in general)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (deckIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            logicToUiManager.openStatisticPanel();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    String.format(MESSAGE_OPEN_STATISTIC_SUCCESS));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (deckIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Deck deckToShow \u003d lastShownList.get(deckIndex.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // result to show statistics of a Deck"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (sessionIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            logicToUiManager.openStatisticPanel(deckIndex.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                    String.format(MESSAGE_OPEN_DECK_STATISTIC_SUCCESS, deckToShow));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        // result to show statistics of a TestSession of a Deck"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        logicToUiManager.openStatisticPanel(deckIndex.getZeroBased(), sessionIndex.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                String.format(MESSAGE_OPEN_SESSION_STATISTIC_SUCCESS, sessionIndex.getOneBased(), deckToShow));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                || (other instanceof StatisticsCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 deckIndex.equals(((StatisticsCommand) other).deckIndex)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                \u0026\u0026 sessionIndex.equals(((StatisticsCommand) other).sessionIndex); // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 109,
      "airshhlay": 4,
      "phaebaez": 2
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/TestCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_EMPTY_DECK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.AnswerType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.EmptyDeckException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A class for the test command, used to initiate a test session."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TestCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"test\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \": Starts a test session with the deck indicated by the index\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_TEST_SESSION_SUCCESS \u003d \"Started a test session.\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"\\nAnswer format: \u0027ans YOUR_ANSWER\u0027\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(TestCommand.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TestCommand(Index targetIndex, LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Deck deckToTest \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            Question firstQuestion \u003d model.testDeck(deckToTest);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            AnswerType answerType \u003d model.getCurrentAnswerType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            logicToUiManager.showTestQuestion(firstQuestion, answerType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            logicToUiManager.showTestStatus(model.getTestQueueSize());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return new CommandResult(MESSAGE_TEST_SESSION_SUCCESS, false, false, false, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (EmptyDeckException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY_DECK);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                || (other instanceof TestCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((TestCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 72,
      "haveaqiupill": 1,
      "phaebaez": 2
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_TEST_ONGOING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Reverts the {@code model}\u0027s CardiBuddy to its previous state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undone last command: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (model.hasOngoingTestSession()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_TEST_ONGOING);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (!model.canUndo()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOTHING_TO_UNDO);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.undo();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.updateFilteredDeckList(Model.PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 4,
      "phaebaez": 30
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "phaebaez": 1
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/testsession/AnswerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.logic.commands.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_NO_TESTSESSION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.Result;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.TestResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A class for the test command, used to initiate a test session."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class AnswerCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ans\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \": Submits your answer to CardiBuddy.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Waterfall is not an agile approach.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_FORCE_PROMPT \u003d \"\\nType \u0027force\u0027 to force mark your answer as correct, or\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_ANS_SUCCESS \u003d \"Answer submitted!\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"%s\\nType next to move on to the next question.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String userAnswer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public AnswerCommand(LogicToUiManager logicToUiManager, String userAnswer) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.userAnswer \u003d userAnswer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Submits the user\u0027s answer to the {@code TestSession} stored in the model."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * A {@code Result} is obtained which is passed to the Ui to display the outcome to the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return CommandResult object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws CommandException when there is no ongoing test session"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            TestResult testResult \u003d model.submitAnswer(userAnswer);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            logicToUiManager.showTestResult(testResult);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            if (testResult.getResult() \u003d\u003d Result.WRONG) { // prompt the user to force correct if they wish to"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_ANS_SUCCESS, MESSAGE_FORCE_PROMPT),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        false, false, false, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_ANS_SUCCESS, \"\"), false, false, false, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_NO_TESTSESSION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                || (other instanceof AnswerCommand \u0026\u0026 ((AnswerCommand) other).userAnswer.equals(userAnswer));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "airshhlay": 63,
      "haveaqiupill": 3,
      "phaebaez": 2
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/testsession/ForceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.logic.commands.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_UNANSWERED_QUESTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.AlreadyCorrectException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.UnansweredQuestionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A command class called in a test session, when the user forces their answer to be marked correct."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class ForceCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"force\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \": Forces CardiBuddy to mark the answer you gave as correct. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"The flashcard will not be added back into your test session.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_FORCE_SUCCESS \u003d \"Marked your answer as correct. Type next to move on.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_FORCE_FAIL_ALREADYCORRECT \u003d \"Unable to force correct: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"Your answer is already correct!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ForceCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Gets the current {@code TestSession} to change the {@code TestResult} of the current flashcard."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            model.forceCorrect();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (UnansweredQuestionException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_UNANSWERED_QUESTION, \"Unable to force correct\", \"\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (AlreadyCorrectException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_FORCE_FAIL_ALREADYCORRECT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new CommandResult(MESSAGE_FORCE_SUCCESS, false, false, false, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 44,
      "haveaqiupill": 1,
      "phaebaez": 2
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/testsession/NextCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.logic.commands.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_NO_TESTSESSION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_TEST_COMPLETE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_UNANSWERED_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.AnswerType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.EmptyTestQueueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.NoOngoingTestException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.UnansweredQuestionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A class for the test command, used to initiate a test session."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class NextCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"next\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \": Shows the next flashcard in the test queue, if any.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"If you think your answer is correct, enter next force to force correct.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"OR: \" + COMMAND_WORD + \" force\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_NEXT_SUCCESS \u003d \"Answer the following question:\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"\\nFormat: \u0027ans YOUR ANSWER\u0027\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(NextCommand.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public NextCommand(LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Gets the next question in the test queue, if any."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return CommandResult object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws CommandException if there is no currently ongoing test session,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * or if the user has not answered the question yet."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            Question question \u003d model.getNextQuestion();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            AnswerType answerType \u003d model.getCurrentAnswerType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            logicToUiManager.showTestQuestion(question, answerType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            logicToUiManager.showTestStatus(model.getTestQueueSize());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return new CommandResult(MESSAGE_NEXT_SUCCESS, false, false, false, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (EmptyTestQueueException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            // no more flashcards left to test, return to the main window."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            model.clearTestSession();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            logicToUiManager.showTestEnd();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return new CommandResult(MESSAGE_TEST_COMPLETE, false, false, false, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (NoOngoingTestException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_NO_TESTSESSION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (UnansweredQuestionException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(String.format"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    (MESSAGE_UNANSWERED_QUESTION,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                            \"Cannot go to the next question\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                            \"\\nType \u0027skip\u0027 if you want to skip this question.\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                || other instanceof NextCommand; // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 80,
      "haveaqiupill": 2,
      "phaebaez": 2
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/testsession/QuitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.logic.commands.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_NO_TESTSESSION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.NoOngoingTestException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A command to quit the current test session prematurely,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * if there are still flashcards remaining in the test queue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class QuitCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quit\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"Quits the current test session before it is completed.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_QUIT_SUCCESS \u003d \"Quit the test session.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(NextCommand.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public QuitCommand(LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Gets the next question in the test queue, if any."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            model.clearTestSession();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            logicToUiManager.showTestEnd();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return new CommandResult(MESSAGE_QUIT_SUCCESS, false, false, false, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (NoOngoingTestException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_NO_TESTSESSION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                || other instanceof QuitCommand; // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 58,
      "haveaqiupill": 1,
      "phaebaez": 2
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/testsession/SkipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.logic.commands.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_NO_TESTSESSION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_TEST_COMPLETE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.AnswerType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.AlreadyCorrectException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.EmptyTestQueueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.NoOngoingTestException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A command to skip the current question. Sets the {@code TestResult} to contain {@code Result.SKIPPED}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Not to be confused with {@code ForceCommand},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * that can only be called when the user has answered the question wrongly."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * ForceCommand will set {@code TestResult} to contain {@code Result.CORRECT}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class SkipCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"skip\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \": Skip the current flashcard being tested.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_SKIP_SUCCESS \u003d \"Skipped the question.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_SKIP_FAIL \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \"Unable to skip the question: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    + \"You already got it correct! (Why would you want to skip it?)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    + \"\\nType \u0027next\u0027 to go to the next question instead!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public SkipCommand(LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            Question question \u003d model.skipQuestion();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            AnswerType answerType \u003d model.getCurrentAnswerType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            logicToUiManager.showTestQuestion(question, answerType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            logicToUiManager.showTestStatus(model.getTestQueueSize());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return new CommandResult(MESSAGE_SKIP_SUCCESS, false, false, false, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (EmptyTestQueueException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            model.clearTestSession();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            logicToUiManager.showTestEnd();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return new CommandResult(MESSAGE_TEST_COMPLETE, false, false, false, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (NoOngoingTestException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_NO_TESTSESSION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (AlreadyCorrectException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(MESSAGE_SKIP_FAIL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 60,
      "haveaqiupill": 2,
      "phaebaez": 2
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/AddCardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.AddCardCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Parses input arguments and creates a new AddCardCommand object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public abstract class AddCardCommandParser implements Parser\u003cAddCardCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 10
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/AddDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_DECK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.AddDeckCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Parses input arguments and creates a new AddDeckCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class AddDeckCommandParser implements Parser\u003cAddDeckCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_ADD_DECK \u003d \"To add a deck to the cardibuddy book. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_DECK + \"DECK_TITLE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Example: add \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_DECK + \"CS2103T \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_TAG + \"Hard \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + PREFIX_TAG + \"Software Engineering\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public AddDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DECK, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        //handleInputErrors(argMultimap);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_DECK).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cCard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new AddDeckCommand(new Deck(title, tagList, flashcards));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // * Handles wrong input commands by user by throwing respective exceptions."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // * @param argMultimap Multimap of arguments."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // * @throws ParseException Respective exceptions."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //private void handleInputErrors(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    if (arePrefixesPresent(argMultimap, PREFIX_DECK)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        // both PREFIX_DECK and PREFIX_FLASHCARD are present"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        throw new DeckCannotBeCardException(String.format(MESSAGE_DECK_CANNOT_BE_FLASHCARD"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //                + \"\\n\" + AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    } else if (arePrefixesPresent(argMultimap, PREFIX_DECK, PREFIX_QUESTION, PREFIX_ANSWER)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //            | arePrefixesPresent(argMultimap, PREFIX_DECK, PREFIX_QUESTION)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //            | arePrefixesPresent(argMultimap, PREFIX_DECK, PREFIX_ANSWER)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        //trying to add a deck with a question and/or an answer"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        throw new InvalidDeckException(String.format(MESSAGE_INVALID_DECK + \"\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //                + AddCommand.MESSAGE_ADD_DECK));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 68
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/AddFlashcardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_NOT_IN_DECK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_WRONG_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.AddFlashcardCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Parses input arguments and creates a new AddFlashcardCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class AddFlashcardCommandParser extends AddCardCommandParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private ReadOnlyCardiBuddy cardiBuddy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public AddFlashcardCommandParser(ReadOnlyCardiBuddy cardiBuddy, LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.cardiBuddy \u003d cardiBuddy;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public AddFlashcardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FLASHCARD,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        PREFIX_QUESTION, PREFIX_ANSWER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        //handleInputErrors(argMultimap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Index deckIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_FLASHCARD).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        int index \u003d deckIndex.getZeroBased();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ObservableList\u003cDeck\u003e deckObservableList \u003d cardiBuddy.getDeckList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck deck \u003d deckObservableList.get(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!logicToUiManager.isInDeck()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_IN_DECK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!deck.equals(logicToUiManager.getDisplayedDeck())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new ParseException(MESSAGE_WRONG_DECK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Question modelQuestion \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Answer modelAnswer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Flashcard flashcard \u003d new Flashcard(deck, modelQuestion, modelAnswer, \"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new AddFlashcardCommand(flashcard, logicToUiManager);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // * Handles wrong input commands by user by throwing respective exceptions."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // * @param argMultimap Multimap of arguments."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // * @throws ParseException Respective exceptions."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //private void handleInputErrors(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    if (arePrefixesPresent(argMultimap, PREFIX_DECK, PREFIX_FLASHCARD)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        // both PREFIX_DECK and PREFIX_FLASHCARD are present"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        throw new DeckCannotBeCardException(String.format(MESSAGE_DECK_CANNOT_BE_FLASHCARD"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //                + \"\\n\" + AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    } else if (arePrefixesPresent(argMultimap, PREFIX_DECK, PREFIX_QUESTION, PREFIX_ANSWER)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //            | arePrefixesPresent(argMultimap, PREFIX_DECK, PREFIX_QUESTION)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //            | arePrefixesPresent(argMultimap, PREFIX_DECK, PREFIX_ANSWER)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        //trying to add a deck with a question and/or an answer"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        throw new InvalidDeckException(String.format(MESSAGE_INVALID_DECK + \"\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //                + AddCommand.MESSAGE_ADD_DECK));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    } else if (arePrefixesPresent(argMultimap, PREFIX_FLASHCARD)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        if (!logicToUiManager.isInDeck()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //            throw new NotInDeckException(String.format(MESSAGE_NOT_IN_DECK"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //                    + \" You need to open a deck first. \\n\" + OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_FLASHCARD).get());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        if (!title.toString().toLowerCase().equals(logicToUiManager.getOpenedDeck())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //            throw new WrongDeckException(String.format(MESSAGE_WRONG_DECK));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        if (!arePrefixesPresent(argMultimap, PREFIX_FLASHCARD, PREFIX_QUESTION, PREFIX_ANSWER)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //            throw new InvalidFlashcardException(String.format(MESSAGE_INVALID_FLASHCARD + \"\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //                    + AddCommand.MESSAGE_ADD_FLASHCARD));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        if (arePrefixesPresent(argMultimap, PREFIX_FLASHCARD, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //            throw new InvalidFlashcardException(String.format(MESSAGE_INVALID_FLASHCARD + \"\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //                    + AddCommand.MESSAGE_ADD_FLASHCARD));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 104
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Checks for the presence of {@code key}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public Boolean containsKey(Prefix key) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return argMultimap.containsKey(key);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 59,
      "phaebaez": 7
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/CardiBuddyParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_DECK_OR_FLASHCARD_PREFIX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INCOMPLETE_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_TWO_WORD_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.AddDeckCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.AddFlashcardCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.commands.DeleteDeckCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.InsertImageCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.SearchCardCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.SearchDeckCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.TestCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.testsession.AnswerCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.testsession.ForceCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.testsession.NextCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.testsession.QuitCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.testsession.SkipCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class CardiBuddyParser {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private ReadOnlyCardiBuddy cardiBuddy;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CardiBuddyParser(ReadOnlyCardiBuddy cardiBuddy) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.cardiBuddy \u003d cardiBuddy;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setLogicToUiManager(LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return new OpenCommandParser(logicToUiManager).parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                switch (arguments.substring(1, 2)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                case AddDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    System.out.println(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    return new AddDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                case AddFlashcardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    return new AddFlashcardCommandParser(cardiBuddy, logicToUiManager).parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                case InsertImageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    return new InsertImageCommandParser(cardiBuddy, logicToUiManager).parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                throw new ParseException(MESSAGE_INCOMPLETE_COMMAND + MESSAGE_DECK_OR_FLASHCARD_PREFIX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        case InsertImageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return new InsertImageCommandParser(cardiBuddy, logicToUiManager).parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                switch (arguments.substring(1, 5)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                case DeleteDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    return new DeleteDeckCommandParser(logicToUiManager).parse(arguments.substring(5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                case DeleteCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    return new DeleteCardCommandParser(logicToUiManager).parse(arguments.substring(5));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    throw new ParseException(MESSAGE_UNKNOWN_COMMAND + \"\\n\" + MESSAGE_INVALID_TWO_WORD_COMMAND);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                throw new ParseException(MESSAGE_INCOMPLETE_COMMAND + MESSAGE_INVALID_TWO_WORD_COMMAND);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case TestCommand.COMMAND_WORD: // test session command"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return new TestCommandParser(logicToUiManager).parse(arguments);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case AnswerCommand.COMMAND_WORD: // test session command"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return new AnswerCommand(logicToUiManager, arguments.trim());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case NextCommand.COMMAND_WORD: // test session command"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return new NextCommand(logicToUiManager);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case QuitCommand.COMMAND_WORD: // test session command"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return new QuitCommand(logicToUiManager);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case ForceCommand.COMMAND_WORD: // test session command"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return new ForceCommand();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case SkipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return new SkipCommand(logicToUiManager);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                switch (arguments.substring(1, 5)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                case SearchDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    return new SearchDeckCommandParser().parse(arguments.substring(5));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                case SearchCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    return new SearchCardCommandParser(logicToUiManager).parse(arguments.substring(5));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    throw new ParseException(MESSAGE_UNKNOWN_COMMAND + \" \" + MESSAGE_INVALID_TWO_WORD_COMMAND);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        case StatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return new StatisticsCommandParser(logicToUiManager).parse(arguments);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return new ListCommand(logicToUiManager);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 3,
      "haveaqiupill": 101,
      "airshhlay": 20,
      "-": 56,
      "phaebaez": 19
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final Prefix PREFIX_DECK \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final Prefix PREFIX_FLASHCARD \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final Prefix PREFIX_PATH \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "phaebaez": 14
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/DeleteCardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_NOT_IN_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.DeleteCardCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Parses input arguments and creates a new DeleteCardCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DeleteCardCommandParser implements Parser\u003cDeleteCardCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeleteCardCommandParser(LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeleteCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (!logicToUiManager.isInDeck()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_NOT_IN_DECK));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                return new DeleteCardCommand(index, logicToUiManager);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 41
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/DeleteDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.DeleteDeckCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Parses input arguments and creates a new DeleteDeckCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DeleteDeckCommandParser implements Parser\u003cDeleteDeckCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeleteDeckCommandParser(LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeleteDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            logicToUiManager.setOpenedDeck(null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            logicToUiManager.openDeckPanel();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return new DeleteDeckCommand(index, logicToUiManager);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 37
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_DECK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.commands.EditCommand.EditDeckDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DECK, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        EditDeckDescriptor editDeckDescriptor \u003d new EditDeckDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        parseTitleForEdit(argMultimap.getValue(PREFIX_DECK).get()).ifPresent(editDeckDescriptor::setTitle);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editDeckDescriptor::setTags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (!editDeckDescriptor.isFieldEdited()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new EditCommand(index, editDeckDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses the string into a Title object if title is non-empty."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param title string from user input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return an optional object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws ParseException if there is an error."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Optional\u003cTitle\u003e parseTitleForEdit(String title) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assert title !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (title.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return Optional.of(ParserUtil.parseTitle(title));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 59,
      "phaebaez": 26
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/FilterCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.FilterDeckKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * and returns a FilterCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new FilterCommand(new FilterDeckKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 34
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/InsertImageCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_NOT_IN_DECK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_WRONG_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.AddCardCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.InsertImageCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Imagecard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Parses input arguments and creates a new AddCardCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class InsertImageCommandParser implements Parser\u003cAddCardCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private ReadOnlyCardiBuddy cardiBuddy;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public InsertImageCommandParser(ReadOnlyCardiBuddy cardiBuddy, LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.cardiBuddy \u003d cardiBuddy;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public InsertImageCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PATH, PREFIX_FLASHCARD,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        PREFIX_QUESTION, PREFIX_ANSWER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        //handleInputErrors(argMultimap);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Index deckIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_FLASHCARD).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        int index \u003d deckIndex.getZeroBased();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ObservableList\u003cDeck\u003e deckObservableList \u003d cardiBuddy.getDeckList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck deck \u003d deckObservableList.get(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!logicToUiManager.isInDeck()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_IN_DECK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!deck.equals(logicToUiManager.getDisplayedDeck())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new ParseException(MESSAGE_WRONG_DECK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        String path \u003d argMultimap.getValue(PREFIX_PATH).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Question modelQuestion \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Answer modelAnswer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Imagecard imagecard \u003d new Imagecard(deck, modelQuestion, modelAnswer, path);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new InsertImageCommand(imagecard, logicToUiManager);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 66
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/OpenCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.logic.commands.OpenCommand.MESSAGE_OPEN_DECK_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Parses input arguments and creates a new OpenCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class OpenCommandParser implements Parser\u003cOpenCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(OpenCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public OpenCommandParser(LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the OpenCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * and returns a OpenCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public OpenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return new OpenCommand(index, logicToUiManager);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                    String.format(MESSAGE_OPEN_DECK_SUCCESS, OpenCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 8,
      "phaebaez": 30
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.ShortAnswer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        String trimmedName \u003d title.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!Title.isValidTitle(trimmedName) || title.isBlank()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new Title(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Parses a {@code String question} into a {@code Question}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static Question parseQuestion(String question) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (!Question.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new Question(trimmedQuestion);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Parses a {@code String answer} into a {@code Answer}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * @throws ParseException if the given {@code answer} is invalid."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new ShortAnswer(trimmedAnswer);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 75,
      "phaebaez": 34
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "phaebaez": 1
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/SearchCardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.SearchCardCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.SearchCardKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Parses input arguments and creates a new SearchCardCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class SearchCardCommandParser implements Parser\u003cSearchCardCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public SearchCardCommandParser(LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCardCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * and returns a SearchCardCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public SearchCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new SearchCardCommand(new SearchCardKeywordsPredicate(Arrays.asList(nameKeywords)), logicToUiManager);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 41
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/SearchDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.SearchDeckCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.SearchDeckKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Parses input arguments and creates a new SearchDeckCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class SearchDeckCommandParser implements Parser\u003cSearchDeckCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchDeckCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * and returns a SearchDeckCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public SearchDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new SearchDeckCommand(new SearchDeckKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 14,
      "-": 20
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/StatisticsCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Parses input arguments and creates a new StatisticsCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class StatisticsCommandParser implements Parser\u003cStatisticsCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(StatisticsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public StatisticsCommandParser(LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatisticsCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * and returns a StatisticsCommand object for execution"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public StatisticsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index deckIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Index sessionIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        String[] splitArgs \u003d trimmedArgs.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (splitArgs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            if (splitArgs[0].isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                return new StatisticsCommand(logicToUiManager);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                deckIndex \u003d ParserUtil.parseIndex(splitArgs[0]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatisticsCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return new StatisticsCommand(deckIndex, logicToUiManager);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        } else if (splitArgs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                deckIndex \u003d ParserUtil.parseIndex(splitArgs[0]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                sessionIndex \u003d ParserUtil.parseIndex(splitArgs[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatisticsCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return new StatisticsCommand(deckIndex, sessionIndex, logicToUiManager);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatisticsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 64
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/TestCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.LogicToUiManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.TestCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A parser for the test command, used to initiate a test session."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TestCommandParser implements Parser\u003cTestCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AnswerCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * and returns a AnswerCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(TestCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private LogicToUiManager logicToUiManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    TestCommandParser(LogicToUiManager logicToUiManager) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.logicToUiManager \u003d logicToUiManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Parses the given {@code String} of arguments for initiating a TestSession,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * and returns a AnswerCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format (eg. nonexistent index)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TestCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try { // TODO: figure out how to parse additional test settings along with the index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return new TestCommand(index, logicToUiManager);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TestCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 46
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/CardiBuddy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.UniqueFlashcardList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.TestSession;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Wraps all data at the CardiBuddy level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class CardiBuddy implements ReadOnlyCardiBuddy {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final UniqueDeckList decks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final UniqueFlashcardList flashcards;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    //private TestSession testSession;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        decks \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcards \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CardiBuddy() {}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Creates a CardiBuddy using the Decks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CardiBuddy(ReadOnlyCardiBuddy toBeCopied) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the contents of the decks list with {@code decks}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code decks} must not contain duplicate decks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.decks.setDecks(decks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the contents of the flashcard list with {@code flashcards}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setFlashcards(List\u003cCard\u003e flashcards) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.flashcards.setFlashcards(flashcards);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Resets the existing data of this {@code CardiBuddy} with {@code newData}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void resetData(ReadOnlyCardiBuddy newData) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        setDecks(newData.getDeckList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        setFlashcards(newData.getFlashcardList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //// deck-level operations"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in cardibuddy."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return decks.contains(deck);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds a deck to the cardibuddy."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The deck must not already exist in the cardibuddy."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void addDeck(Deck d) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        decks.add(d);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Starts a test for the given deck"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void startTest(TestSession ts) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the given deck {@code target} in the list with {@code editedDeck}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code target} must exist in the cardi buddy."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The deck identity of {@code editedFlashcard} must not be the same as another existing deck in the cardi buddy."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(editedDeck);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        decks.setDeck(target, editedDeck);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Removes {@code key} from this {@code CardiBuddy}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code key} must exist in the cardi buddy."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void removeDeck(Deck key) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        decks.remove(key);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //// flashcard-level operations"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if a deck with the same identity as {@code card} exists in cardibuddy."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean hasFlashcard(Card card) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return flashcards.contains(card);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds a flashcard to the cardi buddy."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The flashcard must not already exist in the cardi buddy."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void addFlashcard(Card p) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcards.add(p);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the given flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code target} must exist in the cardi buddy."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * same as another existing flashcard in the cardi buddy."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setFlashcard(Card target, Card editedFlashcard) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(editedFlashcard);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcards.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Removes {@code key} from this {@code CardiBuddy}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code key} must exist in the cardi buddy."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void removeFlashcard(Card key) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcards.remove(key);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return flashcards.asUnmodifiableObservableList().size() + \" flashcards\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cDeck\u003e getDeckList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return decks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cCard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return flashcards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof cardibuddy.model.CardiBuddy // instanceof handles nulls"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 flashcards.equals(((cardibuddy.model.CardiBuddy) other).flashcards));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return flashcards.hashCode();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 172,
      "airshhlay": 9,
      "phaebaez": 3
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.model.deck.Statistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.AnswerType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.TestResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.EmptyDeckException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Predicate\u003cDeck\u003e PREDICATE_SHOW_ALL_DECKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Predicate\u003cCard\u003e PREDICATE_SHOW_ALL_FLASHCARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the user prefs\u0027 cardibuddy file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Path getCardiBuddyFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Sets the user prefs\u0027 cardibuddy file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void setCardiBuddyFilePath(Path cardiBuddyFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Returns the CardiBuddy"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ReadOnlyCardiBuddy getCardiBuddy();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Replaces cardibuddy data with the data in {@code cardiBuddy}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void setCardiBuddy(ReadOnlyCardiBuddy cardiBuddy);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in the cardibuddy."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    boolean hasDeck(Deck deck);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Deletes the given deck."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * {@code deck} must exist in the cardibuddy."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    void deleteDeck(Deck target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds the given deck."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code deck} must not already exist in the cardibuddy."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void addDeck(Deck deck);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Adds the given deck."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * {@code deck} must not already exist in the cardibuddy."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the given deck {@code target} with {@code editedDeck}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code target} must exist in the cardibuddy."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the cardibuddy."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void setDeck(Deck target, Deck editedDeck);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if a flashcard with the same identity as {@code flashcard} exists in the cardibuddy."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    boolean hasFlashcard(Card flashcard);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Deletes the given flashcard."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The flashcard must exist in the cardibuddy."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void deleteFlashcard(Card target);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds the given flashcard."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code flashcard} must not already exist in the cardibuddy."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void addFlashcard(Card flashcard);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the given flashcard {@code target} with {@code editedFlashcard}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code target} must exist in the cardibuddy."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * be the same as another existing flashcard in the cardibuddy."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void setFlashcard(Card target, Card editedFlashcard);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TEST SESSION METHODS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Gets the number of flashcards left in the {@code testQueue}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * This method is used for the countdown."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    int getTestQueueSize();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Starts the test session with {@code deck}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param deck the deck to be tested"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    Question testDeck(Deck deck) throws EmptyDeckException;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Checks the given {@code Answer} with the current flashcard\u0027s answer in the TestSession."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    TestResult submitAnswer(String userAnswer);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Marks the user\u0027s answer as correct when it was marked wrong by the {@code TestSession}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Allows for flexibility in the user\u0027s answers."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void forceCorrect();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Gets the next question in the {@code TestSession}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    Question getNextQuestion();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Allows the user to skip the current question. Gets the next question in the test queue, if any."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    Question skipQuestion();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Clears the current {@code TestSession}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Called when the test session has ended, either when there are no more flashcards"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * to test or when the user calls quit."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void clearTestSession();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Checks if there is an ongoing {@code TestSession}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    boolean hasOngoingTestSession();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Retrieve\u0027s the current question\u0027s answer type."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    AnswerType getCurrentAnswerType();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Returns an unmodifiable view of the filtered deck list"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ObservableList\u003cDeck\u003e getFilteredDeckList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Returns an unmodifiable view of the filtered flashcard list"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ObservableList\u003cCard\u003e getFilteredFlashcardList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Updates the filter of the filtered deck list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Updates the filter of the filtered flashcard list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void updateFilteredFlashcardList(Predicate\u003cCard\u003e predicate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    boolean canUndo();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    boolean canRedo();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    void undo();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    void redo();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    void commitCardiBuddy();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns the Statistics of the Model."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 6,
      "haveaqiupill": 100,
      "airshhlay": 78,
      "phaebaez": 46
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.model.deck.Statistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.AnswerType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.TestResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.TestSession;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.AlreadyCorrectException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.EmptyDeckException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.EmptyTestQueueException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.NoOngoingTestException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.UnansweredQuestionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Represents the in-memory model of the cardibuddy data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(cardibuddy.model.ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final CardiBuddy cardiBuddy;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final FilteredList\u003cCard\u003e filteredFlashcards;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final FilteredList\u003cDeck\u003e filteredDecks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Statistics statistics;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final VersionedCardiBuddy versionedCardiBuddy;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private TestSession testSession;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Initializes a ModelManager with the given cardiBuddy and userPrefs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ModelManager(ReadOnlyCardiBuddy cardiBuddy, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireAllNonNull(cardiBuddy, userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logger.fine(\"Initializing with CardiBuddy: \" + cardiBuddy + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        versionedCardiBuddy \u003d new VersionedCardiBuddy(cardiBuddy);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.cardiBuddy \u003d new CardiBuddy(cardiBuddy);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        filteredFlashcards \u003d new FilteredList\u003cCard\u003e(this.versionedCardiBuddy.getFlashcardList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        filteredDecks \u003d new FilteredList\u003cDeck\u003e(this.versionedCardiBuddy.getDeckList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this(new CardiBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Path getCardiBuddyFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return userPrefs.getCardiBuddyFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setCardiBuddyFilePath(Path cardiBuddyFilePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(cardiBuddyFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        userPrefs.setCardiBuddyFilePath(cardiBuddyFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CardiBuddy \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ReadOnlyCardiBuddy getCardiBuddy() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return versionedCardiBuddy;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void setCardiBuddy(ReadOnlyCardiBuddy cardiBuddy) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        versionedCardiBuddy.resetData(cardiBuddy);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return versionedCardiBuddy.hasDeck(deck);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        versionedCardiBuddy.removeDeck(target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        target.getStatistics().trackDeckDeleted();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        statistics.trackDeckDeleted();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        versionedCardiBuddy.addDeck(deck);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        deck.getStatistics().trackDeckAdded();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        statistics.trackDeckAdded();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        versionedCardiBuddy.setDeck(target, editedDeck);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean hasFlashcard(Card flashcard) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return versionedCardiBuddy.hasFlashcard(flashcard);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public void deleteFlashcard(Card target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        versionedCardiBuddy.removeFlashcard(target);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        target.getDeck().getStatistics().trackCardDeleted();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        statistics.trackCardDeleted();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds Flashcard to a Deck."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param flashcard new card."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void addFlashcard(Card flashcard) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        versionedCardiBuddy.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        flashcard.getDeck().getStatistics().trackCardAdded();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        statistics.trackCardAdded();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setFlashcard(Card target, Card editedFlashcard) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        versionedCardiBuddy.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TEST SESSION METHODS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Gets the number of flashcards left in the {@code testQueue}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * This method is used for the countdown."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public int getTestQueueSize() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return testSession.getTestQueueSize();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Starts a test session // TODO see how to update the list"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param deck the deck to be tested"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Question testDeck(Deck deck) throws EmptyDeckException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession \u003d new TestSession(deck);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return testSession.getFirstQuestion();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Gets the next question in the {@code TestSession}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Question getNextQuestion() throws"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            UnansweredQuestionException,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            NoOngoingTestException,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            EmptyTestQueueException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return testSession.getNextQuestion();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new NoOngoingTestException();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new EmptyTestQueueException();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Allows the user to skip the current question. Gets the next question in the test queue, if any."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Question skipQuestion() throws NoOngoingTestException, AlreadyCorrectException, EmptyTestQueueException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return testSession.skipQuestion();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new NoOngoingTestException();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new EmptyTestQueueException();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Checks the given answer in the test session"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param userAnswer a string representation of the user\u0027s answer"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return A Result enums that represents the result of the user\u0027s answer."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TestResult submitAnswer(String userAnswer) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return testSession.submitAnswer(userAnswer);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Marks the user\u0027s answer as correct when it was marked wrong by the {@code TestSession}."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Allows for flexibility in the user\u0027s answers."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void forceCorrect() throws UnansweredQuestionException, AlreadyCorrectException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.forceCorrect();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Clears the current {@code TestSession}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Called when the test session has ended, either when there are no more flashcards"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * to test or when the user calls quit."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void clearTestSession() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (testSession \u003d\u003d null) { // if there is no test session to clear"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new NoOngoingTestException();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        testSession.getDeck().getStatistics().recordHistory(testSession);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        statistics.recordHistory(testSession);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession \u003d null;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Checks if there is an ongoing {@code TestSession}."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean hasOngoingTestSession() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return testSession !\u003d null;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Retrieve\u0027s the current question\u0027s corresponding {@code AnswerType}."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public AnswerType getCurrentAnswerType() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return testSession.getCurrentAnswerType();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Flashcard List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Deck} backed by the internal list of"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code versionedCardiBuddy}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return filteredDecks;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Flashcard} backed by the internal list of"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code versionedCardiBuddy}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return filteredFlashcards;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        filteredDecks.setPredicate(predicate);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void updateFilteredFlashcardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        filteredFlashcards.setPredicate(predicate);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!(obj instanceof cardibuddy.model.ModelManager)) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardibuddy.model.ModelManager other \u003d (cardibuddy.model.ModelManager) obj;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return versionedCardiBuddy.equals(other.versionedCardiBuddy)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 filteredDecks.equals(other.filteredDecks)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 filteredFlashcards.equals(other.filteredFlashcards);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return versionedCardiBuddy.canUndo();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return versionedCardiBuddy.canRedo();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        versionedCardiBuddy.undo();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        versionedCardiBuddy.redo();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public void commitCardiBuddy() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        versionedCardiBuddy.commit();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 21,
      "haveaqiupill": 164,
      "airshhlay": 124,
      "phaebaez": 57
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/ReadOnlyCardiBuddy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Unmodifiable view of a CardiBuddy object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public interface ReadOnlyCardiBuddy {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns an unmodifiable view of the decks list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * This list will not contain any duplicate decks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ObservableList\u003cDeck\u003e getDeckList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns an unmodifiable view of the flashcards list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * This list will not contain any duplicate flashcards."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ObservableList\u003cCard\u003e getFlashcardList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 24
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Path getCardiBuddyFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Path cardibuddyFilePath \u003d Paths.get(\"data\" , \"cardibuddy.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        setCardiBuddyFilePath(newUserPrefs.getCardiBuddyFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Path getCardiBuddyFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return cardibuddyFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setCardiBuddyFilePath(Path cardibuddyFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(cardibuddyFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.cardibuddyFilePath \u003d cardibuddyFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!(other instanceof cardibuddy.model.UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardibuddy.model.UserPrefs o \u003d (cardibuddy.model.UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 cardibuddyFilePath.equals(o.cardibuddyFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return Objects.hash(guiSettings, cardibuddyFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + cardibuddyFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 14,
      "-": 73
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/VersionedCardiBuddy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * {@code CardiBuddy} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class VersionedCardiBuddy extends CardiBuddy {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final List\u003cReadOnlyCardiBuddy\u003e cardiBuddyStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public VersionedCardiBuddy(ReadOnlyCardiBuddy initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        cardiBuddyStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        cardiBuddyStateList.add(new CardiBuddy(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Saves a copy of the current {@code CardiBuddy} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        cardiBuddyStateList.add(new CardiBuddy(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        cardiBuddyStateList.subList(currentStatePointer + 1, cardiBuddyStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Restores the CardiBuddy to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        resetData(cardiBuddyStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Restores the CardiBuddy to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        resetData(cardiBuddyStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Returns true if {@code undo()} has CardiBuddy states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Returns true if {@code redo()} has CardiBuddy states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return currentStatePointer \u003c cardiBuddyStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (!(other instanceof VersionedCardiBuddy)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        VersionedCardiBuddy otherVersionedCardiBuddy \u003d (VersionedCardiBuddy) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return super.equals(otherVersionedCardiBuddy)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                \u0026\u0026 cardiBuddyStateList.equals(otherVersionedCardiBuddy.cardiBuddyStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedCardiBuddy.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "phaebaez": 109
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/Deck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.UniqueFlashcardList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Represents a Deck in the cardibuddy application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class Deck {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private List\u003cCard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private FilteredList\u003cCard\u003e filteredFlashcards;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Deck.class.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Predicate predicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Deck(Title title, Set\u003cTag\u003e tags, List\u003cCard\u003e flashcards) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireAllNonNull(title, tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.filteredFlashcards \u003d new FilteredList\u003c\u003e(FXCollections.observableList(flashcards));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        logger.info(\"Created Deck\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Deck(Title title, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireAllNonNull(title, tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        logger.info(\"Created Deck\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public List\u003cCard\u003e getFlashcards() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return Collections.unmodifiableList(flashcards);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Delete card from the flashcards and filteredFlashcards list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param card to be deleted."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void deleteCard(Card card) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcards.remove(card);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        filteredFlashcards \u003d new FilteredList\u003c\u003e(FXCollections.observableList(flashcards));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        filteredFlashcards.setPredicate(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds a Card to a Deck."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param card"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return the set of Cards from the Deck."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public List\u003cCard\u003e addCard(Card card) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcards.add(card);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        filteredFlashcards \u003d new FilteredList\u003c\u003e(FXCollections.observableList(flashcards));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return Collections.unmodifiableList(flashcards);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if the Title of the Deck exists."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param otherDeck the deck being compared to."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if the Deck already exists and false otherwise."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean isSameDeck(Deck otherDeck) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (otherDeck \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return otherDeck !\u003d null"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 otherDeck.getTitle().equals(getTitle());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cCard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        UniqueFlashcardList flashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcardList.setFlashcards(flashcards);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return flashcardList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Flashcard} backed by the internal list of"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code versionedCardiBuddy}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return filteredFlashcards;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Updates the filtered flashcards in a deck."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param predicate SearchCardPredicate or FilterCardPredicate."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void updateFilteredFlashcardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        filteredFlashcards.setPredicate(predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Check if deck contains the flashcard to prevent duplicates."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param card new card to be added."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if card\u0027s question already exists."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean hasFlashcard(Card card) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Question cardQuestion \u003d card.getQuestion();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (Card c : flashcards) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (cardQuestion.equals(c.getQuestion())) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                System.out.println(c.getQuestion().toString());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!(other instanceof Deck)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck otherDeck \u003d (Deck) other;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return otherDeck.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 otherDeck.getFlashcards().equals(getFlashcards())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 otherDeck.getTags().equals(getTags());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return Objects.hash(title, flashcards, tags);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        builder.append(getTitle()).append(\"\\nTags: \");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!getTags().isEmpty()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            builder.append(\"None\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        builder.append(\"\\nNo. of Cards: \").append(flashcards.size());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 5,
      "haveaqiupill": 168,
      "phaebaez": 24
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/FilterDeckKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Tests that a {@code Deck or Card}\u0027s {@code Tags} matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class FilterDeckKeywordsPredicate implements Predicate\u003cDeck\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public FilterDeckKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Evaluates this predicate on the given argument."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param deck the input argument"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return {@code true} if the input argument matches the predicate,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * otherwise {@code false}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean test(Deck deck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        boolean anyMatch \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (checkAnd(keywords)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            anyMatch \u003d searchAnd(deck, keywords);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            anyMatch \u003d searchOr(deck, keywords);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return anyMatch;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if deck contains either of the keywords."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param keywords list of keywords from FilterCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if deck\u0027s title or tag contains any of the keywords."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean searchOr(Deck deck, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        boolean anyMatch \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (Tag t : deck.getTags()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (!anyMatch) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                anyMatch \u003d new ArrayList\u003c\u003e(keywords).stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(t.toString(), \"[\" + keyword + \"]\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return anyMatch;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if deck contains all of the keywords with \u0026."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param keywords list of keywords from FilterCommand."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if deck\u0027s title or tag contains all of the keywords with \u0026."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean searchAnd(Deck deck, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        boolean anyMatch \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cList\u003cString\u003e\u003e filteredKeywords \u003d filterKeywords(keywords);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (List\u003cString\u003e keywordList : filteredKeywords) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            boolean prevMatch \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            for (String keyword : keywordList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                if (!anyMatch \u0026\u0026 prevMatch) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    prevMatch \u003d new ArrayList\u003c\u003e(deck.getTags()).stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                            .anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(tag.toString(), \"[\" + keyword + \"]\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (prevMatch) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                anyMatch \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return anyMatch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Filters keywords to remove \u0026 symbol and to group keywords together as List objects."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param keywords list of keywords from FilterCommand."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return a List of Lists of keywords that are grouped accordingly."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private List\u003cList\u003cString\u003e\u003e filterKeywords(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cList\u003cString\u003e\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (keywords.get(i).equals(\"\u0026\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                List\u003cString\u003e prev \u003d newList.get(newList.size() - 1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                prev.add(keywords.get(i + 1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                List\u003cString\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                temp.add(keywords.get(i));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                newList.add(temp);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if the symbol \u0026 is present in the FilterCommand keywords."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param keywords list of keywords to be searched"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if \u0026 is present"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean checkAnd(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (String keyword : keywords) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (keyword.equals(\"\u0026\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof FilterDeckKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 keywords.equals(((FilterDeckKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 126
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/SearchDeckKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Tests that a {@code Deck or Card}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class SearchDeckKeywordsPredicate implements Predicate\u003cDeck\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public SearchDeckKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Evaluates this predicate on the given argument."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param deck the input argument"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return {@code true} if the input argument matches the predicate,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * otherwise {@code false}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean test(Deck deck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        boolean anyMatch \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (checkAnd(keywords)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            anyMatch \u003d searchAnd(deck, keywords);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            anyMatch \u003d searchOr(deck, keywords);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return anyMatch;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if deck contains either of the keywords."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param keywords list of keywords from SearchDeckCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if deck\u0027s title contains any of the keywords."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean searchOr(Deck deck, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        boolean anyMatch \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        anyMatch \u003d new ArrayList\u003c\u003e(keywords).stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(deck.getTitle().toString(), keyword));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return anyMatch;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if deck contains all of the keywords with \u0026."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param keywords list of keywords from SearchDeckCommand."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if deck\u0027s title contains all of the keywords with \u0026."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean searchAnd(Deck deck, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        boolean anyMatch \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cList\u003cString\u003e\u003e filteredKeywords \u003d filterKeywords(keywords);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (List\u003cString\u003e keywordList : filteredKeywords) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            boolean prevMatch \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            for (String keyword : keywordList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                if (!anyMatch \u0026\u0026 prevMatch) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    prevMatch \u003d Arrays.stream(deck.getTitle().toString().split(\" \"))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                            .anyMatch(titleWord -\u003e StringUtil.containsWordIgnoreCase(titleWord, keyword));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (prevMatch) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                anyMatch \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return anyMatch;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Filters keywords to remove \u0026 symbol and to group keywords together as List objects."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param keywords list of keywords from SearchDeckCommand."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return a List of Lists of keywords that are grouped accordingly."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private List\u003cList\u003cString\u003e\u003e filterKeywords(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cList\u003cString\u003e\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (keywords.get(i).equals(\"\u0026\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                List\u003cString\u003e prev \u003d newList.get(newList.size() - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                prev.add(keywords.get(i + 1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                List\u003cString\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                temp.add(keywords.get(i));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                newList.add(temp);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if the symbol \u0026 is present in the SearchDeckCommand keywords."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param keywords list of keywords to be searched"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if \u0026 is present"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean checkAnd(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (String keyword : keywords) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (keyword.equals(\"\u0026\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof SearchDeckKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 keywords.equals(((SearchDeckKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 120
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/Statistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package cardibuddy.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.model.testsession.TestResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.model.testsession.TestSession;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Represents a Statistics report in the cardibuddy application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final List\u003cTestSession\u003e testHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Statistics.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private int cardsAdded;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private int cardsDeleted;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private int decksAdded;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private int decksDeleted;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private int timesPlayed;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private int cardsPlayed;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private double avgCorrectPercentage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private double avgTriesToGetCorrect;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    // Keeps a list of correctPercentage for every recorded Deck"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private HashMap\u003cDeck, List\u003cDouble\u003e\u003e correctPercentageHistory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Initialize everything to 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        cardsAdded \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        cardsDeleted \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        decksAdded \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        decksDeleted \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        timesPlayed \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        cardsPlayed \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        avgCorrectPercentage \u003d 0.0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        avgTriesToGetCorrect \u003d 0.0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        correctPercentageHistory \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        logger.info(\"Created Statistics\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    // Edit commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void trackCardAdded() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        cardsAdded++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void trackCardDeleted() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        cardsDeleted++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void trackDeckAdded() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        decksAdded++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void trackDeckDeleted() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        decksDeleted++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Stores the history of past TestSessions and increment both timesPlayed and cardsPlayed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @param testSession history of testSession to record"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void recordHistory(TestSession testSession) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        HashMap\u003cCard, TestResult\u003e testResults \u003d testSession.getTestResults();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        int totalTries \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        int numCorrect \u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        int noOfQuestions \u003d testResults.size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (Map.Entry\u003cCard, TestResult\u003e result : testResults.entrySet()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            cardsPlayed++;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            totalTries +\u003d result.getValue().getNumTries();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            if (result.getValue().getNumTries() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                numCorrect++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            // change correctPercentage and avgTriesToGetCorrect"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        double triesToGetCorrect \u003d ((double) totalTries) / noOfQuestions;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        double correctPercentage \u003d ((double) numCorrect) / noOfQuestions;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        avgTriesToGetCorrect \u003d (avgTriesToGetCorrect * timesPlayed + triesToGetCorrect) / (timesPlayed + 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        avgCorrectPercentage \u003d (avgCorrectPercentage * timesPlayed + correctPercentage) / (timesPlayed + 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (correctPercentageHistory.get(testSession.getDeck()) \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            correctPercentageHistory.put(testSession.getDeck(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        correctPercentageHistory.get(testSession.getDeck()).add(correctPercentage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        timesPlayed++;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        testHistory.add(testSession);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    // Get commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public int getCardsAdded() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return cardsAdded;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public int getCardsDeleted() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return cardsDeleted;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public int getDecksAdded() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return decksAdded;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public int getDecksDeleted() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return decksDeleted;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public int getCardsPlayed() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return cardsPlayed;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public int getTimesPlayed() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return timesPlayed;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public double getAvgCorrectPercentage() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return avgCorrectPercentage;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public double getAvgTriesToGetCorrect() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return avgTriesToGetCorrect;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public HashMap\u003cDeck, List\u003cDouble\u003e\u003e getCorrectPercentageHistory() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return correctPercentageHistory;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Statistics getSessionStatistic(int index) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        Statistics sessionStatistics \u003d new Statistics();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        sessionStatistics.recordHistory(testHistory.get(index));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return sessionStatistics;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 143,
      "haveaqiupill": 3
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Deck Title class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \"Titles should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private String titleString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Title(String titleString) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(titleString);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        checkArgument(isValidTitle(titleString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.titleString \u003d titleString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return titleString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return (other instanceof Title) \u0026\u0026 titleString.equals(other.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 44
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/UniqueDeckList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * A list of decks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * A deck is considered unique by comparing using {@code Deck#isSameDeck(Deck)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * decks uses Deck#isSameDeck(Deck) for equality so as to ensure that the deck being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * unique in terms of identity in the UniqueDeckList. However, the removal of a deck uses Deck#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * as to ensure that the deck with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @see Deck#isSameDeck(Deck)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class UniqueDeckList implements Iterable\u003cDeck\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final ObservableList\u003cDeck\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final ObservableList\u003cDeck\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if the list contains an equivalent deck as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean contains(Deck toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDeck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds a deck to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The deck must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void add(Deck toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the deck {@code target} in the list with {@code editedDeck}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireAllNonNull(target, editedDeck);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!target.isSameDeck(editedDeck) \u0026\u0026 contains(editedDeck)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        internalList.set(index, editedDeck);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Removes the equivalent deck from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The deck must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void remove(Deck toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDecks(UniqueDeckList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the contents of this list with {@code decks}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code decks} must not contain duplicate decks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireAllNonNull(decks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!decksAreUnique(decks)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        internalList.setAll(decks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cDeck\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Iterator\u003cDeck\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof UniqueDeckList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDeckList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if {@code decks} contains only unique decks."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean decksAreUnique(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            for (int j \u003d i + 1; j \u003c decks.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                if (decks.get(i).isSameDeck(decks.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 137
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/exceptions/DeckCannotBeCardException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Signals that the operation will result in the creation of an object that functions as a deck and card"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " *     simultanerously."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class DeckCannotBeCardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public DeckCannotBeCardException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "phaebaez": 11
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/exceptions/DeckNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Signals that the operation is unable to find the specified deck."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DeckNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 6
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/exceptions/DuplicateDeckException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Signals that the operation will result in duplicate Decks (Decks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DuplicateDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DuplicateDeckException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super(\"Operation would result in duplicate decks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 11
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/exceptions/InvalidDeckException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Signals that the operation will result in the creation of a deck with a question and/or an answer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class InvalidDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public InvalidDeckException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "phaebaez": 13
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/exceptions/NotInDeckException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Signals that the operation can only be done in a deck, and the user is currently not in a deck."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class NotInDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public NotInDeckException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "phaebaez": 10
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/exceptions/WrongDeckException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Signals that the deck the operation is being executed in is not the same as the deck that the user has inputted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class WrongDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public WrongDeckException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "phaebaez": 10
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/Answer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.model.flashcard.ShortAnswer.VALIDATION_REGEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * API of Answer Component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public interface Answer {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    String MESSAGE_CONSTRAINTS \u003d \"A question should have an answer.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    boolean isValid(String test);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    boolean checkAnswer(String toCheck);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 8,
      "haveaqiupill": 4,
      "phaebaez": 7
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/Card.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * General form of a Card to be inherited into Flashcard and Imagecard."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public abstract class Card {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Deck deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Card(Deck deck, Question question, Answer answer, String path) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Deck getDeck() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.deck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.answer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.path;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean checkAnswer(String toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return answer.checkAnswer(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean isSameFlashcard(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.equals(other);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public abstract CardType getCardType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!(other instanceof Card)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return ((Card) other).getQuestion().equals(getQuestion());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public abstract int hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 65
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/CardContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Tests that a {@code Flashcards}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class CardContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CardContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean test(Flashcard card) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(card.getQuestion().toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof CardContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 keywords.equals(((CardContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 8,
      "-": 22,
      "phaebaez": 1
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/CardType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Type of card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public enum CardType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    FLASHCARD,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    IMAGECARD"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 9
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/Flashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Represents a Flashcard in CardiBuddy."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class Flashcard extends Card {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Deck deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Flashcard(Deck deck, Question question, Answer answer, String path) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super(deck, question, answer, \"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.path \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Deck getDeck() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.deck;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.answer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean checkAnswer(String toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return answer.checkAnswer(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if the flashcards are of the same identity."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param otherCard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if they are the same and false otherwise."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean isSameFlashcard(Flashcard otherCard) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (otherCard \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return otherCard !\u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 otherCard.getQuestion().equals(getQuestion());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CardType getCardType() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return CardType.FLASHCARD;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return Objects.hash(question, answer);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        builder.append(\"Q: \")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .append(getQuestion())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .append(\"\\nA: \")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .append(getAnswer());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 40,
      "haveaqiupill": 33
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/Imagecard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Card with an image."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class Imagecard extends Card {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Deck deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Imagecard(Deck deck, Question question, Answer answer, String path) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super(deck, question, answer, path);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CardType getCardType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return CardType.IMAGECARD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Deck getDeck() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.deck;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.question;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.answer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean checkAnswer(String toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return answer.checkAnswer(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        builder.append(\"\\nQ: \")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .append(getQuestion())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .append(\"\\nA: \")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .append(getAnswer())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .append(\"\\nFile Path: \")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .append(getPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 59
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/McqAnswer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static cardibuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * McqAnswer class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class McqAnswer implements Answer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"MCQ answers should be a single letter corresponding to answer.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private String correctAnswer; // should be \"a\" or \"b\" or \"c\" or ...."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public McqAnswer(String correctAnswer) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(correctAnswer);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        checkArgument(isValid(correctAnswer), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.correctAnswer \u003d correctAnswer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if test length is valid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if ..."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean isValid(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (test.length() !\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (getNumberForChar(test.charAt(0)) \u003d\u003d -1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Javadocs to pass checkstyle."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param toCheck"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if answer is valid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean checkAnswer(String toCheck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!isValid(toCheck)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return toCheck.equals(correctAnswer);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Shows the list of possible answers"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @return a string of all possible answers"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return correctAnswer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    // returns the corresponding number for alphabetical letters, eg. a -\u003e 1; b -\u003e 2; c -\u003e 3; ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private int getNumberForChar(char c) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        int num \u003d ((int) c) - 64;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return num \u003e 0 \u0026\u0026 num \u003c 27 ? num : -1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    // returns the corresponding alphabetical letter for numbers"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private char getCharForNumber(int i) { // 1 -\u003e a; 2 -\u003e b; 3 -\u003e c, ..."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return i \u003e 0 \u0026\u0026 i \u003c 27 ? (char) (i + 64) : null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!(other instanceof McqAnswer)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McqAnswer o \u003d (McqAnswer) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return correctAnswer.equals(o.correctAnswer);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 69,
      "haveaqiupill": 13
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/Question.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.model.tag.Tag.VALIDATION_REGEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Question class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Question should not be left blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private String questionString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        this.questionString \u003d question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return questionString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return (other instanceof Question) \u0026\u0026 questionString.equals(other.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return questionString.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 22,
      "haveaqiupill": 9,
      "phaebaez": 14
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/SearchCardKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Tests that a {@code Card}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class SearchCardKeywordsPredicate implements Predicate\u003cCard\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public SearchCardKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Evaluates this predicate on the given argument."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param card the input argument"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return {@code true} if the input argument matches the predicate,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * otherwise {@code false}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean test(Card card) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        boolean anyMatch \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (checkAnd(keywords)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            anyMatch \u003d searchAnd(card, keywords);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            anyMatch \u003d searchOr(card, keywords);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return anyMatch;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if card contains either of the keywords."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param keywords list of keywords from SearchCardCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if card\u0027s question contains any of the keywords."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean searchOr(Card card, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        boolean anyMatch \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        anyMatch \u003d new ArrayList\u003c\u003e(keywords).stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(card.getQuestion().toString(), keyword));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return anyMatch;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if card contains all of the keywords with \u0026."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param keywords list of keywords from SearchCardCommand."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if card\u0027s title contains all of the keywords with \u0026."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean searchAnd(Card card, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        boolean anyMatch \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cList\u003cString\u003e\u003e filteredKeywords \u003d filterKeywords(keywords);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (List\u003cString\u003e keywordList : filteredKeywords) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            boolean prevMatch \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            for (String keyword : keywordList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                if (!anyMatch \u0026\u0026 prevMatch) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    prevMatch \u003d Arrays.stream(card.getQuestion().toString().split(\" \"))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                            .anyMatch(question -\u003e StringUtil.containsWordIgnoreCase(question, keyword));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (prevMatch) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                anyMatch \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return anyMatch;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Filters keywords to remove \u0026 symbol and to group keywords together as List objects."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param keywords list of keywords from SearchDeckCommand."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return a List of Lists of keywords that are grouped accordingly."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private List\u003cList\u003cString\u003e\u003e filterKeywords(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cList\u003cString\u003e\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (keywords.get(i).equals(\"\u0026\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                List\u003cString\u003e prev \u003d newList.get(newList.size() - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                prev.add(keywords.get(i + 1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                List\u003cString\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                temp.add(keywords.get(i));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                newList.add(temp);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if the symbol \u0026 is present in the SearchDeckCommand keywords."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param keywords list of keywords to be searched"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if \u0026 is present"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean checkAnd(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (String keyword : keywords) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (keyword.equals(\"\u0026\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof SearchCardKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 keywords.equals(((SearchCardKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 121
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/ShortAnswer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static cardibuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Short Answer class for Flashcard."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class ShortAnswer implements Answer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Short Answer should not be left blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private String correctAnswer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public ShortAnswer(String correctAnswer) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(correctAnswer);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        checkArgument(isValid(correctAnswer), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.correctAnswer \u003d correctAnswer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if given answer is a string and is valid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @return true if it is not blank"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean isValid(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return test.matches(VALIDATION_REGEX); // as long as its a string its true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if answer matches stored answer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param toCheck"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if the string is equal."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean checkAnswer(String toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!isValid(toCheck)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return toCheck.equals(correctAnswer);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return correctAnswer;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return (other instanceof Answer) \u0026\u0026 correctAnswer.equals(other.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 41,
      "haveaqiupill": 15,
      "phaebaez": 1
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/TfAnswer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * True False answer class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class TfAnswer implements Answer {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"True / False answers should either be \\\"T\\\" or \\\"F\\\"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private String correctAnswer; // should be \"T\" or \"F\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public TfAnswer(String correctAnswer) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(correctAnswer);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!isValid(correctAnswer)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.correctAnswer \u003d correctAnswer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean isValid(String test) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return test.equals(\"T\") || test.equals(\"F\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if answer is equals to stored answer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param toCheck"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if answer is equals."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean checkAnswer(String toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!isValid(toCheck)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return toCheck.equals(correctAnswer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return correctAnswer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return (other instanceof Answer) \u0026\u0026 correctAnswer.equals(other.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 42,
      "haveaqiupill": 11
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/UniqueFlashcardList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * A list of flashcards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * A flashcard is considered unique by comparing using {@code Flashcard#isSameFlashcard(Flashcard)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * As such, adding and updating of flashcards uses Flashcard#isSameFlashcard(Flashcard)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * for equality so as to ensure that the flashcard being added or updated is unique in terms of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * identity in the UniqueFlashcardList. However, the removal of a flashcard uses Flashcard#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * as to ensure that the flashcard with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @see Card#isSameFlashcard(Object) (Flashcard)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class UniqueFlashcardList implements Iterable\u003cCard\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final ObservableList\u003cCard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final ObservableList\u003cCard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean contains(Card toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFlashcard);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds a flashcard to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The flashcard must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void add(Card toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The person identity of {@code editedFlashcard} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setFlashcard(Card target, Card editedFlashcard) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!target.isSameFlashcard(editedFlashcard) \u0026\u0026 contains(editedFlashcard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        internalList.set(index, editedFlashcard);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void remove(Card toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setFlashcards(UniqueFlashcardList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the contents of this list with {@code flashcards}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setFlashcards(List\u003cCard\u003e flashcards) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireAllNonNull(flashcards);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!flashcardsAreUnique(flashcards)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        internalList.setAll(flashcards);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cCard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Iterator\u003cCard\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof UniqueFlashcardList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueFlashcardList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if {@code flashcards} contains only unique flashcards."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean flashcardsAreUnique(List\u003cCard\u003e flashcards) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcards.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            for (int j \u003d i + 1; j \u003c flashcards.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                if (flashcards.get(i).isSameFlashcard(flashcards.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 139
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/exceptions/DuplicateFlashcardException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Signals that the operation will result in duplicate Flashcards (Flashcards are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * the same question and type). Flashcards with the same question may not be duplicates if there types are different."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DuplicateFlashcardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DuplicateFlashcardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super(\"Operation would result in duplicate flashcards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 9,
      "phaebaez": 2
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/exceptions/FlashcardNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Signals that the operation is unable to find the specified card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class FlashcardNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 6
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/exceptions/InvalidFlashcardException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Signals that the operation will result in the creation of a flashcard with missing/wrong fields."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class InvalidFlashcardException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public InvalidFlashcardException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "phaebaez": 10
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Tags for Decks and Cards."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 50
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/testsession/AnswerType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * An enums class to represent the different {@code Answer} subclasses, for display to the user during  a test session."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public enum AnswerType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    TRUE_FALSE(\"(True-False question, answer with \u0027T\u0027 or \u0027F\u0027)\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    MCQ(\"(MCQ question, answer with \u0027A\u0027, \u0027B\u0027, \u0027C\u0027 or \u0027D\u0027)\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    SHORT_ANSWER(\"(Short answer question)\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private AnswerType(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 21
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/testsession/Result.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Enumeration for Results for testing feature."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public enum Result {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    CORRECT(\"Correct!\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    WRONG(\"You got it wrong!\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    SKIPPED(\"You skipped this question.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String resultString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    Result(String resultString) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.resultString \u003d resultString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return resultString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 17,
      "haveaqiupill": 3
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/testsession/TestResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Answer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.AlreadyCorrectException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Test Result class. Stores the user\u0027s answer,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * number of tries user has made for that particular test and the Result (CORRECT or WRONG)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TestResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    // test response strings"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String CORRECT_STRING \u003d \"Correct! The answer is %s.\\nType /n to go to the next question.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String WRONG_STRING \u003d \"Wrong! The answer is %s.\\nType /n to go to the next question.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String END_STRING \u003d \"Test complete!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TestResult.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Answer flashcardAnswer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //TODO: may remove this as the flashcard is already stored as"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //the key in the hashmap, so there is no need to store it again"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String userAnswer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Result result;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private int numTries;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Constructor for TestResult."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Automatically computes the result based on the given flashcardAnswer and the given userAnswer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param flashcardAnswer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param userAnswer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TestResult(Answer flashcardAnswer, String userAnswer) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.flashcardAnswer \u003d flashcardAnswer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.userAnswer \u003d userAnswer;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.numTries \u003d 1; // when first created, numTries \u003d 1 by default"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        result \u003d this.computeResult();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        logger.info(\"Result computed.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Constructor for TestResult."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Called if the user skips the question"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * when they haven\u0027t answered it before in the Test Session."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TestResult(Result skippedResult) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.result \u003d skippedResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.numTries \u003d 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Constructor for TestResult."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Called if the user has answered the question previously but now chooses to skip it."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Records down the number of tries (including the try that the user skips)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * the user has made for that question before skipping it."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TestResult(TestResult prevTestResult) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.result \u003d Result.SKIPPED;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.numTries \u003d prevTestResult.getNumTries();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Result of test session."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return Result object (idk what to write here :( )."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Result computeResult() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (flashcardAnswer.toString().equals(userAnswer)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return Result.CORRECT;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return Result.WRONG;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Changes the {@code result} to correct."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void forceCorrect() throws AlreadyCorrectException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (result \u003d\u003d Result.CORRECT) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new AlreadyCorrectException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        result \u003d Result.CORRECT;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * A getter method for numTries"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return the number of tries for this particular question"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public int getNumTries() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return numTries;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void setNumTries(int numTries) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.numTries \u003d numTries;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        logger.info(\"Increasing the recorded number of tries.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Result getResult() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void setResult(Result newResult) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.result \u003d newResult;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String getUserAnswer() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return userAnswer;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Answer getFlashcardAnswer() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return flashcardAnswer;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 104,
      "haveaqiupill": 14
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/testsession/TestSession.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.McqAnswer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.TfAnswer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.AlreadyCorrectException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.EmptyDeckException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.UnansweredQuestionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Test Session class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * The test session works as follows:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * 1. User initiates a test session by the command \"test [DECK INDEX]\"\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * 2. TestParser parsers this command, and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * TestSession object testSession is created with the given deck\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * (in future implementations, user can also set test settings,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * which can mean this class will be a parent class for different kinds of tests)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * 3. testSession calls nextFlashcard(), which returns the next flashcard in the queue.\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * 4. User inputs their answer to the question, and the parser parses it into an Answer object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * testSession calls test() and creates a new TestResult object that stores the user\u0027s Answer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * and the calculated Result by comparing the user\u0027s answer with the Flashcard\u0027s.\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * 5. testSession returns a {@code TestResult} object.\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * 6. User presses next."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * (Note in future implementations, user can use force correct"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * to first mark the flashcard as correct, before going to the next question)\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * 7. testSession calls nextFlashcard(), and displays the next flashcard to the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TestSession {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Deck deck;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Card current;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private boolean hasAnswered;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    // public Statistic statistics; // for recording statistics"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    // space to set deck settings"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    // hashmap to store the user\u0027s answer history"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private HashMap\u003cCard, TestResult\u003e testResults;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    // test queue"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private LinkedList\u003cCard\u003e testQueue;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TestSession.class.getName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Constructor for test session. Initiates the test session."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param deck the deck that is being tested"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TestSession(Deck deck) throws EmptyDeckException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // initialise variables"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testQueue \u003d new LinkedList\u003c\u003e(deck.getFlashcardList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testResults \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (deck.getFlashcardList().isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new EmptyDeckException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        logger.info(\"Started a test session.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Called when the test session is first started."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return the first question in the {@code testQueue}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Question getFirstQuestion() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        current \u003d testQueue.removeFirst();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        hasAnswered \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        logger.info(\"Displayed first question.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return current.getQuestion();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Moves on to the next flashcard in the queue, called when the user inputs the command for \u0027next\u0027.\u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Sets the {@code current} flashcard to this next flashcard.\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Checks to see if the card should be added to the back of the queue again. (Prioritising)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return the {@code Question} for the next flashcard."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Question getNextQuestion() throws UnansweredQuestionException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (!hasAnswered) { // cannot go to the next question without answering the question"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new UnansweredQuestionException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        current \u003d testQueue.removeFirst();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        hasAnswered \u003d false; // reset the boolean as the user has not answered this new question"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        logger.info(\"Displayed the next question.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return current.getQuestion();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Skips this question by removing the question from the testQueue without marking it."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Updates the TestResult by incrementing the variable {@code timesSkipped}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Question skipQuestion() throws AlreadyCorrectException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (testResults.containsKey(current)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            // if the user has already answered this question before, update the result in the testResults hashmap"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            TestResult prevTestResult \u003d testResults.get(current);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            if (prevTestResult.getResult() \u003d\u003d Result.CORRECT) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                // user should not be allowed to skip the question if they already got it correct"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                throw new AlreadyCorrectException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            TestResult newTestResult \u003d new TestResult(prevTestResult);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            // call this other TestResult constructor to remember the number of attempts"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            testResults.put(current, newTestResult);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            testResults.put(current, new TestResult(Result.SKIPPED));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (hasAnswered) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            testQueue.removeLast(); // remove the flashcard that was set to be retested"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            logger.info(\"This flashcard removed from the back of the test queue (not being retested again).\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        current \u003d testQueue.removeFirst();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        hasAnswered \u003d false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        logger.info(\"Skipped the question.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return current.getQuestion();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Shows the answer for the {@code current} flashcard."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assert !testQueue.isEmpty() \u0026\u0026 current !\u003d null;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return current.getAnswer();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Gets the number of flashcards left in the {@code testQueue}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * This method is used for the countdown."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public int getTestQueueSize() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return testQueue.size();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public LinkedList\u003cCard\u003e getTestQueue() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return testQueue;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Performs the force correct option."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Allows the user to manually mark their answer as correct, if it was initially marked wrong by {@code TestResult}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Force correct should be performed before the user gets the next question."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void forceCorrect() throws UnansweredQuestionException, AlreadyCorrectException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (!hasAnswered) { // cannot force correct a question you have not even answered"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            logger.throwing(TestSession.class.getName(),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    TestSession.class.getMethods()[6].getName(), new UnansweredQuestionException());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new UnansweredQuestionException();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testQueue.removeLast(); // reverse the prioritisation"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testResults.get(current).forceCorrect(); // call TestResult\u0027s forceCorrect method"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Takes the user\u0027s answer for the current flashcard, and tests it against the current flashcard."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * If the user got the answer wrong, the current flashcard is automatically added to the back of the test queue."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param userAnswer the String representation of the user\u0027s answer"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return the TestResult of the test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TestResult submitAnswer(String userAnswer) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // compare the userAnswer, and get the result of the test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestResult testResult \u003d new TestResult(current.getAnswer(), userAnswer);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // if flashcard was already tested before, update the number of tries."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // There no need to update the number of tries if this is the first time testing the flashcard."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // By default, numTries is set to 1."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (testResults.containsKey(current)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            TestResult prevResult \u003d testResults.get(current);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            int numTries \u003d prevResult.getNumTries();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            testResult.setNumTries(numTries + 1); // increase numTries by 1"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            logger.info(\"Submitting answer for a previously tested flashcard.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testResults.put(current, testResult); // store the result"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // add the current flashcard back into the test queue"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (testResult.getResult() \u003d\u003d Result.WRONG) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            testQueue.addLast(current);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            logger.info(\"Answer is wrong, appending to back of test queue.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        logger.info(\"Submitted answer. Returning the result.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        hasAnswered \u003d true; // note down that the user has answered the question"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return testResult;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Returns the session\u0027s results."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @return a Hashmap of TestResults corresponding to each question"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public HashMap\u003cCard, TestResult\u003e getTestResults() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return testResults;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Deck getDeck() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Returns the {@code AnswerType} of the current flashcard, based on its Answer class."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public AnswerType getCurrentAnswerType() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Answer answer \u003d current.getAnswer();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (answer instanceof TfAnswer) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return AnswerType.TRUE_FALSE;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } else if (answer instanceof McqAnswer) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return AnswerType.MCQ;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return AnswerType.SHORT_ANSWER;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return this \u003d\u003d other"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                || (other instanceof TestSession)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u0026\u0026 this.deck.equals(((TestSession) other).deck)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u0026\u0026 this.testResults.equals(((TestSession) other).testResults);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 11,
      "airshhlay": 210,
      "haveaqiupill": 12
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/testsession/exceptions/AlreadyCorrectException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * An exception thrown when the user attempts to force correct an answer that is already correct."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class AlreadyCorrectException extends UnsupportedOperationException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 7
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/testsession/exceptions/EmptyDeckException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Test Exception (add more details)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class EmptyDeckException extends NoSuchElementException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public EmptyDeckException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(Messages.MESSAGE_EMPTY_DECK);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 14
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/testsession/exceptions/EmptyTestQueueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * An exception for TestSession."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Thrown when trying to access a question from the TestSession,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * when the {@code testQueue} is already empty."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class EmptyTestQueueException extends NoSuchElementException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 11
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/testsession/exceptions/NoOngoingTestException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Called when trying to access a TestSession that is not ongoing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class NoOngoingTestException extends NullPointerException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public NoOngoingTestException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 9
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/testsession/exceptions/UnansweredQuestionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * An exception thrown when the user attempts to force correct their answer when they have not submitted an answer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class UnansweredQuestionException extends UnsupportedOperationException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public UnansweredQuestionException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 10
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.CardiBuddy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.ShortAnswer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static Deck[] getSampleDecks() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Deck A"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Set\u003cTag\u003e tagsA \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        tagsA.add(new Tag(\"Compulsory\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        tagsA.add(new Tag(\"Hard\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck deckA \u003d new Deck(new Title(\"CS2103\"), tagsA);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Flashcard cardA \u003d new Flashcard(deckA,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                new Question(\"What does UML stand for?\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                new ShortAnswer(\"Unified Modelling Language\"), \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Flashcard cardB \u003d new Flashcard(deckA,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                new Question(\"As per the KISS principle, should one always prefer the simpler solution over more\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        + \" clever solutions?\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                new ShortAnswer(\"False\"), \"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Flashcard cardC \u003d new Flashcard(deckA,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                new Question(\"Do non-functional requirements specify the constraints under which system is developed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        + \" and operated?\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                new ShortAnswer(\"True\"), \"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Flashcard cardD \u003d new Flashcard(deckA,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                new Question(\"Is defensive code desirable at all times?\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                new ShortAnswer(\"False\"), \"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        deckA.addCard(cardA);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        deckA.addCard(cardB);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        deckA.addCard(cardC);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        deckA.addCard(cardD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Deck B"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Set\u003cTag\u003e tagsB \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        tagsB.add(new Tag(\"Hard\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck deckB \u003d new Deck(new Title(\"CS2040S\"), tagsB);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Deck C"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Set\u003cTag\u003e tagsC \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        tagsC.add(new Tag(\"Javascript\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        tagsC.add(new Tag(\"HTML\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        tagsC.add(new Tag(\"CSS\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        tagsC.add(new Tag(\"Framework\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck deckC \u003d new Deck(new Title(\"Vuejs\"), tagsC);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Deck D"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Set\u003cTag\u003e tagsD \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        tagsD.add(new Tag(\"Relational\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        tagsD.add(new Tag(\"Database\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck deckD \u003d new Deck(new Title(\"PostgreSQL\"), tagsD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Deck D"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Set\u003cTag\u003e tagsE \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        tagsE.add(new Tag(\"Cloud\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        tagsE.add(new Tag(\"Simple\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck deckE \u003d new Deck(new Title(\"Digital Ocean\"), tagsE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new Deck[]{ deckA, deckB, deckC, deckD, deckE };"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static ReadOnlyCardiBuddy getSampleCardiBuddy() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        CardiBuddy sampleCb \u003d new CardiBuddy();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (Deck sampleDeck : getSampleDecks()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            sampleCb.addDeck(sampleDeck);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return sampleCb;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 92
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/CardiBuddyStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Represents a storage for {@link cardibuddy.model.CardiBuddy}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public interface CardiBuddyStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Path getCardiBuddyFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns CardiBuddy data as a {@link ReadOnlyCardiBuddy}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Optional\u003cReadOnlyCardiBuddy\u003e readCardiBuddy() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @see #getCardiBuddyFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Optional\u003cReadOnlyCardiBuddy\u003e readCardiBuddy(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Saves the given {@link ReadOnlyCardiBuddy} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param cardiBuddy cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void saveCardiBuddy(ReadOnlyCardiBuddy cardiBuddy) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @see #saveCardiBuddy(ReadOnlyCardiBuddy)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void saveCardiBuddy(ReadOnlyCardiBuddy cardiBuddy, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 45
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/JsonAdaptedDeck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Jackson-friendly version of {@link Deck}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class JsonAdaptedDeck extends JsonAdaptedView {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Jackson-friendly version of {@link Deck}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deck\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private final List\u003cJsonAdaptedFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcard} with the given flashcard details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public JsonAdaptedDeck(@JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                           @JsonProperty(\"flashcards\") List\u003cJsonAdaptedFlashcard\u003e flashcards,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003ccardibuddy.storage.JsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (flashcards !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Converts a given {@code Deck} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public JsonAdaptedDeck(Deck source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.title \u003d source.getTitle().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        flashcards.addAll(source.getFlashcards().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                .map(cardibuddy.storage.JsonAdaptedFlashcard::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                .map(cardibuddy.storage.JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Converts this Jackson-friendly adapted flashcard object into the model\u0027s {@code Deck} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted deck."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Deck toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        final List\u003cTag\u003e deckTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            deckTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(deckTags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck newDeck \u003d new Deck(modelTitle, modelTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        final List\u003cCard\u003e modelFlashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        for (JsonAdaptedFlashcard flashcard : flashcards) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            newDeck.addCard(flashcard.toModelType(newDeck));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // TODO: add if conditions here to check formatting"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return newDeck; // TODO: to replace params with actual values"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 71,
      "haveaqiupill": 18,
      "phaebaez": 4
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/JsonAdaptedFlashcard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Imagecard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.ShortAnswer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Jackson-friendly version of {@link Flashcard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "class JsonAdaptedFlashcard extends JsonAdaptedView {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Flashcard\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private final String deck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final List\u003ccardibuddy.storage.JsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcard} with the given flashcard details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public JsonAdaptedFlashcard(@JsonProperty(\"deck\") String deck, @JsonProperty(\"question\") String question,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                                @JsonProperty(\"answer\") String answer, @JsonProperty(\"path\") String path) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Converts a given {@code Flashcard} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public JsonAdaptedFlashcard(Card source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        deck \u003d source.getDeck().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        question \u003d source.getQuestion().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        answer \u003d source.getAnswer().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        path \u003d source.getPath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Converts this Jackson-friendly adapted flashcard object into the model\u0027s {@code Flashcard} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted flashcard."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public Card toModelType(Deck modelDeck) throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        Question modelQuestion \u003d new Question(question);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        ShortAnswer modelAnswer \u003d new ShortAnswer(answer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (deck \u003d\u003d null || question \u003d\u003d null || answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                    Deck.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (path.equals(\"\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return new Flashcard(modelDeck, modelQuestion, modelAnswer, path);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return new Imagecard(modelDeck, modelQuestion, modelAnswer, path);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 53,
      "airshhlay": 5,
      "phaebaez": 14
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/JsonAdaptedView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * A parent class for JsonAdaptedFlashcard and JsonAdaptedDeck, such that CardiBuddy can display either a list of"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Flashcards or a list of Decks at any time, depending on the user request."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "// TODO: this method might not be implemented, and may be removed in future revisions."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class JsonAdaptedView {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 9,
      "phaebaez": 2
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/JsonCardiBuddyStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * A class to access CardiBuddy data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class JsonCardiBuddyStorage implements CardiBuddyStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCardiBuddyStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public JsonCardiBuddyStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Path getCardiBuddyFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Optional\u003cReadOnlyCardiBuddy\u003e readCardiBuddy() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return readCardiBuddy(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Similar to {@link #readCardiBuddy()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Optional\u003cReadOnlyCardiBuddy\u003e readCardiBuddy(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Optional\u003cJsonSerializableCardiBuddy\u003e jsonCardiBuddy \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                filePath, JsonSerializableCardiBuddy.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!jsonCardiBuddy.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return Optional.of(jsonCardiBuddy.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void saveCardiBuddy(ReadOnlyCardiBuddy cardiBuddy) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        saveCardiBuddy(cardiBuddy, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Similar to {@link #saveCardiBuddy(ReadOnlyCardiBuddy)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void saveCardiBuddy(ReadOnlyCardiBuddy cardiBuddy, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(cardiBuddy);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        JsonUtil.saveJsonFile(new cardibuddy.storage.JsonSerializableCardiBuddy(cardiBuddy), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 80
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/JsonSerializableCardiBuddy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.CardiBuddy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * An Immutable CardiBuddy that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "@JsonRootName(value \u003d \"cardibuddy\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "class JsonSerializableCardiBuddy {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"Decks list contains duplicate deck(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARDS \u003d \"Flashcards list contains duplicate flashcard(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final List\u003cJsonAdaptedDeck\u003e decks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final List\u003cJsonAdaptedFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Constructs a {@code JsonSerializableCardiBuddy} with the given flashcards."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public JsonSerializableCardiBuddy(@JsonProperty(\"decks\") List\u003cJsonAdaptedDeck\u003e decks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        this.decks.addAll(decks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Converts a given {@code ReadOnlyCardiBuddy} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCardiBuddy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public JsonSerializableCardiBuddy(ReadOnlyCardiBuddy source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        decks.addAll(source.getDeckList().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            .map(JsonAdaptedDeck::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    * Converts this address book into the model\u0027s {@code CardiBuddy} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CardiBuddy toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        CardiBuddy cardibuddy \u003d new CardiBuddy();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        for (JsonAdaptedDeck jsonAdaptedDeck : decks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            Deck deck \u003d jsonAdaptedDeck.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            if (cardibuddy.hasDeck(deck)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            cardibuddy.addDeck(deck);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return cardibuddy;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 46,
      "airshhlay": 5,
      "phaebaez": 11
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public interface Storage extends CardiBuddyStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Path getCardiBuddyFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Optional\u003cReadOnlyCardiBuddy\u003e readCardiBuddy() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void saveCardiBuddy(ReadOnlyCardiBuddy cardiBuddy) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 32
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Manages storage of CardiBuddy data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(cardibuddy.storage.StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private CardiBuddyStorage cardiBuddyStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public StorageManager(CardiBuddyStorage cardiBuddyStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.cardiBuddyStorage \u003d cardiBuddyStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CardiBuddy methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Path getCardiBuddyFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return cardiBuddyStorage.getCardiBuddyFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Optional\u003cReadOnlyCardiBuddy\u003e readCardiBuddy() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return readCardiBuddy(cardiBuddyStorage.getCardiBuddyFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Optional\u003cReadOnlyCardiBuddy\u003e readCardiBuddy(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return cardiBuddyStorage.readCardiBuddy(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void saveCardiBuddy(ReadOnlyCardiBuddy cardiBuddy) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        saveCardiBuddy(cardiBuddy, cardiBuddyStorage.getCardiBuddyFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void saveCardiBuddy(ReadOnlyCardiBuddy cardiBuddy, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardiBuddyStorage.saveCardiBuddy(cardiBuddy, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 77
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Represents a storage for {@link cardibuddy.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Saves the given {@link cardibuddy.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/AnswerTestCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Answer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A class for the Test Session\u0027s card view."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Displays the question for the user to answer."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class AnswerTestCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private static final String FXML \u003d \"AnswerTestCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public final Answer answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Label content;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public AnswerTestCard(Answer answer) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        content.setText(answer.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (!(other instanceof AnswerTestCard)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        AnswerTestCard card \u003d (AnswerTestCard) other;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return answer.equals(card.answer)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u0026\u0026 content.getText().equals(card.content.getText());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 50
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/CardUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * General Card class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public abstract class CardUi extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CardUi(String fxmlFileUrl) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super(fxmlFileUrl);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 14
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * For commands that involve button inputs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return Command Executor"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CommandExecutor getCommandExecutor() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.commandExecutor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public TextField getCommandTextField() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.commandTextField;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "         * @see cardibuddy.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 19,
      "-": 72
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/DeckCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * An UI component that displays information of a {@code deck}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DeckCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private static final String FXML \u003d \"DeckListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public final Deck deck;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeckCard(Deck deck, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        title.setText(deck.getTitle().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        deck.getTags().stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Opens selected deck."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void openDeck() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        //resultDisplay.setFeedbackToUser(\"Selected deck is opened\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!(other instanceof DeckCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        DeckCard card \u003d (DeckCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 deck.equals(card.deck);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 25,
      "airshhlay": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/DeckListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Panel containing the list of decks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DeckListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static final String FXML \u003d \"DeckListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeckListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private ListView\u003cDeck\u003e deckListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeckListPanel(ObservableList\u003cDeck\u003e deckList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        deckListView.setItems(deckList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        deckListView.setCellFactory(listView -\u003e new DeckListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code deck} using a {@code deckCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    class DeckListViewCell extends ListCell\u003cDeck\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        protected void updateItem(Deck deck, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            super.updateItem(deck, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (empty || deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                setGraphic(new DeckCard(deck, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 47
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/DragDropCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * An UI component that for users to drag and drop images."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DragDropCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static final String FXML \u003d \"DragAndDropCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private StackPane cardPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private ImageView imageView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DragDropCard(Image image) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        imageView \u003d new ImageView(image);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        imageView.setFitWidth(200);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        imageView.setPreserveRatio(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardPane.getChildren().add(imageView);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setCache(boolean bool) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        imageView.setCache(bool);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 45
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/FlashcardCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * An UI component that displays information of a {@code Flashcard}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class FlashcardCard extends CardUi {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private static final String FXML \u003d \"FlashcardListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public final Flashcard flashcard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Label answer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public FlashcardCard(Card card, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Flashcard flashcard \u003d new Flashcard(card.getDeck(), card.getQuestion(), card.getAnswer(), \"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        question.setText(flashcard.getQuestion().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        question.setWrapText(true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        answer.setText(flashcard.getAnswer().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (!(other instanceof FlashcardCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        FlashcardCard card \u003d (FlashcardCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u0026\u0026 flashcard.equals(card.flashcard);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 59,
      "haveaqiupill": 6
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/FlashcardListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.CardType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Panel containing the list of flashcards."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class FlashcardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private static final String FXML \u003d \"FlashcardListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FlashcardListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private ListView\u003cCard\u003e flashcardListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public FlashcardListPanel(ObservableList\u003cCard\u003e flashcardList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        flashcardListView.setItems(flashcardList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        flashcardListView.setCellFactory(listView -\u003e new FlashcardListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public FlashcardListPanel() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Flashcard} using a {@code FlashcardCard}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    class FlashcardListViewCell extends ListCell\u003cCard\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        protected void updateItem(Card flashcard, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            super.updateItem(flashcard, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            if (empty || flashcard \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            } else if (flashcard.getCardType() \u003d\u003d CardType.FLASHCARD) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                FlashcardCard card \u003d new FlashcardCard(flashcard, getIndex() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                setGraphic(card.getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                ImagecardCard card \u003d new ImagecardCard(flashcard, getIndex() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                setGraphic(card.getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 39,
      "haveaqiupill": 15
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-t10-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 4,
      "-": 99
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/ImagecardCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Imagecard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * An UI component that displays information of a {@code Flashcard}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class ImagecardCard extends CardUi {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static final String FXML \u003d \"ImagecardListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public final Imagecard flashcard;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private VBox whitePane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Label answer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private ImageView imageView;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ImagecardCard(Card card, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Imagecard flashcard \u003d new Imagecard(card.getDeck(), card.getQuestion(), card.getAnswer(), card.getPath());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        question.setText(flashcard.getQuestion().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        question.setWrapText(true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        imageView.setImage(new Image(card.getPath()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        imageView.setFitWidth(360);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        imageView.setPreserveRatio(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        answer.setText(flashcard.getAnswer().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!(other instanceof ImagecardCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ImagecardCard card \u003d (ImagecardCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 flashcard.equals(card.flashcard);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 75
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.deck.exceptions.DeckCannotBeCardException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.deck.exceptions.InvalidDeckException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.deck.exceptions.NotInDeckException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.deck.exceptions.WrongDeckException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.exceptions.InvalidFlashcardException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.AnswerType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.TestResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.stage.FileChooser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private DeckListPanel deckListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private FlashcardListPanel flashcardListPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private StatisticsPanel statisticsPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private StackPane deckListPanelPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private StackPane flashcardListPanelPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private StackPane testCardPanelPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private StackPane dragDropPanelPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private StackPane dd;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setCommandBox() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.commandBox \u003d commandBox;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Fills up all the placeholders of this window with Decks."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void fillInnerPartsWithDecks() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        deckListPanel \u003d new DeckListPanel(logic.getFilteredDeckList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        deckListPanelPlaceholder.getChildren().add(deckListPanel.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcardListPanel \u003d new FlashcardListPanel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        //flashcardListPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getCardiBuddyFilePath());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.commandBox \u003d commandBox;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Fills up all the placeholders of this window with Flashcards."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void fillInnerPartsWithCards(int deckIndex) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcardListPanel \u003d new FlashcardListPanel(logic.getFilteredDeckList()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .get(deckIndex)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .getFlashcardList());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().addAll(flashcardListPanel.getRoot());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Updates the flashcard view in the Main Window."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param deck currently opened deck."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void updateCards(Deck deck) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcardListPanel \u003d new FlashcardListPanel(deck.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Removes the flashcards in the Main Window."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void removeFlashcards() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcardListPanel \u003d new FlashcardListPanel(null);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Fills up the flashcard placeholder with a Statistics report."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void fillInnerPartsWithStatistic() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        statisticsPanel \u003d new StatisticsPanel(logic.getStatistics());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().setAll(statisticsPanel.getRoot());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Fills up the flashcard placeholder with a Statistics report of a specific Deck."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void fillInnerPartsWithStatistic(int deckIndex) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        statisticsPanel \u003d new StatisticsPanel(logic.getFilteredDeckList().get(deckIndex).getStatistics());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().setAll(statisticsPanel.getRoot());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Fills up the flashcard placeholder with a Statistics report of a specific TestSession of a specific Deck."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public void fillInnerPartsWithStatistic(int deckIndex, int sessionIndex) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        statisticsPanel \u003d new StatisticsPanel("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                logic.getFilteredDeckList().get(deckIndex).getStatistics().getSessionStatistic(sessionIndex));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().setAll(statisticsPanel.getRoot());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void clearFlashcardListPanel() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void clearDeckListPanel() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        deckListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TEST SESSION \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Fills the placeholder of this window with the Question of the current flashcard being tested."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param question the question belonging to the current flashcard tested"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void fillInnerPartsWithQuestion(Question question, AnswerType answerType) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        clearDeckListPanel();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        QuestionTestCard questionCard \u003d new QuestionTestCard(question, answerType);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        deckListPanelPlaceholder.getChildren().add(questionCard.getRoot()); // TODO: make FXML file for test card"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Replaces the flashcardListPlaceholder with the countdown as well as other test session status messages."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param testQueueSize the number of remaining flashcards in the {@code testQueue}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void showTestStatus(int testQueueSize) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestStatusCard testStatusCard \u003d new TestStatusCard(testQueueSize);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        clearFlashcardListPanel();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().add(testStatusCard.getRoot());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Fills the placeholder of this window with the Result"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * of the user\u0027s answer input against the current flashcard being tested."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void fillInnerPartsWithResult(TestResult testResult) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        clearDeckListPanel();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        ResultCard resultCard \u003d new ResultCard(testResult); // TODO: Create result card + FXML file"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        deckListPanelPlaceholder.getChildren().add(resultCard.getRoot());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Inserts an image into the flashcard."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void handleInsert() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        resultDisplay.setFeedbackToUser(\"Choose an image to insert into your flashcard.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        FileChooser fileChooser \u003d new FileChooser();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        FileChooser.ExtensionFilter imgFilter \u003d new FileChooser.ExtensionFilter(\"Image Files\", \"*.jpg\", \"*.png\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        fileChooser.getExtensionFilters().add(imgFilter);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        File file \u003d fileChooser.showOpenDialog(primaryStage);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        boolean hasInput \u003d false;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (file !\u003d null) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            Image image \u003d new Image(file.toURI().toString());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            //DragDropCard imageCard \u003d new DragDropCard(image);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            //imageCard.setCache(true);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            //flashcardListPanelPlaceholder.getChildren().add(imageCard.getRoot());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            resultDisplay.setFeedbackToUser(\"Type in the deck index, a question and an answer to be associated\""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    + \" with this image.\\nParameters: c/DECK_INDEX q/QUESTION a/ANSWER\\n\\nNote: The deck indicated\""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    + \" in DECK_INDEX should be currently open for the command to work.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                EventHandler\u003cKeyEvent\u003e getQa \u003d event -\u003e {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    if (event.getCode() \u003d\u003d KeyCode.ENTER) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        String qA \u003d commandBox.getCommandTextField().getText();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                            commandBox.getCommandTextField().setText(\"\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                            commandBox.getCommandExecutor().execute(\"add p/\" + file.toURI().toString()"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                                    + \" \" + qA);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                            event.consume();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                            setCommandBox();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        } catch (Exception e) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                            resultDisplay.setFeedbackToUser(\"Previous command aborted!\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                            setCommandBox();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                };"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                commandBox.getCommandTextField().setOnKeyPressed(getQa);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                resultDisplay.setFeedbackToUser(\"Invalid format to add a flashcard!\\n\""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        + \"Parameters: c/DECK_INDEX q/QUESTION a/ANSWER\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            resultDisplay.setFeedbackToUser(\"Please attach a valid file. \""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    + \"Only image files ending with .png or .jpg are accepted.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Opens the test window."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void handleTest() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        resultDisplay.setFeedbackToUser(\"Enter the index of the deck you want to be tested on.\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        commandBox.getCommandTextField().setOnAction(actionEvent -\u003e {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            String deckNumber \u003d commandBox.getCommandTextField().getText();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                commandBox.getCommandTextField().setText(\"\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                actionEvent.consume();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                commandBox.getCommandExecutor().execute(\"test \" + deckNumber);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            } catch (CommandException e) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        });"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeckListPanel getdeckListPanel() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return deckListPanel;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @see cardibuddy.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (commandResult.isTest()) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                handleTest();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (commandResult.isInsert()) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                handleInsert();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        } catch (CommandException | ParseException | DeckCannotBeCardException | InvalidDeckException"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                | InvalidFlashcardException | NotInDeckException | WrongDeckException e) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 23,
      "haveaqiupill": 149,
      "airshhlay": 53,
      "-": 172,
      "phaebaez": 7
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/QuestionTestCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.AnswerType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A class for the Test Session\u0027s card view."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Displays the question for the user to answer."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class QuestionTestCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private static final String FXML \u003d \"QuestionTestCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Label content;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public QuestionTestCard(Question question, AnswerType answerType) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        content.setText(\"Question:\" + \"\\n\" + question.toString() + \"\\n\\n\" + answerType.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (!(other instanceof QuestionTestCard)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        QuestionTestCard card \u003d (QuestionTestCard) other;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return content.getText().equals(card.content.getText())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u0026\u0026 card.question.equals(this.question);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 53
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/ResultCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_FLASHCARD_ANSWER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_USER_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.TestResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A class for the Test Session\u0027s results view."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Shows the user the results of their answer, when tested against the flashcard\u0027s provided answer."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class ResultCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private static final String FXML \u003d \"ResultCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public final TestResult testResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Label result;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Label userAnswer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Label flashcardAnswer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ResultCard(TestResult testResult) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.testResult \u003d testResult;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        result.setText(testResult.getResult().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        userAnswer.setText(String.format("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                MESSAGE_USER_ANSWER,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                testResult.getUserAnswer()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        flashcardAnswer.setText(String.format("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                MESSAGE_FLASHCARD_ANSWER,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                testResult.getFlashcardAnswer().toString()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 46
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/StatisticsPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import cardibuddy.model.deck.Statistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Panel containing Statistics report."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class StatisticsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final String FXML \u003d \"StatisticsPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private static final DecimalFormat percentFormat \u003d new DecimalFormat(\"##.##%\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StatisticsPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Statistics statistics;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private ListView statsList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private LineChart correctPercentageHistory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public StatisticsPanel(Statistics statistics) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (statistics.getCardsAdded() !\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            statsList.getItems().add(\"No of Cards added: \" + statistics.getCardsAdded());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (statistics.getCardsDeleted() !\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            statsList.getItems().add(\"No of Cards deleted: \" + statistics.getCardsDeleted());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (statistics.getDecksAdded() \u003e 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            statsList.getItems().add(\"No of Decks added: \" + statistics.getDecksAdded());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (statistics.getDecksDeleted() !\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            statsList.getItems().add(\"No of Decks deleted: \" + statistics.getDecksDeleted());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (statistics.getTimesPlayed() !\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            statsList.getItems().add(\"Test Sessions played: \" + statistics.getTimesPlayed());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (statistics.getCardsPlayed() !\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            statsList.getItems().add(\"Total Cards played: \" + statistics.getCardsPlayed());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (statistics.getAvgTriesToGetCorrect() !\u003d 0.0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            statsList.getItems().add(\"Average tries to get correct: \" + statistics.getAvgTriesToGetCorrect());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (statistics.getAvgCorrectPercentage() !\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            statsList.getItems().add(\"Average correct percentage: \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                                    + percentFormat.format(statistics.getAvgCorrectPercentage()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (Map.Entry\u003cDeck, List\u003cDouble\u003e\u003e deckHistory: statistics.getCorrectPercentageHistory().entrySet()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            XYChart.Series newSeries \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            newSeries.setName(deckHistory.getKey().getTitle().toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            int recordIndex \u003d 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            for (Double record : deckHistory.getValue()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                newSeries.getData().add(new XYChart.Data(\"\" + recordIndex, record * 100));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                recordIndex++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            correctPercentageHistory.getData().add(newSeries);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 80
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/TestStatusCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A class for the Test Session\u0027s status view."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Shows the user the number of flashcards left in the {@code testQueue}, as well as an encouraging message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TestStatusCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_COUNTDOWN \u003d \"Flashcards in queue: %s\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_ENDING_SOON \u003d \"Finishing soon hang in there!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_LETS_GO \u003d \"Let\u0027s get it!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private static final String FXML \u003d \"TestStatusCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Label testQueueCountdown;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Label messageToUser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TestStatusCard(int testQueueSize) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testQueueCountdown.setText(String.format(MESSAGE_COUNTDOWN, testQueueSize));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (testQueueSize \u003c\u003d 2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            messageToUser.setText(MESSAGE_ENDING_SOON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            messageToUser.setText(String.format(MESSAGE_COUNTDOWN, MESSAGE_LETS_GO));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 39
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/cb_logo_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setNewCommandBox() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        mainWindow.setCommandBox();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public MainWindow getMainWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return mainWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            mainWindow.fillInnerPartsWithDecks();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void showAlertDialogAndWait(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 18,
      "-": 77
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/AnswerTestCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u003cLabel fx:id\u003d\"content\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c!-- \u003cFlowPane fx:id\u003d\"tags\" /\u003e --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "airshhlay": 32
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003cStackPane minHeight\u003d\"40\" styleClass\u003d\"command-box\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" prefWidth\u003d\"200.0\" promptText\u003d\"Enter command here...\" styleClass\u003d\"text-field-transparent\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DeckListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "  \u003cGridPane styleClass\u003d\"deck\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                  \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                  \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "               \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "         \u003ccursor\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003cCursor fx:constant\u003d\"HAND\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "         \u003c/cursor\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 24,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/DeckListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    \u003cListView fx:id\u003d\"deckListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 1,
      "haveaqiupill": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/DragAndDropCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003cStackPane fx:id\u003d\"cardPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "      \u003cLabel fx:id\u003d\"title\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "      \u003cImageView fx:id\u003d\"imageView\" fitHeight\u003d\"150.0\" fitWidth\u003d\"200.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 13
    }
  },
  {
    "path": "src/main/resources/view/FlashcardListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    \u003cGridPane styleClass\u003d\"flashcard\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cLabel fx:id\u003d\"question\" styleClass\u003d\"big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "             \u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"small_label\" text\u003d\"\\$first\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "               \u003cInsets left\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c!-- \u003cFlowPane fx:id\u003d\"tags\" /\u003e --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 25,
      "haveaqiupill": 17
    }
  },
  {
    "path": "src/main/resources/view/FlashcardListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    \u003cListView fx:id\u003d\"flashcardListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 7
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 3,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/ImagecardListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    \u003cGridPane styleClass\u003d\"flashcard\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003cVBox fx:id\u003d\"whitePane\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cLabel fx:id\u003d\"question\" styleClass\u003d\"big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "               \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "         \u003cImageView fx:id\u003d\"imageView\" fitHeight\u003d\"400.0\" fitWidth\u003d\"400.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                                     \u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"small_label\" text\u003d\"\\$first\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "               \u003cInsets left\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003c!-- \u003cFlowPane fx:id\u003d\"tags\" /\u003e --\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 52
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003cfx:root minHeight\u003d\"800.0\" minWidth\u003d\"900.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"CardiBuddy\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    \u003cImage url\u003d\"@/images/CardiBuddy_noBG.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "      \u003cVBox minHeight\u003d\"600.0\" minWidth\u003d\"870.0\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "          \u003cMenu fx:id\u003d\"exitButton\" mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "          \u003cMenu fx:id\u003d\"imageButton\" mnemonicParsing\u003d\"false\" text\u003d\"Image\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"imageMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleInsert\" text\u003d\"Insert\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "               \u003cMenu fx:id\u003d\"helpButton\" mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                  \u003citems\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                  \u003c/items\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Menu\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"120.0\" minHeight\u003d\"120.0\" prefHeight\u003d\"120.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003cStackPane minHeight\u003d\"500.0\" minWidth\u003d\"900.0\" prefHeight\u003d\"500.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER\" minWidth\u003d\"870.0\" prefWidth\u003d\"870.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                                      \u003cVBox fx:id\u003d\"deckList\" minHeight\u003d\"500.0\" minWidth\u003d\"435.0\" prefWidth\u003d\"435.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"deckListPanelPlaceholder\" minWidth\u003d\"405.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                                 \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                              \u003c/VBox.margin\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                                      \u003cVBox fx:id\u003d\"flashcardList\" minHeight\u003d\"500.0\" minWidth\u003d\"435.0\" prefWidth\u003d\"435.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"flashcardListPanelPlaceholder\" minWidth\u003d\"405.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                                 \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                              \u003c/VBox.margin\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                 \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 35,
      "airshhlay": 3,
      "-": 44
    }
  },
  {
    "path": "src/main/resources/view/QuestionTestCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    \u003cGridPane styleClass\u003d\"test\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cLabel fx:id\u003d\"content\" styleClass\u003d\"label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c!-- \u003cFlowPane fx:id\u003d\"tags\" /\u003e --\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 25,
      "haveaqiupill": 11
    }
  },
  {
    "path": "src/main/resources/view/ResultCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" styleClass\u003d\"test\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cLabel fx:id\u003d\"result\" text\u003d\"\\$first\" styleClass\u003d\"label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cLabel fx:id\u003d\"userAnswer\" text\u003d\"\\$first\" styleClass\u003d\"label\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cLabel fx:id\u003d\"flashcardAnswer\" text\u003d\"\\$first\" styleClass\u003d\"label\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c!-- \u003cFlowPane fx:id\u003d\"tags\" /\u003e --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "airshhlay": 35,
      "haveaqiupill": 5
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatisticsPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            \u003cListView fx:id\u003d\"statsList\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \u003cLineChart fx:id\u003d\"correctPercentageHistory\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "          \u003cCategoryAxis label\u003d\"Test Session No.\" side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "          \u003cNumberAxis label\u003d\"\\% Correct\" side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "      \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 29
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003cGridPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/resources/view/TestStatusCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" styleClass\u003d\"test\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cLabel fx:id\u003d\"testQueueCountdown\" text\u003d\"\\$first\" styleClass\u003d\"label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u003cLabel fx:id\u003d\"messageToUser\" text\u003d\"\\$first\" styleClass\u003d\"label\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c!-- \u003cFlowPane fx:id\u003d\"tags\" /\u003e --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "airshhlay": 33,
      "haveaqiupill": 4
    }
  },
  {
    "path": "src/test/java/cardibuddy/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 57
    }
  },
  {
    "path": "src/test/java/cardibuddy/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/cardibuddy/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 134
    }
  },
  {
    "path": "src/test/java/cardibuddy/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/cardibuddy/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/cb_logo_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/cardibuddy/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/cardibuddy/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/cardibuddy/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/cardibuddy/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/cardibuddy/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_DECK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "//import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.CardiBuddy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.SearchDeckKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.testutil.EditDeckDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String VALID_TITLE_DJANGO \u003d \"Django\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String VALID_TITLE_REACT \u003d \"React\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String VALID_TAG_HARD \u003d \"Hard\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String VALID_TAG_FRONTEND \u003d \"Frontend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String TITLE_DESC_DJANGO \u003d \" \" + PREFIX_DECK + VALID_TITLE_DJANGO;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String TITLE_DESC_REACT \u003d \" \" + PREFIX_DECK + VALID_TITLE_REACT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String TAG_DESC_FRONTEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRONTEND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String TAG_DESC_HARD \u003d \" \" + PREFIX_TAG + VALID_TAG_HARD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_DECK + \"PHP\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"Scripting*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final EditCommand.EditDeckDescriptor DESC_DJANGO;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final EditCommand.EditDeckDescriptor DESC_REACT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        DESC_DJANGO \u003d new EditDeckDescriptorBuilder().withName(VALID_TITLE_DJANGO)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .withTags(VALID_TAG_FRONTEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        DESC_REACT \u003d new EditDeckDescriptorBuilder().withName(VALID_TITLE_REACT)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .withTags(VALID_TAG_HARD, VALID_TAG_FRONTEND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                                            Model expectedModel, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            Model expectedModel, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel, commandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * - the address book, filtered deck list and selected deck in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory commandHistory,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        CardiBuddy expectedCardiBuddy \u003d new CardiBuddy(actualModel.getCardiBuddy());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cDeck\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredDeckList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        //assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel, commandHistory));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(expectedCardiBuddy, actualModel.getCardiBuddy());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredDeckList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the deck at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static void showDeckAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredDeckList().size());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck deck \u003d model.getFilteredDeckList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        final String[] splitName \u003d deck.getTitle().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        model.updateFilteredDeckList(new SearchDeckKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(1, model.getFilteredDeckList().size());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 101,
      "phaebaez": 9
    }
  },
  {
    "path": "src/test/java/cardibuddy/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//Empty test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 12
    }
  },
  {
    "path": "src/test/java/cardibuddy/logic/commands/TestCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TestCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 4
    }
  },
  {
    "path": "src/test/java/cardibuddy/logic/commands/testsession/ForceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.logic.commands.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class ForceCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 4
    }
  },
  {
    "path": "src/test/java/cardibuddy/logic/commands/testsession/NextCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.logic.commands.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class NextCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 4
    }
  },
  {
    "path": "src/test/java/cardibuddy/logic/commands/testsession/QuitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.logic.commands.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class QuitCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 4
    }
  },
  {
    "path": "src/test/java/cardibuddy/logic/commands/testsession/SkipCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.logic.commands.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class SkipCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 4
    }
  },
  {
    "path": "src/test/java/cardibuddy/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/CardiBuddyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.commands.CommandTestUtil.VALID_TAG_HARD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.TypicalDecks.DJANGO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.TypicalDecks.getTypicalCardiBuddy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class CardiBuddyTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final CardiBuddy addressBook \u003d new CardiBuddy();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getDeckList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void resetData_withValidReadOnlyCardiBuddy_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        CardiBuddy newData \u003d getTypicalCardiBuddy();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void resetData_withDuplicateDecks_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Two decks with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck editedAlice \u003d new DeckBuilder(DJANGO).withTags(VALID_TAG_HARD)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cDeck\u003e newDecks \u003d Arrays.asList(DJANGO, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        CardiBuddyStub newData \u003d new CardiBuddyStub(newDecks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void hasDeck_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasDeck(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void hasDeck_deckNotInCardiBuddy_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(addressBook.hasDeck(DJANGO));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void hasDeck_deckInCardiBuddy_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        addressBook.addDeck(DJANGO);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(addressBook.hasDeck(DJANGO));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void hasDeck_deckWithSameIdentityFieldsInCardiBuddy_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        addressBook.addDeck(DJANGO);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck editedAlice \u003d new DeckBuilder(DJANGO).withTags(VALID_TAG_HARD)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(addressBook.hasDeck(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void getDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getDeckList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * A stub ReadOnlyCardiBuddy whose decks list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static class CardiBuddyStub implements ReadOnlyCardiBuddy {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        private final ObservableList\u003cDeck\u003e decks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        private final ObservableList\u003cCard\u003e flashcards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        CardiBuddyStub(Collection\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            this.decks.setAll(decks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        public ObservableList\u003cDeck\u003e getDeckList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return decks;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        public ObservableList\u003cCard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return flashcards;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 109
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.TypicalDecks.ASYNCHRONOUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.TypicalDecks.POSTGRESQL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.SearchDeckKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.testutil.CardiBuddyBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(new CardiBuddy(), new CardiBuddy(modelManager.getCardiBuddy()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        userPrefs.setCardiBuddyFilePath(Paths.get(\"cardi/buddy/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        userPrefs.setCardiBuddyFilePath(Paths.get(\"new/cardi/buddy/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setCardiBuddyFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCardiBuddyFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setCardiBuddyFilePath_validPath_setsCardiBuddyFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Path path \u003d Paths.get(\"cardi/buddy/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        modelManager.setCardiBuddyFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(path, modelManager.getCardiBuddyFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void hasDeck_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasDeck(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void hasDeck_deckNotInCardiBuddy_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(modelManager.hasDeck(ASYNCHRONOUS));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void hasDeck_deckInCardiBuddy_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        modelManager.addDeck(ASYNCHRONOUS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(modelManager.hasDeck(ASYNCHRONOUS));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void getFilteredDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredDeckList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        CardiBuddy cardiBuddy \u003d new CardiBuddyBuilder().withDeck(ASYNCHRONOUS).withDeck(POSTGRESQL).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        CardiBuddy differentCardiBuddy \u003d new CardiBuddy();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        modelManager \u003d new ModelManager(cardiBuddy, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(cardiBuddy, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // different cardiBuddy -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentCardiBuddy, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        String[] keywords \u003d ASYNCHRONOUS.getTitle().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        modelManager.updateFilteredDeckList(new SearchDeckKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(cardiBuddy, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        modelManager.updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        differentUserPrefs.setCardiBuddyFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(cardiBuddy, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 39,
      "-": 94
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setCardiBuddyFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCardiBuddyFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/deck/DeckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.commands.CommandTestUtil.VALID_TAG_HARD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.commands.CommandTestUtil.VALID_TITLE_REACT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.TypicalDecks.ASYNCHRONOUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.TypicalDecks.REACT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DeckTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck person \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void isSameDeck() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(ASYNCHRONOUS.isSameDeck(ASYNCHRONOUS));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(ASYNCHRONOUS.isSameDeck(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck editedAsync \u003d new DeckBuilder(ASYNCHRONOUS).withTitle(VALID_TITLE_REACT).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(ASYNCHRONOUS.isSameDeck(editedAsync));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        editedAsync \u003d new DeckBuilder(ASYNCHRONOUS)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .withTags(VALID_TAG_HARD).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(ASYNCHRONOUS.isSameDeck(editedAsync));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        editedAsync \u003d new DeckBuilder(ASYNCHRONOUS)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .withTags(VALID_TAG_HARD).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(ASYNCHRONOUS.isSameDeck(editedAsync));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        editedAsync \u003d new DeckBuilder(ASYNCHRONOUS).withTags(VALID_TAG_HARD).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(ASYNCHRONOUS.isSameDeck(editedAsync));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck asyncCopy \u003d new DeckBuilder(ASYNCHRONOUS).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(ASYNCHRONOUS.equals(asyncCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(ASYNCHRONOUS.equals(ASYNCHRONOUS));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(ASYNCHRONOUS.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(ASYNCHRONOUS.equals(5));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(ASYNCHRONOUS.equals(REACT));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck editedAsync \u003d new DeckBuilder(ASYNCHRONOUS).withTitle(VALID_TITLE_REACT).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(ASYNCHRONOUS.equals(editedAsync));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        editedAsync \u003d new DeckBuilder(ASYNCHRONOUS).withTags(VALID_TAG_HARD).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(ASYNCHRONOUS.equals(editedAsync));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void isSameString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        //same Title"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck editedAsync \u003d new DeckBuilder(ASYNCHRONOUS).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(ASYNCHRONOUS.toString().equals(editedAsync.toString()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 85
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/deck/FilterDeckKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class FilterDeckKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        FilterDeckKeywordsPredicate firstPredicate \u003d new FilterDeckKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        FilterDeckKeywordsPredicate secondPredicate \u003d new FilterDeckKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        FilterDeckKeywordsPredicate firstPredicateCopy \u003d new FilterDeckKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        FilterDeckKeywordsPredicate predicate \u003d new FilterDeckKeywordsPredicate(Collections"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .singletonList(\"Asynchronous\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(predicate.test(new DeckBuilder().withTags(\"Asynchronous\", \"Programming\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        predicate \u003d new FilterDeckKeywordsPredicate(Arrays.asList(\"Asynchronous\", \"\u0026\", \"Programming\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(predicate.test(new DeckBuilder().withTags(\"Asynchronous\", \"Programming\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        predicate \u003d new FilterDeckKeywordsPredicate(Arrays.asList(\"Programming\", \"\u0026\", \"Java\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(predicate.test(new DeckBuilder().withTags(\"Asynchronous\", \"Java\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        predicate \u003d new FilterDeckKeywordsPredicate(Arrays.asList(\"aSYnChrOnoUs\", \"pRoGRAmminG\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(predicate.test(new DeckBuilder().withTags(\"Asynchronous\", \"Programming\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        FilterDeckKeywordsPredicate predicate \u003d new FilterDeckKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(predicate.test(new DeckBuilder().withTags(\"Asynchronous\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        predicate \u003d new FilterDeckKeywordsPredicate(Arrays.asList(\"Java\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(predicate.test(new DeckBuilder().withTags(\"Asynchronous\", \"Programming\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 72
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/deck/SearchDeckKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class SearchDeckKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        SearchDeckKeywordsPredicate firstPredicate \u003d new SearchDeckKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        SearchDeckKeywordsPredicate secondPredicate \u003d new SearchDeckKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        SearchDeckKeywordsPredicate firstPredicateCopy \u003d new SearchDeckKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        SearchDeckKeywordsPredicate predicate \u003d new SearchDeckKeywordsPredicate(Collections"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .singletonList(\"Asynchronous\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(predicate.test(new DeckBuilder().withTitle(\"Asynchronous Programming\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        predicate \u003d new SearchDeckKeywordsPredicate(Arrays.asList(\"Asynchronous\", \"Programming\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(predicate.test(new DeckBuilder().withTitle(\"Asynchronous Programming\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        predicate \u003d new SearchDeckKeywordsPredicate(Arrays.asList(\"Programming\", \"Java\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(predicate.test(new DeckBuilder().withTitle(\"Asynchronous Java\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        predicate \u003d new SearchDeckKeywordsPredicate(Arrays.asList(\"aSYnChrOnoUs\", \"pRoGRAmminG\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(predicate.test(new DeckBuilder().withTitle(\"Asynchronous Programming\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        SearchDeckKeywordsPredicate predicate \u003d new SearchDeckKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(predicate.test(new DeckBuilder().withTitle(\"Asynchronous\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        predicate \u003d new SearchDeckKeywordsPredicate(Arrays.asList(\"Java\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(predicate.test(new DeckBuilder().withTitle(\"Asynchronous Programming\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 72
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/deck/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(Title.isValidTitle(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(Title.isValidTitle(\"CS2103*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(Title.isValidTitle(\"hello world\")); // alphabets only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(Title.isValidTitle(\"1231\")); // numbers only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(Title.isValidTitle(\"algorithms 2nd edition\")); // alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Steven Halim\")); // with capital letters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Competitive Programming in C Programming Language\")); // long names"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 35
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/deck/UniqueDeckListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.commands.CommandTestUtil.VALID_TAG_HARD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.TypicalDecks.DJANGO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.TypicalDecks.REACT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class UniqueDeckListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final UniqueDeckList uniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void contains_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void contains_deckNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(uniqueDeckList.contains(DJANGO));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void contains_deckInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.add(DJANGO);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(uniqueDeckList.contains(DJANGO));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void contains_deckWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.add(DJANGO);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck editedDjango \u003d new DeckBuilder(DJANGO).withTags(VALID_TAG_HARD)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertTrue(uniqueDeckList.contains(editedDjango));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void add_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void add_duplicateDeck_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.add(DJANGO);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e uniqueDeckList.add(DJANGO));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDeck_nullTargetDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDeck(null, DJANGO));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDeck_nullEditedDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDeck(DJANGO, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDeck_targetDeckNotInList_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(DeckNotFoundException.class, () -\u003e uniqueDeckList.setDeck(DJANGO, DJANGO));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDeck_editedDeckIsSameDeck_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.add(DJANGO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.setDeck(DJANGO, DJANGO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        expectedUniqueDeckList.add(DJANGO);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDeck_editedDeckHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.add(DJANGO);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Deck editedDjango \u003d new DeckBuilder(DJANGO).withTags(VALID_TAG_HARD)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.setDeck(DJANGO, editedDjango);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        expectedUniqueDeckList.add(editedDjango);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDeck_editedDeckHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.add(DJANGO);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.setDeck(DJANGO, REACT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        expectedUniqueDeckList.add(REACT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDeck_editedDeckHasNonUniqueIdentity_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.add(DJANGO);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.add(REACT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e uniqueDeckList.setDeck(DJANGO, REACT));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void remove_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void remove_deckDoesNotExist_throwsDeckNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(DeckNotFoundException.class, () -\u003e uniqueDeckList.remove(DJANGO));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void remove_existingDeck_removesDeck() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.add(DJANGO);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.remove(DJANGO);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDecks_nullUniqueDeckList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDecks((UniqueDeckList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDecks_uniqueDeckList_replacesOwnListWithProvidedUniqueDeckList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.add(DJANGO);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        expectedUniqueDeckList.add(REACT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.setDecks(expectedUniqueDeckList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDecks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDecks((List\u003cDeck\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDecks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.add(DJANGO);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cDeck\u003e deckList \u003d Collections.singletonList(REACT);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        uniqueDeckList.setDecks(deckList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        expectedUniqueDeckList.add(REACT);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDecks_listWithDuplicateDecks_throwsDuplicateDeckException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cDeck\u003e listWithDuplicateDecks \u003d Arrays.asList(DJANGO, DJANGO);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(DuplicateDeckException.class, () -\u003e uniqueDeckList.setDecks(listWithDuplicateDecks));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            -\u003e uniqueDeckList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 170
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 23
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/testsession/CardStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Answer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A stub class for Card, overrides method that are used by TestSession."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class CardStub extends Flashcard {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Question questionStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Answer answerStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String randomString \u003d \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public CardStub(Deck deck, Question question, Answer answer, String path) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(deck, question, answer, path);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        questionStub \u003d question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        answerStub \u003d answer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return questionStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return answerStub;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return o instanceof CardStub"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u0026\u0026 this.questionStub.equals(((CardStub) o).questionStub)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u0026\u0026 this.answerStub.equals(((CardStub) o).answerStub);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 39
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/testsession/DeckStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.deck.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.UniqueFlashcardList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A stub class for Deck."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class DeckStub extends Deck {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private List\u003cCard\u003e flashcards;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public DeckStub(Title title, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(title, tags);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public List\u003cCard\u003e addCard(Card card) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        flashcards.add(card);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return flashcards;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ObservableList\u003cCard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        UniqueFlashcardList flashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        flashcardList.setFlashcards(flashcards);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return flashcardList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 37
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/testsession/McqAnswerStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.McqAnswer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Stub class for McqAnswer."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class McqAnswerStub extends McqAnswer {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public McqAnswerStub(String answerString) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(answerString);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        answer \u003d answerString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 20
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/testsession/QuestionStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Stub class for Question."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class QuestionStub extends Question {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public QuestionStub(String questionString) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(questionString);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        question \u003d questionString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 19
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/testsession/ShortAnswerStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.ShortAnswer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Stub class for ShortAnswer."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class ShortAnswerStub extends ShortAnswer {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public ShortAnswerStub(String answerString) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(answerString);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        answer \u003d answerString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 21
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/testsession/TestResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import jdk.jfr.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TestResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Answer flashcardAnswer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String userAnswer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        int random \u003d new Random().nextInt(2 + 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        switch (random) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            flashcardAnswer \u003d new McqAnswerStub(\"B\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            userAnswer \u003d \"B\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            flashcardAnswer \u003d new TfAnswerStub(\"F\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            userAnswer \u003d \"F\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            flashcardAnswer \u003d new ShortAnswerStub(\"abc def\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            userAnswer \u003d \"abc def\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            flashcardAnswer \u003d new ShortAnswerStub(\"abc def\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            userAnswer \u003d \"abc def\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void tearDown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        flashcardAnswer \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        userAnswer \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test that the result is computed correctly.\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testComputeResultGivesResultCorrect() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestResult testResult \u003d new TestResult(flashcardAnswer, userAnswer);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(Result.CORRECT, testResult.getResult());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test that constructor for a TestResult containing SKIPPED is correct.\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testConstructorForSkippedResult() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestResult testResult \u003d new TestResult(Result.SKIPPED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(Result.SKIPPED, testResult.getResult());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test that the result is computed correctly.\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testComputeResultGivesResultWrong() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestResult testResult \u003d new TestResult(flashcardAnswer, \"blah\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(Result.WRONG, testResult.getResult());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test that number of tries is set correctly for one try.\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testGetNumberOfTriesForOneTry() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestResult testResult \u003d new TestResult(flashcardAnswer, userAnswer);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(1, testResult.getNumTries());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test that number of tries is set correctly for more tries.\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testGetNumberOfTriesForMultipleTries() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestResult testResult \u003d new TestResult(flashcardAnswer, userAnswer);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        int random \u003d new Random().nextInt(20);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testResult.setNumTries(random);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(random, testResult.getNumTries());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 82
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/testsession/TestSessionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.deck.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.AlreadyCorrectException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.EmptyDeckException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.testsession.exceptions.UnansweredQuestionException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import jdk.jfr.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TestSessionTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String randomString1 \u003d \"ABCDEFGHIJKLMNOPQRSTUVWXYZ \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String randomString2 \u003d \"abcdefghijklmnopqrstuvwxyz\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private DeckStub deck \u003d new DeckStub(new Title(\"HELLO\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * A method to generate a flashcard of random type, and with a random question string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    Flashcard generateRandomCard() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        int option \u003d new Random().nextInt(2 + 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        int random1 \u003d new Random().nextInt(26);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        int random2 \u003d new Random().nextInt(26);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        int random3 \u003d new Random().nextInt(26);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        QuestionStub question;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Answer answer;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        String questionString \u003d \"HELLO\" + randomString1.charAt(random1)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                + randomString2.charAt(random2)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                + randomString1.charAt(random3);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        switch (option) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case 0: // for MCQ questions"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            question \u003d new QuestionStub(questionString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            answer \u003d new McqAnswerStub(\"A\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case 1: // For TF questions"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            question \u003d new QuestionStub(questionString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            answer \u003d new TfAnswerStub(\"T\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        default: // for short answer questions"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            question \u003d new QuestionStub(questionString);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            answer \u003d new ShortAnswerStub(\"Short Answer\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return new CardStub(deck, question, answer, \"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    TestSession submitCorrectAnswer(TestSession testSession, int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        String correctAnswer \u003d deck.getFlashcardList().get(index).getAnswer().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.submitAnswer(correctAnswer);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return testSession;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    TestSession submitWrongAnswer(TestSession testSession) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.submitAnswer(\"blahblahblahblah\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return testSession;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        deck \u003d new DeckStub(new Title(\"HELLO\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        deck.addCard(generateRandomCard());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        deck.addCard(generateRandomCard());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        deck.addCard(generateRandomCard());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void tearDown() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        deck \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test that getFirstQuestion() method works as expected by returning the correct question.\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testGetFirstQuestion() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestSession testSession \u003d new TestSession(deck);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(deck.getFlashcardList().get(0).getQuestion(), testSession.getFirstQuestion());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Ensure that the constructor throws an EmptyDeckException if the deck provided has no flashcards.\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testConstructorWithEmptyDeck() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertThrows(EmptyDeckException.class, () -\u003e new TestSession(new Deck("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                new Title(\"HELLO\"), new HashSet\u003c\u003e(), new ArrayList\u003cCard\u003e())));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Ensure that the proper test queue is created when a non empty deck is passed to the constructor.\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testConstructorWithNonEmptyDeck() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestSession testSession \u003d new TestSession(deck);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        LinkedList\u003cCard\u003e createdQueue \u003d testSession.getTestQueue();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        LinkedList\u003cCard\u003e expectedQueue \u003d new LinkedList\u003c\u003e(deck.getFlashcardList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(expectedQueue, createdQueue);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test the submission of a correct answer by ensuring that the size of the test queue decreases by 1.\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testSubmitCorrectAnswer() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestSession testSession \u003d new TestSession(deck);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.getFirstQuestion();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession \u003d submitCorrectAnswer(testSession, 0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        int expectedTestQueueSize \u003d deck.getFlashcardList().size() - 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(expectedTestQueueSize, testSession.getTestQueueSize());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test the submission of a wrong answer by ensuring that \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"the size of the test queue remains the same (as the wrong answer is added back into the test queue).\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testSubmitWrongAnswer() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestSession testSession \u003d new TestSession(deck);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.getFirstQuestion();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession \u003d submitWrongAnswer(testSession);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        int expectedTestQueueSize \u003d deck.getFlashcardList().size();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(expectedTestQueueSize, testSession.getTestQueueSize());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test that skipping a question answered correctly leads to an AlreadyCorrectException thrown\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testSkipCorrectAnswer() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestSession testSession \u003d new TestSession(deck);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.getFirstQuestion();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession \u003d submitCorrectAnswer(testSession, 0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertThrows(AlreadyCorrectException.class, testSession::skipQuestion);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Ensure that the TestResult for a skipped question has been stored as such.\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testSkippedQuestionStoredAsSkipped() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestSession testSession \u003d new TestSession(deck);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.getFirstQuestion();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Card flashcardToCheck \u003d deck.getFlashcardList().get(0);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.skipQuestion();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Result storedResult \u003d testSession.getTestResults().get(flashcardToCheck).getResult();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(Result.SKIPPED, storedResult);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test that the correct second question is returned.\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testGetNextQuestion() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestSession testSession \u003d new TestSession(deck);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.getFirstQuestion();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession \u003d submitWrongAnswer(testSession);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Question nextQuestion \u003d testSession.getNextQuestion();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Question expectedQuestion \u003d deck.getFlashcardList().get(1).getQuestion();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(expectedQuestion, nextQuestion);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test that results of the test session are stored in the {@code HashMap}.\")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testAnsweringQuestions() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestSession testSession \u003d new TestSession(deck);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.getFirstQuestion();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession \u003d submitCorrectAnswer(testSession, 0);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.getNextQuestion();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession \u003d submitWrongAnswer(testSession);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        int resultsSize \u003d testSession.getTestResults().size();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(2, resultsSize);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test that force correct throws UnansweredQuestionException if the question is not answered.\")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testForceCorrectThrowsUnansweredQuestionException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestSession testSession \u003d new TestSession(deck);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.getFirstQuestion();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertThrows(UnansweredQuestionException.class, testSession::forceCorrect);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test that force correct leads to the test queue size decreasing by 1\")"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testForceCorrectRemovesReAddedFlashcard() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestSession testSession \u003d new TestSession(deck);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.getFirstQuestion();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession \u003d submitWrongAnswer(testSession);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.forceCorrect();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        int expectedTestQueueSize \u003d deck.getFlashcardList().size() - 1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(expectedTestQueueSize, testSession.getTestQueueSize());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test that force correct throws ALreadyCorrectException.\")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testForceCorrectThrowsAlreadyCorrectException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestSession testSession \u003d new TestSession(deck);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.getFirstQuestion();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession \u003d submitCorrectAnswer(testSession, 0);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertThrows(AlreadyCorrectException.class, testSession::forceCorrect);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test that the correct True_False AnswerType is received.\")"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testGetCurrentAnswerTypeTrueFalse() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        DeckStub deck \u003d new DeckStub(new Title(\"Hi\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Card card \u003d new CardStub(deck, new Question(\"Hello\"), new TfAnswerStub(\"T\"), \"\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        deck.addCard(card);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestSession testSession \u003d new TestSession(deck);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.getFirstQuestion();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(AnswerType.TRUE_FALSE, testSession.getCurrentAnswerType());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test that the correct MCQ AnswerType is received.\")"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testGetCurrentAnswerTypeMcq() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        DeckStub deck \u003d new DeckStub(new Title(\"Hi\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Card card \u003d new CardStub(deck, new Question(\"Hello\"), new McqAnswerStub(\"B\"), \"\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        deck.addCard(card);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestSession testSession \u003d new TestSession(deck);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.getFirstQuestion();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(AnswerType.MCQ, testSession.getCurrentAnswerType());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Description(\"Test that the correct SHORT_ANSWER AnswerType is received.\")"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testGetCurrentAnswerTypeShortAnswer() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        DeckStub deck \u003d new DeckStub(new Title(\"Hi\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Card card \u003d new CardStub(deck, new Question(\"Hello\"), new ShortAnswerStub(\"yes no\"), \"\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        deck.addCard(card);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestSession testSession \u003d new TestSession(deck);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testSession.getFirstQuestion();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assertEquals(AnswerType.SHORT_ANSWER, testSession.getCurrentAnswerType());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 235
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/testsession/TfAnswerStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.TfAnswer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Stub class for TfAnswer."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TfAnswerStub extends TfAnswer {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TfAnswerStub(String answerString) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(answerString);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        answer \u003d answerString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 21
    }
  },
  {
    "path": "src/test/java/cardibuddy/storage/JsonCardiBuddyStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.TypicalDecks.ASYNCHRONOUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.TypicalDecks.HOON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.TypicalDecks.IDA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.TypicalDecks.getTypicalCardiBuddy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.CardiBuddy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class JsonCardiBuddyStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonCardiBuddyStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void readCardiBuddy_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCardiBuddy(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Optional\u003cReadOnlyCardiBuddy\u003e readCardiBuddy(String filePath) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new JsonCardiBuddyStorage(Paths.get(filePath)).readCardiBuddy(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertFalse(readCardiBuddy(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCardiBuddy(\"notJsonFormatCardiBuddy.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void readCardiBuddy_invalidDeckCardiBuddy_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCardiBuddy(\"invalidDeckCardiBuddy.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void readAndSaveCardiBuddy_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempCardiBuddy.json\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        CardiBuddy original \u003d getTypicalCardiBuddy();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        JsonCardiBuddyStorage jsonCardiBuddyStorage \u003d new JsonCardiBuddyStorage(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        jsonCardiBuddyStorage.saveCardiBuddy(original, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ReadOnlyCardiBuddy readBack \u003d jsonCardiBuddyStorage.readCardiBuddy(filePath).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(original, new CardiBuddy(readBack));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        original.addDeck(HOON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        original.removeDeck(ASYNCHRONOUS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        jsonCardiBuddyStorage.saveCardiBuddy(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        readBack \u003d jsonCardiBuddyStorage.readCardiBuddy(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(original, new CardiBuddy(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        original.addDeck(IDA);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        jsonCardiBuddyStorage.saveCardiBuddy(original); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        readBack \u003d jsonCardiBuddyStorage.readCardiBuddy().get(); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertEquals(original, new CardiBuddy(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void saveCardiBuddy_nullCardiBuddy_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCardiBuddy(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Saves {@code cardiBuddy} at the specified {@code filePath}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private void saveCardiBuddy(ReadOnlyCardiBuddy cardiBuddy, String filePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            new JsonCardiBuddyStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    .saveCardiBuddy(cardiBuddy, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void saveCardiBuddy_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCardiBuddy(new CardiBuddy(), null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 108
    }
  },
  {
    "path": "src/test/java/cardibuddy/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    assertEquals(expected, actual);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        userPrefs.setCardiBuddyFilePath(Paths.get(\"cardibuddy.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 18,
      "-": 104
    }
  },
  {
    "path": "src/test/java/cardibuddy/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/cardibuddy/testutil/CardiBuddyBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.CardiBuddy;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " *     {@code CardiBuddy ab \u003d new CardiBuddyBuilder().withDeck(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class CardiBuddyBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private CardiBuddy cardiBuddy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CardiBuddyBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardiBuddy \u003d new CardiBuddy();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CardiBuddyBuilder(CardiBuddy cardiBuddy) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.cardiBuddy \u003d cardiBuddy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds a new {@code Deck} to the {@code CardiBuddy} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CardiBuddyBuilder withDeck(Deck deck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardiBuddy.addDeck(deck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CardiBuddy build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return cardiBuddy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 34
    }
  },
  {
    "path": "src/test/java/cardibuddy/testutil/DeckBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * A utility class to help with building Deck objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DeckBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"CS1101S\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private List\u003cCard\u003e flashcards;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeckBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Initializes the DeckBuilder with the data of {@code deckToCopy}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeckBuilder(Deck deckToCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        title \u003d deckToCopy.getTitle();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcards \u003d deckToCopy.getFlashcards();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(deckToCopy.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Sets the {@code Title} of the {@code Deck} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeckBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Deck} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeckBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Deck build() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new Deck(title, tags, flashcards);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 60
    }
  },
  {
    "path": "src/test/java/cardibuddy/testutil/EditDeckDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.EditCommand.EditDeckDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * A utility class to help with building EditDeckDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class EditDeckDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private EditDeckDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public EditDeckDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        descriptor \u003d new EditDeckDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public EditDeckDescriptorBuilder(EditDeckDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.descriptor \u003d new EditDeckDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns an {@code EditDeckDescriptor} with fields containing {@code deck}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public EditDeckDescriptorBuilder(Deck deck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        descriptor \u003d new EditDeckDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        descriptor.setTitle(deck.getTitle());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        descriptor.setTags(deck.getTags());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Sets the {@code Name} of the {@code EditDeckDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public EditDeckDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        descriptor.setTitle(new Title(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditDeckDescriptor}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public EditDeckDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public EditDeckDescriptor build() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 57
    }
  },
  {
    "path": "src/test/java/cardibuddy/testutil/TypicalDecks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.commands.CommandTestUtil.VALID_TAG_FRONTEND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.commands.CommandTestUtil.VALID_TAG_HARD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.commands.CommandTestUtil.VALID_TITLE_DJANGO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.logic.commands.CommandTestUtil.VALID_TITLE_REACT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.CardiBuddy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * A utility class containing a list of {@code Deck} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class TypicalDecks {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final Deck ASYNCHRONOUS \u003d new DeckBuilder().withTitle(\"Asynchronous Programming\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            .withTags(\"Difficult\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final Deck POSTGRESQL \u003d new DeckBuilder().withTitle(\"PostgreSQL\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            .withTags(\"Database\", \"Relational\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final Deck CARL \u003d new DeckBuilder().withTitle(\"Carl Kurz\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final Deck DANIEL \u003d new DeckBuilder().withTitle(\"Daniel Meier\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final Deck ELLE \u003d new DeckBuilder().withTitle(\"Elle Meyer\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final Deck FIONA \u003d new DeckBuilder().withTitle(\"Fiona Kunz\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final Deck GEORGE \u003d new DeckBuilder().withTitle(\"George Best\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final Deck HOON \u003d new DeckBuilder().withTitle(\"Hoon Meier\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final Deck IDA \u003d new DeckBuilder().withTitle(\"Ida Mueller\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // Manually added - Deck\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final Deck DJANGO \u003d new DeckBuilder().withTitle(VALID_TITLE_DJANGO)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            .withTags(VALID_TAG_FRONTEND).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final Deck REACT \u003d new DeckBuilder().withTitle(VALID_TITLE_REACT)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            .withTags(VALID_TAG_HARD, VALID_TAG_FRONTEND)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private TypicalDecks() {} // prevents instantiation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns an {@code CardiBuddy} with all the typical decks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static CardiBuddy getTypicalCardiBuddy() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        CardiBuddy ab \u003d new CardiBuddy();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (Deck deck : getTypicalDecks()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            ab.addDeck(deck);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static List\u003cDeck\u003e getTypicalDecks() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ASYNCHRONOUS, POSTGRESQL, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 59
    }
  },
  {
    "path": "src/test/java/cardibuddy/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/cardibuddy/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at link."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 15,
      "-": 100
    }
  }
]
