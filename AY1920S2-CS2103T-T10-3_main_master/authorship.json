[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "mainClassName \u003d \u0027seedu.saveit.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    archiveName \u003d \u0027save-it.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        \u0027site-name\u0027: \u0027$AVE IT\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-T10-3/main/\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        //\u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 4,
      "zwasd": 5,
      "-": 148
    }
  },
  {
    "path": "src/main/java/seedu/saveit/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/saveit/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/saveit/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.AccountList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.storage.JsonAccountListStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.storage.SaveItStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.Ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.UiManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing $AVE IT ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        SaveItStorage saveItStorage \u003d new JsonAccountListStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        storage \u003d new StorageManager(saveItStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Optional\u003cReadOnlyAccountList\u003e addressBookOptional;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList initialData;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            addressBookOptional \u003d storage.readSaveIt();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Account\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            initialData \u003d (AccountList) addressBookOptional.orElseGet(storage::readSampleSaveIt);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with a sample Account\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            initialData \u003d (AccountList) storage.readSampleSaveIt();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an sample account\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            initialData \u003d (AccountList) storage.readSampleSaveIt();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Account\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        logger.info(\"Starting Account \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping $AVE IT ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 1,
      "zwasd": 28,
      "-": 144,
      "JJiahui": 9
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String LOG_FILE \u003d \"save-it.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_EMPTY_COMMAND \u003d \"No command entered!\\nEnter \\\"help\\\" for more info\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command!\\nEnter \\\"help\\\" for more info\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \"The expenditure index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_EXPENDITURES_LISTED_OVERVIEW \u003d \"%1$d expenditures listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_INVALID_ACCOUNT_NAME \u003d \"The account with the specified name \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"\\\"%1$s\\\" was not found.\\nEnter \\\"acc list\\\" to view all accounts\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"The start date provided should be before or equal to end date.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_INVALID_TYPE_AT_INDEX \u003d \"The entry at the index is not a %1$s, \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                                                + \"please use the correct command.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_INVALID_REPEAT_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \"The repeat index provided is invalid\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "sp-shaopeng": 5,
      "zwasd": 4,
      "-": 8,
      "JJiahui": 4
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(Path filePath, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 6,
      "-": 138
    }
  },
  {
    "path": "src/main/java/seedu/saveit/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code keyword}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     *   Ignores case, substring match is allowed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     *       containsSubstringInWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     *       containsSubstringInWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     *       containsSubstringInWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param keyword cannot be null, cannot be empty, must be a single keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static boolean containsSubstringInWordIgnoreCase(String sentence, String keyword) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(keyword);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String preppedWord \u003d keyword.trim().toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single keyword\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .anyMatch(word -\u003e word.contains(preppedWord));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Checks if a string is alphanumeric."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @param s String to test."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @return True if strinc only contains alphanumeric characters and space."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static boolean isAlphanumeric(String s) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return s.matches(\"[a-zA-Z0-9 ]+\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 13,
      "-": 66,
      "JJiahui": 26
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.BaseExp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    ReportCommandResult executeReportWindowCommand(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns the Account."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @see seedu.saveit.model.Model#getAccountList()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    ReadOnlyAccountList getAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of expenditures */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    ObservableList\u003cExpenditure\u003e getFilteredExpenditureList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of expenditures */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    ObservableList\u003cRepeat\u003e getFilteredRepeatList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    ObservableList\u003cBaseExp\u003e getFilteredBaseExpList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 2,
      "zwasd": 15,
      "-": 38,
      "JJiahui": 6
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.TopLevelParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.report.ReportWindowParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.BaseExp;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final TopLevelParser topLevelParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private final ReportWindowParser reportWindowParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        topLevelParser \u003d new TopLevelParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        reportWindowParser \u003d new ReportWindowParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Command command \u003d topLevelParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            storage.saveSaveIt(model.getAccountList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportCommandResult executeReportWindowCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportCommandResult commandResult;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportCommand command \u003d reportWindowParser.parse(commandText);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ReadOnlyAccountList getAddressBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return model.getAccountList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ObservableList\u003cExpenditure\u003e getFilteredExpenditureList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return model.getFilteredExpenditureList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ObservableList\u003cRepeat\u003e getFilteredRepeatList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return model.getFilteredRepeatList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ObservableList\u003cBaseExp\u003e getFilteredBaseExpList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return model.getFilteredBaseExpList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 11,
      "zwasd": 23,
      "-": 58,
      "JJiahui": 12
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.ExportFile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.Graph;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Indicates the action of report command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private final boolean isShowReport;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Graph graph;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private ExportFile file;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The indicator of the current active date in the calendar view should change."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final boolean updateCalendar;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private LocalDate newActiveDate \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * The indicator of the current active account name should change."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private boolean updateAccountName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private String activeAccountName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * The indicator of the current budget view should change."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private boolean updateBudgetView;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Double budget;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private double totalSpending;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean exit, boolean isShowReport,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                         boolean updateCalendar,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                         boolean updateAccountName, boolean updateBudgetView) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.isShowReport \u003d isShowReport;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.updateCalendar \u003d updateCalendar;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.updateAccountName \u003d updateAccountName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.updateBudgetView \u003d updateBudgetView;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public CommandResult(String feedbackToUser, LocalDate newActiveDate, Double budget, double totalSpending) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this(feedbackToUser, false, false,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                true, false, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.newActiveDate \u003d newActiveDate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.totalSpending \u003d totalSpending;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public CommandResult(String feedbackToUser, Graph graph, boolean showReport) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this(feedbackToUser, false, showReport,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.graph \u003d graph;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public CommandResult(String feedbackToUser, ExportFile fileToExport) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this(feedbackToUser, false, false,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.file \u003d fileToExport;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    //rename"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public CommandResult(String feedbackToUser, String newAccountName) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this(feedbackToUser, false, false,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.activeAccountName \u003d newAccountName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    //checkout another account"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public CommandResult(String feedbackToUser, String newAccountName, Double budget, double totalSpending) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this(feedbackToUser, false, false,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                false, true, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.activeAccountName \u003d newAccountName;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.totalSpending \u003d totalSpending;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this(feedbackToUser, false, false, false, false, false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public CommandResult(String feedbackToUser, Double budget, double totalSpending) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this(feedbackToUser, false, false, false, false, true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.totalSpending \u003d totalSpending;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public boolean isShowReport() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return isShowReport;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ExportFile getFile() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean isUpdateCalendar() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return updateCalendar;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean isUpdateAccountName() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return updateAccountName;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public String getActiveAccountName() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.activeAccountName;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public LocalDate getNewActiveDate() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return newActiveDate;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean isUpdateBudgetView() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.updateBudgetView;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public Double getBudget() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.budget;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public double getTotalSpending() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.totalSpending;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Graph getGraph() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return graph;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                \u0026\u0026 isShowReport \u003d\u003d otherCommandResult.isShowReport"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \u0026\u0026 updateCalendar \u003d\u003d otherCommandResult.updateCalendar"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \u0026\u0026 updateAccountName \u003d\u003d otherCommandResult.updateAccountName"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \u0026\u0026 updateBudgetView \u003d\u003d otherCommandResult.updateBudgetView;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return Objects.hash(feedbackToUser, exit, isShowReport, updateCalendar, updateAccountName);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 49,
      "sp-shaopeng": 64,
      "zwasd": 1,
      "-": 55,
      "JJiahui": 19
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/ReportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Represents result of command execution in Report Window."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public abstract class ReportCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public abstract ReportCommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 10,
      "zwasd": 3
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/ReportCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.Graph;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Command result from report window."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ReportCommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private final boolean isExitReport;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private final boolean isChangeView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Graph graph;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportCommandResult(String feedbackToUser, boolean isExitReport,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                               boolean isChangeView) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.isExitReport \u003d isExitReport;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.isChangeView \u003d isChangeView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportCommandResult(String feedbackToUser, Graph graph) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //change view true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this(feedbackToUser, false, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.graph \u003d graph;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportCommandResult(String feedbackToUser, String fileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public boolean isExitReport() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return isExitReport;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public boolean isChangeView() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return isChangeView;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Graph getGraph() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return graph;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (obj instanceof ReportCommandResult) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            ReportCommandResult r \u003d (ReportCommandResult) obj;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return feedbackToUser.equals(r.feedbackToUser)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    \u0026\u0026 isExitReport \u003d\u003d r.isExitReport"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    \u0026\u0026 isChangeView \u003d\u003d r.isChangeView;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 74,
      "zwasd": 2
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/account/AccAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.account.AccLevelParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Add account."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccAddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String NAME_CONTAIN_SPACE \u003d \"The account name contains space\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String NAME_TOO_LONG \u003d \"The account name should be less than 26 characters\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String NAME_CONTAINS_INVALID_CHAR \u003d \"The account name should be alphanumeric\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New account added: \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d AccLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \": adds a new account with the given name\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"Parameters: ACCOUNT_NAME (one word containing only alphanumeric characters, less than 26 characters)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"Example: \" + AccLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD + \" groceries\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final Account toAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public AccAddCommand(Account account) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        toAdd \u003d account;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        model.addAccount(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + toAdd.getAccountName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                || (other instanceof AccAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AccAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 22,
      "zwasd": 21,
      "JJiahui": 5
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/account/AccCheckoutCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.account.AccLevelParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.MonthlySpendingCalculator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Change to another account."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccCheckoutCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"checkout\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d AccLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \": Checks out the account with the specified name.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"Parameters: ACCOUNT_NAME (one word containing only alphanumeric characters, less than 26 characters)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"Example: \" + AccLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD + \" default\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_CHECKOUT_SUCCESS \u003d \"Successfully checked out account: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final String accountName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccCheckoutCommand(String accountName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(accountName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.accountName \u003d accountName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!model.updateActiveAccount(accountName)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_ACCOUNT_NAME, accountName)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        MonthlySpendingCalculator monthlyCalculator \u003d model.getMonthlySpending(accountName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CHECKOUT_SUCCESS, accountName), accountName,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                monthlyCalculator.getBudget(), monthlyCalculator.getTotalSpending());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || (other instanceof AccCheckoutCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 accountName.equals(((AccCheckoutCommand) other).accountName));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 7,
      "zwasd": 30,
      "JJiahui": 13
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/account/AccClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.account.AccLevelParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Clears the account."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"This account\u0027s data has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d AccLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \": clears all data in this account\\nExample: \" + AccLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        model.clearActiveAccount();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || other instanceof AccClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 14,
      "-": 16,
      "JJiahui": 5
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/account/AccDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.account.AccLevelParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.MonthlySpendingCalculator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Delete account."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccDeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_DELETE_ACCOUNT_SUCCESS \u003d \"Deleted Account: \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d AccLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \": deletes the account with the specified name\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"Parameters: ACCOUNT_NAME (one word containing only alphanumeric characters, less than 26 characters)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"Example: \" + AccLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD + \" default\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final String targetAccountName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public AccDeleteCommand(String targetAccountName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(targetAccountName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.targetAccountName \u003d targetAccountName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String newActiveAccountName \u003d model.deleteAccount(this.targetAccountName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        MonthlySpendingCalculator monthlyCalculator \u003d model.getMonthlySpending();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new CommandResult(MESSAGE_DELETE_ACCOUNT_SUCCESS + this.targetAccountName,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                newActiveAccountName, monthlyCalculator.getBudget(), monthlyCalculator.getTotalSpending());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || (other instanceof AccDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 targetAccountName.equals(((AccDeleteCommand) other).targetAccountName));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 16,
      "zwasd": 27,
      "JJiahui": 4
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/account/AccListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.account.AccLevelParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Lists all expenditures in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all accounts: \\n1. default\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE \u003d \"Listed all accounts: \\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d AccLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \": lists all accounts\\n\" + \"Example: \" + AccLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String list \u003d model.getAccountList().listAllNames();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new CommandResult(MESSAGE + list);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || other instanceof AccListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 4,
      "zwasd": 13,
      "-": 16,
      "JJiahui": 3
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/account/AccRenameCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.account.AccLevelParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Rename account."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccRenameCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rename\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s has been renamed to %2$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d AccLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \": renames an account to the specified new name\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"Parameters: [OLD_NAME] NEW_NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"(each is one word containing only alphanumeric characters, less than 26 characters)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"Example: \" + AccLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD + \" default school\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final String newName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final String oldName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public AccRenameCommand(String oldName, String newName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(newName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.newName \u003d newName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.oldName \u003d oldName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String accountName \u003d model.renameAccount(this.oldName, this.newName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, oldName \u003d\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                ? \"This account\" : \"The account \" + oldName, newName), accountName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || (other instanceof AccRenameCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 newName.equals(((AccRenameCommand) other).newName)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 (oldName \u003d\u003d null \u0026\u0026 ((AccRenameCommand) other).oldName \u003d\u003d null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        || oldName !\u003d null \u0026\u0026 oldName.equals(((AccRenameCommand) other).oldName)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 17,
      "zwasd": 27,
      "JJiahui": 9
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/expenditure/ExpAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.expenditure.ExpLevelParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.MonthlySpendingCalculator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Adds a expenditure to the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpAddCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ExpLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            + \": Adds a expenditure to the $AVE IT. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"\\n\" + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + PREFIX_INFO + \"INFO \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"Example: \" + ExpLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + PREFIX_INFO + \"Chicken rice \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + PREFIX_AMOUNT + \"3.5 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + PREFIX_DATE + \"2019-09-11 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + PREFIX_TAG + \"friends\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expenditure added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENDITURE \u003d \"This expenditure already exists in $AVE IT.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final Expenditure toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final boolean getActiveDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Creates an ExpAddCommand to add the specified {@code Expenditure}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpAddCommand(Expenditure expenditure) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this(expenditure, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Creates an ExpAddCommand to add the specified {@code Expenditure}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ExpAddCommand(Expenditure expenditure, boolean getActiveDate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(expenditure);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        toAdd \u003d expenditure;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.getActiveDate \u003d getActiveDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure added \u003d !getActiveDate ? toAdd"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            : new Expenditure(toAdd.getInfo(), toAdd.getAmount(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                                new Date(model.getActiveDate().format(DateTimeFormatter.ISO_DATE)), toAdd.getTag());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        model.addExpenditure(added);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        MonthlySpendingCalculator monthlyCalculator \u003d model.getMonthlySpending();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, added), monthlyCalculator.getBudget(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                monthlyCalculator.getTotalSpending());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || (other instanceof ExpAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 getActiveDate \u003d\u003d ((ExpAddCommand) other).getActiveDate"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ExpAddCommand) other).toAdd)); // same fields"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 2,
      "sp-shaopeng": 4,
      "zwasd": 29,
      "-": 24,
      "JJiahui": 22
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/expenditure/ExpDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.expenditure.ExpLevelParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.MonthlySpendingCalculator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.BaseExp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Deletes a expenditure identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpDeleteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ExpLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \": Deletes the expenditure identified by the index number used in the displayed list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"Example: \" + ExpLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENDITURE_SUCCESS \u003d \"Deleted Expenditure: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        List\u003cBaseExp\u003e lastShownList \u003d model.getFilteredBaseExpList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        BaseExp baseExp \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!(baseExp instanceof Expenditure)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_TYPE_AT_INDEX,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    Expenditure.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure expenditureToDelete \u003d (Expenditure) baseExp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        model.deleteExpenditure(expenditureToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        MonthlySpendingCalculator monthlyCalculator \u003d model.getMonthlySpending();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXPENDITURE_SUCCESS, expenditureToDelete),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                monthlyCalculator.getBudget(), monthlyCalculator.getTotalSpending());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || (other instanceof ExpDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ExpDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "sp-shaopeng": 3,
      "zwasd": 19,
      "-": 33,
      "JJiahui": 9
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/expenditure/ExpEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.expenditure.ExpLevelParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.MonthlySpendingCalculator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.BaseExp;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Edits the details of an existing expenditure in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpEditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ExpLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \": Edits the details of the expenditure identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"by the index number used in the displayed list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"[\" + PREFIX_INFO + \"INFO] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"Example: \" + ExpLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + PREFIX_AMOUNT + \"4.3\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_EDIT_EXPENDITURE_SUCCESS \u003d \"Edited Expenditure: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENDITURE \u003d \"This expenditure already exists in $AVE IT.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final EditExpenditureDescriptor editExpenditureDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param index                     of the expenditure in the filtered expenditure list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @param editExpenditureDescriptor details to edit the expenditure with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpEditCommand(Index index, EditExpenditureDescriptor editExpenditureDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(editExpenditureDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.editExpenditureDescriptor \u003d new EditExpenditureDescriptor(editExpenditureDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        List\u003cBaseExp\u003e lastShownList \u003d model.getFilteredBaseExpList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        BaseExp baseExp \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!(baseExp instanceof Expenditure)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_TYPE_AT_INDEX,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    Expenditure.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure expenditureToEdit \u003d (Expenditure) baseExp;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure editedExpenditure \u003d createEditedExpenditure(expenditureToEdit, editExpenditureDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!expenditureToEdit.equals(editedExpenditure) \u0026\u0026 model.hasExpenditure(editedExpenditure)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENDITURE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        model.setExpenditure(expenditureToEdit, editedExpenditure);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        MonthlySpendingCalculator monthlyCalculator \u003d model.getMonthlySpending();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXPENDITURE_SUCCESS, editedExpenditure),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                monthlyCalculator.getBudget(), monthlyCalculator.getTotalSpending());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Creates and returns a {@code Expenditure} with the details of {@code expenditureToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * edited with {@code editExpenditureDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static Expenditure createEditedExpenditure(Expenditure expenditureToEdit,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                                                       EditExpenditureDescriptor editExpenditureDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assert expenditureToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Info updatedInfo \u003d editExpenditureDescriptor.getInfo().orElse(expenditureToEdit.getInfo());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Amount updatedAmount \u003d editExpenditureDescriptor.getAmount().orElse(expenditureToEdit.getAmount());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Date updatedDate \u003d editExpenditureDescriptor.getDate().orElse(expenditureToEdit.getDate());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Tag updatedTags \u003d editExpenditureDescriptor.getTag().orElse(expenditureToEdit.getTag());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new Expenditure(updatedInfo, updatedAmount, updatedDate, updatedTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!(other instanceof ExpEditCommand)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand e \u003d (ExpEditCommand) other;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 editExpenditureDescriptor.equals(e.editExpenditureDescriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Stores the details to edit the expenditure with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * corresponding field value of the expenditure."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static class EditExpenditureDescriptor {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        private Info info;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        private Tag tag;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        public EditExpenditureDescriptor() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public EditExpenditureDescriptor(EditExpenditureDescriptor toCopy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            setInfo(toCopy.info);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            setTag(toCopy.tag);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return CollectionUtil.isAnyNonNull(info, amount, date, tag);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void setInfo(Info info) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            this.info \u003d info;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public Optional\u003cInfo\u003e getInfo() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return Optional.ofNullable(info);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public Optional\u003cTag\u003e getTag() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return Optional.ofNullable(tag);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void setTag(Tag tag) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            if (!(other instanceof EditExpenditureDescriptor)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            EditExpenditureDescriptor e \u003d (EditExpenditureDescriptor) other;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return getInfo().equals(e.getInfo())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    \u0026\u0026 getTag().equals(e.getTag());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 12,
      "sp-shaopeng": 3,
      "zwasd": 73,
      "-": 102,
      "JJiahui": 22
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/expenditure/ExpListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "package seedu.saveit.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.parser.expenditure.ExpLevelParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class ExpListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ExpLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            + \": lists expenditure records\\n\" + \"Example: \" + ExpLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        model.updateFilteredBaseExpList(Model.PREDICATE_SHOW_ALL_BASEEXP);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                String.format(Messages.MESSAGE_EXPENDITURES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        model.getFilteredBaseExpList().size()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 8,
      "zwasd": 4,
      "JJiahui": 17
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/general/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": saves data and closes the application\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting $AVE IT as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, true, false, false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                 false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 2,
      "zwasd": 5,
      "-": 14,
      "JJiahui": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/general/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.BaseExp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Finds and lists all expenditures in address book whose info contains any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \": Finds all expenditures which contain any of \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"the specified keyword(s) (case-insensitive) AND the specified tag (if present).\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"Parameters: [KEYWORD...] [-t TAG]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" apple -t Food\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"Note: at least one keyword OR the tag must be specified\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final Predicate\u003cBaseExp\u003e predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final String keywordsString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final String tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public FindCommand(Predicate\u003cBaseExp\u003e predicate, String keywordsString, String tag) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.keywordsString \u003d keywordsString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public FindCommand(InfoContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.keywordsString \u003d predicate.getKeywordsString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.tag \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        model.updateFilteredBaseExpList(predicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String result \u003d (keywordsString \u003d\u003d null ? \"\" : \"Searched keywords: \" + keywordsString + \"\\n\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                + (tag \u003d\u003d null ? \"\" : \"Searched tag: \" + tag + \"\\n\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                + String.format(Messages.MESSAGE_EXPENDITURES_LISTED_OVERVIEW, model.getFilteredBaseExpList().size())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                + \"\\nEnter \\\"exp list\\\" to clear search results\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new CommandResult(result);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 2,
      "zwasd": 32,
      "JJiahui": 30
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/general/GoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.MonthlySpendingCalculator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Switch to a date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class GoCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"go\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"We are at : %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Go to a specific date\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            + \"the specified date format YYYY-MM-DD.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2001-09-11\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final LocalDate toDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public GoCommand(LocalDate toDate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.toDate \u003d toDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public LocalDate getToDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return toDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        model.updateActiveDate(toDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        YearMonth target \u003d YearMonth.from(toDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        MonthlySpendingCalculator monthlyCalculator \u003d model.getMonthlySpending(target);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toDate), toDate,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                monthlyCalculator.getBudget(), monthlyCalculator.getTotalSpending());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(obj);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return ((GoCommand) obj).getToDate().equals(this.toDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 35,
      "zwasd": 18,
      "JJiahui": 6
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/general/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            \"help [COMMAND] - Shows help, or help for the given command.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"acc OPTIONS - Account related commands (enter \u0027help acc\u0027 for more info)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"exp OPTIONS - Expenditure related commands (enter \u0027help exp\u0027 for more info)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"repeat OPTIONS - Expenditure related commands \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"(for more information on the OPTIONS, enter \u0027help repeat\u0027 for more info)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"report OPTIONS - Report related commands (enter \u0027help report\u0027 for more info)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"find OPTIONS - Searches for expenditures (enter \u0027help find\u0027 for more info)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"setbudget OPTIONS - Sets the budget for a given month (enter \u0027help setbudget\u0027 for more info)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"go DATE - Show the expenditures for the particular date.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"exit - Exits the application.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.message \u003d SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public HelpCommand(String message) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public HelpCommand(String message, boolean unknown) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.message \u003d !unknown ? message"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                : (message.isEmpty() ? \"\" : \"Unknown command \\\"\" + message + \"\\\"\\n\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        + SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 18,
      "-": 17,
      "JJiahui": 14
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/general/SetBudgetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.saveit.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_YEARMONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.saveit.logic.parser.expenditure.ExpLevelParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.MonthlySpendingCalculator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.budget.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Set budget."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class SetBudgetCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setbudget\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Budget for %s set to $%.2f.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \": Sets the budget for a certain month. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"\\n\" + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"[\" + PREFIX_YEARMONTH + \"YEARMONTH]\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"\\nExample: \" + ExpLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_AMOUNT + \"200.0 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_YEARMONTH + \"2020-04\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private YearMonth yearMonth;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private Amount budgetAmount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public SetBudgetCommand(YearMonth yearMonth, Amount budgetAmount) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(budgetAmount);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.yearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.budgetAmount \u003d budgetAmount;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (this.yearMonth \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            this.yearMonth \u003d YearMonth.from(model.getActiveDate());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        model.setBudget(new Budget(yearMonth, budgetAmount));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        MonthlySpendingCalculator monthlyCalculator \u003d model.getMonthlySpending();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, yearMonth.toString(), budgetAmount.value),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                monthlyCalculator.getBudget(), monthlyCalculator.getTotalSpending());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                || (other instanceof SetBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 yearMonth.equals(((SetBudgetCommand) other).yearMonth)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 budgetAmount.equals(((SetBudgetCommand) other).budgetAmount));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "sp-shaopeng": 10,
      "zwasd": 33,
      "JJiahui": 19
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/repeat/RepeatAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.repeat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.repeat.RepeatLevelParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.MonthlySpendingCalculator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * Add repeat object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatAddCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d RepeatLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            + \": Adds a repeating expenditure to the $AVE IT. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"\\n\" + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            + PREFIX_INFO + \"INFO \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_START_DATE + \"STARTDATE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_END_DATE + \"ENDDATE \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_PERIOD + \"PERIOD \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"\\tPERIOD \u003d daily | weekly | monthly | annually\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"Example: \" + RepeatLevelParser.COMMAND_WORD"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_INFO + \" MRT topup \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_AMOUNT + \" 50.0 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_START_DATE + \" 2019-01-01 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_END_DATE + \"2019-12-31 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_PERIOD + \"monthly \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_TAG + \" Transport\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New repeat added: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final Repeat toAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public RepeatAddCommand(Repeat repeat) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(repeat);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        toAdd \u003d repeat;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        model.addRepeat(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        MonthlySpendingCalculator monthlyCalculator \u003d model.getMonthlySpending();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                monthlyCalculator.getBudget(), monthlyCalculator.getTotalSpending());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                || (other instanceof RepeatAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RepeatAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 2,
      "sp-shaopeng": 44,
      "zwasd": 15,
      "JJiahui": 12
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/repeat/RepeatDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.repeat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.repeat.RepeatLevelParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.MonthlySpendingCalculator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.BaseExp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * Delete repeat object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatDeleteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d RepeatLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \": Deletes the repeat identified by the index number used in the displayed list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"Example: \" + RepeatLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_DELETE_REPEAT_SUCCESS \u003d \"Deleted Repeat: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public RepeatDeleteCommand(Index index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        List\u003cBaseExp\u003e lastShownList \u003d model.getFilteredBaseExpList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REPEAT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        BaseExp baseExp \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!(baseExp instanceof Repeat)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_TYPE_AT_INDEX,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    Repeat.class.getSimpleName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Repeat repeatToDelete \u003d (Repeat) baseExp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        model.deleteRepeat(repeatToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        MonthlySpendingCalculator monthlyCalculator \u003d model.getMonthlySpending();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_REPEAT_SUCCESS, repeatToDelete),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                monthlyCalculator.getBudget(), monthlyCalculator.getTotalSpending());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                || (other instanceof RepeatDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RepeatDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "sp-shaopeng": 44,
      "zwasd": 11,
      "JJiahui": 12
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/repeat/RepeatEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.repeat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.repeat.RepeatLevelParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.MonthlySpendingCalculator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.BaseExp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat.Period;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * Edit repeat object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatEditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d RepeatLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            + \": Edits the details of the repeat identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"by the index number used in the displayed list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            + \"[\" + PREFIX_INFO + \"INFO] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"STARTDATE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"ENDDATE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"[\" + PREFIX_PERIOD + \"PERIOD] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"\\tPERIOD \u003d daily | weekly | monthly | annually\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"Example: \" + RepeatLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            + PREFIX_AMOUNT + \"4.3\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_EDIT_REPEAT_SUCCESS \u003d \"Edited Repeat: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final RepeatEditCommand.EditRepeatDescriptor editRepeatDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public RepeatEditCommand(Index index, RepeatEditCommand.EditRepeatDescriptor editRepeatDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(editRepeatDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.editRepeatDescriptor \u003d new RepeatEditCommand.EditRepeatDescriptor(editRepeatDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        List\u003cBaseExp\u003e lastShownList \u003d model.getFilteredBaseExpList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        BaseExp baseExp \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!(baseExp instanceof Repeat)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_TYPE_AT_INDEX,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    Repeat.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Repeat repeatToEdit \u003d (Repeat) baseExp;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Repeat editedRepeat \u003d createEditedRepeat(repeatToEdit, editRepeatDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        editedRepeat.checkDateRange();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        model.setRepeat(repeatToEdit, editedRepeat);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        MonthlySpendingCalculator monthlyCalculator \u003d model.getMonthlySpending();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_REPEAT_SUCCESS, editedRepeat),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                monthlyCalculator.getBudget(), monthlyCalculator.getTotalSpending());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Creates and returns a {@code Repeat} with the details of {@code repeatToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * edited with {@code editRepeatDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static Repeat createEditedRepeat(Repeat repeatToEdit,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                                       RepeatEditCommand.EditRepeatDescriptor editRepeatDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assert repeatToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Info updatedInfo \u003d editRepeatDescriptor.getInfo().orElse(repeatToEdit.getInfo());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Amount updatedAmount \u003d editRepeatDescriptor.getAmount().orElse(repeatToEdit.getAmount());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Date updatedStartDate \u003d editRepeatDescriptor.getStartDate().orElse(repeatToEdit.getStartDate());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Date updatedEndDate \u003d editRepeatDescriptor.getEndDate().orElse(repeatToEdit.getEndDate());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Tag updatedTags \u003d editRepeatDescriptor.getTag().orElse(repeatToEdit.getTag());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Period updatedPeriod \u003d editRepeatDescriptor.getPeriod().orElse(repeatToEdit.getPeriod());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new Repeat(updatedInfo, updatedAmount, updatedStartDate, updatedEndDate, updatedTags,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                updatedPeriod.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (!(other instanceof RepeatEditCommand)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        RepeatEditCommand e \u003d (RepeatEditCommand) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \u0026\u0026 editRepeatDescriptor.equals(e.editRepeatDescriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Stores the details to edit the Repeat with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * corresponding field value of the repeat."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static class EditRepeatDescriptor {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        private Info info;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        private Date startDate;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        private Date endDate;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        private Tag tag;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        private Period period;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public EditRepeatDescriptor() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public EditRepeatDescriptor(RepeatEditCommand.EditRepeatDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            setInfo(toCopy.info);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            setTag(toCopy.tag);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            setPeriod(toCopy.period);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return CollectionUtil.isAnyNonNull(info, amount, startDate, endDate, period, tag);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public void setInfo(Info info) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.info \u003d info;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public Optional\u003cInfo\u003e getInfo() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return Optional.ofNullable(info);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public void setStartDate(Date date) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.startDate \u003d date;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public void setEndDate(Date date) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.endDate \u003d date;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public void setPeriod(Period period) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.period \u003d period;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public void setPeriod(String duration) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (duration.equalsIgnoreCase(\"daily\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                this.period \u003d Period.DAILY;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            } else if (duration.equalsIgnoreCase(\"monthly\")) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                this.period \u003d Period.MONTHLY;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            } else if (duration.equalsIgnoreCase(\"weekly\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                this.period \u003d Period.WEEKLY;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            } else if (duration.equalsIgnoreCase(\"annually\")) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                this.period \u003d Period.ANNUALLY;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public Optional\u003cPeriod\u003e getPeriod() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return Optional.ofNullable(period);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public Optional\u003cDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public Optional\u003cDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public Optional\u003cTag\u003e getTag() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return Optional.ofNullable(tag);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public void setTag(Tag tag) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (!(other instanceof RepeatEditCommand.EditRepeatDescriptor)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            RepeatEditCommand.EditRepeatDescriptor e \u003d (RepeatEditCommand.EditRepeatDescriptor) other;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return getInfo().equals(e.getInfo())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    \u0026\u0026 getPeriod().equals(e.getPeriod())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    \u0026\u0026 getTag().equals(e.getTag());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 197,
      "zwasd": 23,
      "JJiahui": 28
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/report/ExportReportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_GRAPH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_ORGANISE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.SnapshotParameters;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.Chart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.report.ReportLevelParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.ExportFile;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.Report;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.Bar;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.Graph;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.Pie;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Exports report."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExportReportCommand extends Command {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The report has been exported to Report/%1$s.png\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ReportLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \": Exports the report. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"\\n\" + \"Parameters: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_START_DATE + \" START_DATE \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_END_DATE + \" END_DATE \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_GRAPH + \" GRAPH_TYPE \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_ORGANISE + \" ORGANISATION \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_FILENAME + \" FILE_NAME \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"\\tGRAPH_TYPE \u003d pie | bar, ORGANISATION \u003d tag | month\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"Example: \" + ReportLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \" \" + PREFIX_START_DATE + \" 2020-03-22 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + PREFIX_END_DATE + \" 2020-03-25 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + PREFIX_GRAPH + \" pie \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + PREFIX_ORGANISE + \" tag \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_FILENAME + \" report2 \\n(will be exported as report2.png)\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final Report toExport;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private HashMap statsToExport;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Report.GraphType format;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Graph graph;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ExportReportCommand(Report toExport, String fileName) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        requireNonNull(toExport);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.toExport \u003d toExport;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Exports the report."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void export(ExportFile file) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            WritableImage img \u003d snapshot(file.getGraph());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            file.export(img);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new CommandException(\"File already exists.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Takes a snapshot of the graph"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * to be exported."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @return image of the graph."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public WritableImage snapshot(Graph graph) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Node node \u003d (Node) graph.constructGraph();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Scene sc \u003d new Scene((Parent) node, 800, 600);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Chart chart \u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (node instanceof PieChart) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            chart \u003d (PieChart) node;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (node instanceof BarChart) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            chart \u003d (BarChart) node;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assert chart !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        chart.setAnimated(false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        WritableImage img \u003d new WritableImage(800, 600);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        node.snapshot(new SnapshotParameters(), img);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return img;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (toExport.getOrganise().equals(\"tag\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            statsToExport \u003d new GenerateStats(toExport, model).generateStatsByTags();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (toExport.getOrganise().equals(\"month\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            statsToExport \u003d new GenerateStats(toExport, model).generateStatsByMonth();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        format \u003d toExport.getFormat();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (format.equals(Report.GraphType.PIE)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            graph \u003d new Pie(statsToExport, toExport.getOrganise());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (format.equals(Report.GraphType.BAR)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            graph \u003d new Bar(statsToExport, toExport.getOrganise());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ExportFile f \u003d new ExportFile(fileName, graph);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        export(f);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, fileName), f);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                || (other instanceof ExportReportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                \u0026\u0026 toExport.equals(((ExportReportCommand) other).toExport)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                \u0026\u0026 fileName.equals(((ExportReportCommand) other).fileName));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 106,
      "sp-shaopeng": 9,
      "zwasd": 22,
      "JJiahui": 12
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/report/GenerateStats.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReportableAccount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.UniqueExpenditureList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.Report;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Internal statistics generation command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class GenerateStats {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Report report;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public GenerateStats(Report report, Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.report \u003d report;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Calculate expenditures under each tag."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @return HashMap mapping tag to its spending."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public HashMap\u003cTag, Double\u003e generateStatsByTags() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportableAccount acct \u003d model.getReportableAccount();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Map expenditures \u003d acct.getExpFromToInclusive(report.getStartDate(), report.getEndDate());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Set keySet \u003d expenditures.keySet();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        HashMap\u003cTag, Double\u003e output \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Iterator itr \u003d keySet.iterator();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        while (itr.hasNext()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            UniqueExpenditureList list \u003d (UniqueExpenditureList) expenditures.get(itr.next());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            Iterator listItr \u003d list.iterator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            while (listItr.hasNext()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                Expenditure current \u003d (Expenditure) listItr.next();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                if (current.getAmount().value \u003d\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                Tag tag \u003d current.getTag();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                if (output.containsKey(tag)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    output.replace(tag, output.get(tag) + current.getAmount().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    output.put(tag, current.getAmount().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Map repeats \u003d acct.getRepeatExpFromToInclusiveByRepeat(report.getStartDate(), report.getEndDate());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        for (Repeat repeat : (Set\u003cRepeat\u003e) repeats.keySet()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            double amt \u003d (double) repeats.get(repeat);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (amt \u003d\u003d 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            Tag tag \u003d repeat.getTag();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (output.containsKey(tag)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                output.replace(tag, output.get(tag) + amt);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                output.put(tag, amt);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Calculate expenditures under each month."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @return HashMap mapping month to month\u0027s spending."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public HashMap\u003cString, Double\u003e generateStatsByMonth() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        HashMap\u003cString, Double\u003e output \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportableAccount acct \u003d model.getReportableAccount();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Map\u003cDate, UniqueExpenditureList\u003e expenditures \u003d acct.getExpFromToInclusive(report.getStartDate(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                report.getEndDate());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        for (Date date : expenditures.keySet()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            UniqueExpenditureList list \u003d expenditures.get(date);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            Iterator listItr \u003d list.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            while (listItr.hasNext()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                Expenditure current \u003d (Expenditure) listItr.next();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                if (current.getAmount().value \u003d\u003d 0.0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                String month \u003d String.valueOf(YearMonth.from(date.localDate));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                if (output.containsKey(month)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    output.replace(month, output.get(month) + current.getAmount().value);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    output.put(month, current.getAmount().value);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Map\u003cString, Double\u003e repeats \u003d acct.getRepeatExpFromToInclusiveByMonth(report.getStartDate(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                report.getEndDate());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        for (String yearMonth : repeats.keySet()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            double amount \u003d repeats.get(yearMonth);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (amount \u003d\u003d 0.0) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (output.containsKey(yearMonth)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                output.replace(yearMonth, output.get(yearMonth) + repeats.get(yearMonth));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                output.put(yearMonth, repeats.get(yearMonth));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 144,
      "zwasd": 10
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/report/PrintReportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_GRAPH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_ORGANISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.print.PageLayout;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.print.PrinterJob;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.SnapshotParameters;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.Chart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.transform.Scale;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.report.ReportLevelParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.Report;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.Bar;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.Graph;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.Pie;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.exceptions.PrinterException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Prints report."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class PrintReportCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"print\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Setting up print job.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"Report cannot be printed\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ReportLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \": Prints the report. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"\\n\" + \"Parameters:  \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_START_DATE + \" START_DATE \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_END_DATE + \" END_DATE \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_GRAPH + \" GRAPH_TYPE \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_ORGANISE + \" ORGANISATION \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"\\tGRAPH_TYPE \u003d pie | bar, ORGANISATION \u003d tag | month\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"Example: \" + ReportLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \" \" + PREFIX_START_DATE + \" 2020-03-22 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + PREFIX_END_DATE + \" 2020-03-25 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + PREFIX_GRAPH + \" pie \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + PREFIX_ORGANISE + \" tag \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private final Report toPrint;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private HashMap statsToPrint;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Report.GraphType format;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Graph graph;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public PrintReportCommand(Report toPrint) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        requireNonNull(toPrint);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.toPrint \u003d toPrint;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Invokes printer job of Javafx."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @throws PrinterException if job cannot finish."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void printerJob(Graph graph) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            PrinterJob printerJob \u003d PrinterJob.createPrinterJob();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            PageLayout pageLayout \u003d printerJob.getJobSettings().getPageLayout();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            WritableImage snapshot \u003d snapshot(graph);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            ImageView ivSnapshot \u003d new ImageView(snapshot);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            double scaleX \u003d pageLayout.getPrintableWidth() / ivSnapshot.getImage().getWidth();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            double scaleY \u003d pageLayout.getPrintableHeight() / ivSnapshot.getImage().getHeight();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            double scale \u003d Math.min(scaleX, scaleY);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (scale \u003c 1.0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                ivSnapshot.getTransforms().add(new Scale(scale, scale));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            boolean jobStatus \u003d printerJob.printPage(ivSnapshot);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (jobStatus) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                printerJob.endJob();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                printerJob.cancelJob();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                throw new PrinterException(\"Set available printer as default \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + \"printer before printing\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new CommandException(\"Set available printer as default \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    + \"printer before printing.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Takes a snapshot of the graph"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * to be exported."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @return image of the graph."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public WritableImage snapshot(Graph graph) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Node node \u003d (Node) graph.constructGraph();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Scene sc \u003d new Scene((Parent) node, 800, 600);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Chart chart \u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (node instanceof PieChart) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            chart \u003d (PieChart) node;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (node instanceof BarChart) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            chart \u003d (BarChart) node;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assert chart !\u003d null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        chart.setAnimated(false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        WritableImage img \u003d new WritableImage(800, 600);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        node.snapshot(new SnapshotParameters(), img);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return img;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (toPrint.getOrganise().equals(\"tag\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            statsToPrint \u003d new GenerateStats(toPrint, model).generateStatsByTags();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (toPrint.getOrganise().equals(\"month\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            statsToPrint \u003d new GenerateStats(toPrint, model).generateStatsByMonth();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new CommandException(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        format \u003d toPrint.getFormat();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (format.equals(Report.GraphType.PIE)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            graph \u003d new Pie(statsToPrint, toPrint.getOrganise());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (format.equals(Report.GraphType.BAR)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            graph \u003d new Bar(statsToPrint, toPrint.getOrganise());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new CommandException(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        printerJob(graph);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, graph, false);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                || (other instanceof PrintReportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \u0026\u0026 toPrint.equals(((PrintReportCommand) other).toPrint));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 145,
      "sp-shaopeng": 9,
      "zwasd": 9,
      "JJiahui": 5
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/report/ReportWindowExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Exit command for report window."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ReportWindowExitCommand extends ReportCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_EXIT \u003d \"Exiting report window!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportWindowExitCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportCommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new ReportCommandResult(MESSAGE_EXIT, true, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 20,
      "zwasd": 5
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/report/ReportWindowExportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "package seedu.saveit.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.SnapshotParameters;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.Chart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.ExportFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.Graph;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.ReportWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Export command for report window."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ReportWindowExportCommand extends ReportCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The report has been exported to Report/%1$s.png\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \": Exports the report.\\nParameters: FILE_NAME\" + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"Example: export report2 (will be exported as report2.png)\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportWindowExportCommand(String fileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Exports report."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param fileName fileName of the file to export to."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void export(String fileName) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            WritableImage img \u003d snapshot();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            ExportFile file \u003d new ExportFile(fileName, ReportWindow.getGraph());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            file.export(img);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (e instanceof NullPointerException) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                throw new CommandException(\"Generate report before printing.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            } else if (e instanceof IOException) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                throw new CommandException(\"File already exists.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Takes snapshot of report to export."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public WritableImage snapshot() throws NullPointerException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Graph currentGraph \u003d ReportWindow.getGraph();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (currentGraph \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Node node;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        node \u003d (Node) currentGraph.constructGraph();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Scene sc \u003d new Scene((Parent) node, 800, 600);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Chart chart \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (node instanceof PieChart) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            chart \u003d (PieChart) node;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (node instanceof BarChart) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            chart \u003d (BarChart) node;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assert chart !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        chart.setAnimated(false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        WritableImage img \u003d new WritableImage(800, 600);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        node.snapshot(new SnapshotParameters(), img);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return img;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportCommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        export(fileName);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new ReportCommandResult(String.format(MESSAGE_SUCCESS, fileName), fileName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 93,
      "JJiahui": 5
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/report/ReportWindowHelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "package seedu.saveit.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Help command for report window."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ReportWindowHelpCommand extends ReportCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            \"view START_DATE END_DATE GRAPH_TYPE ORGANISATION - shows the report\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"print - prints the current graph\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"export FILE_NAME - exports the current graph\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"exit - Exits the report window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportCommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new ReportCommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 19,
      "JJiahui": 3
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/report/ReportWindowPrintCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.print.PageLayout;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.print.PrinterJob;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.SnapshotParameters;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.Chart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.transform.Scale;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.Graph;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.ReportWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.exceptions.PrinterException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Prints the report."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ReportWindowPrintCommand extends ReportCommand {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"print\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_PRINT \u003d \"Setting up print jpb.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Invokes printer job from Javafx."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @throws PrinterException if job cannot finish."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void printerJob(WritableImage snapshot) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            PrinterJob printerJob \u003d PrinterJob.createPrinterJob();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            PageLayout pageLayout \u003d printerJob.getJobSettings().getPageLayout();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            ImageView imgView \u003d new ImageView(snapshot);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            double scaleX \u003d pageLayout.getPrintableWidth() / imgView.getImage().getWidth();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            double scaleY \u003d pageLayout.getPrintableHeight() / imgView.getImage().getHeight();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            double scale \u003d Math.min(scaleX, scaleY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (scale \u003c 1.0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                imgView.getTransforms().add(new Scale(scale, scale));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            boolean jobStatus \u003d printerJob.printPage(imgView);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (jobStatus) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                printerJob.endJob();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                printerJob.cancelJob();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                throw new PrinterException(\"Set available printer as default \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + \"printer before printing.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new CommandException(\"Set available printer as default \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    + \"printer before printing.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Takes a snapshot of report."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public WritableImage snapshot() throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Graph currentGraph \u003d ReportWindow.getGraph();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (currentGraph \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new CommandException(\"Generate report before printing.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Node node;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        node \u003d (Node) currentGraph.constructGraph();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Scene sc \u003d new Scene((Parent) node, 800, 600);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Chart chart \u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (node instanceof PieChart) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            chart \u003d (PieChart) node;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (node instanceof BarChart) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            chart \u003d (BarChart) node;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assert chart !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        chart.setAnimated(false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        WritableImage img \u003d new WritableImage(800, 600);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        node.snapshot(new SnapshotParameters(), img);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return img;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportCommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        WritableImage snapshot \u003d snapshot();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        printerJob(snapshot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new ReportCommandResult(MESSAGE_PRINT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 103,
      "zwasd": 5
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/report/ReportWindowViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.Report;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.Bar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.Graph;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.Pie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * View report command in report window."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ReportWindowViewCommand extends ReportCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Report is generated\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \": Shows the report. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"\\nParameters: (note: no prefixes required)\\n \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"START_DATE: YYYY-MM-DD  \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"END_DATE:  YYYY-MM-DD  \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \" GRAPH_TYPE: pie | bar  \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \" ORGANISATION : tag | month\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"Example: view 2020-03-22 2020-03-25 pie tag \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private HashMap statsToDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Report.GraphType format;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Report toView;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Graph graph;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportWindowViewCommand(Report toView) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        requireNonNull(toView);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.toView \u003d toView;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportCommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (toView.getOrganise().equals(\"tag\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            statsToDisplay \u003d new GenerateStats(toView, model).generateStatsByTags();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (toView.getOrganise().equals(\"month\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            statsToDisplay \u003d new GenerateStats(toView, model).generateStatsByMonth();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        format \u003d toView.getFormat();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (format.equals(Report.GraphType.PIE)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            graph \u003d new Pie(statsToDisplay, toView.getOrganise());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (format.equals(Report.GraphType.BAR)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            graph \u003d new Bar(statsToDisplay, toView.getOrganise());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new ReportCommandResult(MESSAGE_SUCCESS, graph);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                || (other instanceof ReportWindowViewCommand// instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                \u0026\u0026 toView.equals(((ReportWindowViewCommand) other).toView));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 59,
      "zwasd": 8,
      "JJiahui": 11
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/commands/report/ViewReportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_GRAPH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_ORGANISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.report.ReportLevelParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.Report;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.Bar;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.Graph;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.Pie;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Views report."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ViewReportCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Report is generated\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"Report cannot be generated\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ReportLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \": Shows the report. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"\\n\" + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_START_DATE + \" START_DATE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_END_DATE + \" END_DATE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_GRAPH + \" GRAPH_TYPE \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + PREFIX_ORGANISE + \" ORGANISATION \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"\\tGRAPH_TYPE \u003d pie | bar, ORGANISATION \u003d tag | month\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"Example: \" + ReportLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \" \" + PREFIX_START_DATE + \" 2020-03-22 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + PREFIX_END_DATE + \" 2020-03-25 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + PREFIX_GRAPH + \" pie \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + PREFIX_ORGANISE + \" tag\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final Report toView;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private HashMap statsToDisplay;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Report.GraphType format;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Graph graph;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public ViewReportCommand(Report toView) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        requireNonNull(toView);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.toView \u003d toView;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (toView.getOrganise().equals(\"tag\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            statsToDisplay \u003d new GenerateStats(toView, model).generateStatsByTags();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (toView.getOrganise().equals(\"month\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            statsToDisplay \u003d new GenerateStats(toView, model).generateStatsByMonth();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new CommandException(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        format \u003d toView.getFormat();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (format.equals(Report.GraphType.PIE)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            graph \u003d new Pie(statsToDisplay, toView.getOrganise());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (format.equals(Report.GraphType.BAR)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            graph \u003d new Bar(statsToDisplay, toView.getOrganise());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new CommandException(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, graph, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                || (other instanceof ViewReportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \u0026\u0026 toView.equals(((ViewReportCommand) other).toView));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 47,
      "sp-shaopeng": 16,
      "zwasd": 22,
      "JJiahui": 5
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Prefix PREFIX_INFO \u003d new Prefix(\"-i \");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"-a \");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"-d \");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"-t \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"-sd \");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"-ed \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Prefix PREFIX_PERIOD \u003d new Prefix(\"-p \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Prefix PREFIX_YEARMONTH \u003d new Prefix(\"-ym \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final Prefix PREFIX_GRAPH \u003d new Prefix(\"-g \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final Prefix PREFIX_FILENAME \u003d new Prefix(\"-f \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final Prefix PREFIX_ORGANISE \u003d new Prefix(\"-o \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 4,
      "sp-shaopeng": 4,
      "zwasd": 5,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/ParserReportWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public interface ParserReportWindow\u003cT extends ReportCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 13,
      "zwasd": 3
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.ExportFile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.Report;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses a {@code String info} into a {@code Info}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @throws ParseException if the given {@code info} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static Info parseInfo(String info) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(info);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String trimmedInfo \u003d info.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!Info.isValidInfo(trimmedInfo)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ParseException(Info.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new Info(trimmedInfo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!seedu.saveit.model.expenditure.Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ParseException(seedu.saveit.model.expenditure.Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Check if two given date {@code Date startDate and Date endDate} are in the right order."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @throws ParseException if the given {@code Date startDate and Date endDate} are in the wrong order."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static boolean checkDateRange(Date startDate, Date endDate) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(endDate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (!Date.isValidDateRange(startDate, endDate)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(Date.START_END_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses a {@code String amount} into an {@code Amount}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Parses a {@code String period} into a {@code Period}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @throws ParseException if the given {@code period} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static String parsePeriod(String period) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(period);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String trimmedPeriod \u003d period.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!Repeat.Period.isValidPeriod(trimmedPeriod)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(Repeat.PERIOD_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return trimmedPeriod;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Parses a {@code String yearMonth} into a {@code YearMonth}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @throws ParseException if the given {@code yearMonth} is invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static YearMonth parseYearMonth(String yearMonth) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(yearMonth);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (yearMonth.isEmpty()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String[] trimmedYearMonth \u003d yearMonth.trim().split(\"-\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (trimmedYearMonth.length \u003e\u003d 3) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                throw new ParseException(\"YearMonth should be in a format of YYYY-MM: E.g 2019-02\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            int year \u003d Integer.parseInt(trimmedYearMonth[0]);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            int month \u003d Integer.parseInt(trimmedYearMonth[1]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return YearMonth.of(year, month);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(\"YearMonth should be in a format of YYYY-MM: E.g 2019-02\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Parses a {@code String graph} into a {@code Report.GraphType}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @throws ParseException if the give {@code graph} is invalid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static Report.GraphType parseGraph(String graph) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        requireNonNull(graph);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String trimmedGraph \u003d graph.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!Report.GraphType.isValidGraph(trimmedGraph)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(Report.GraphType.GRAPH_TYPE_MESSAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return Report.GraphType.mapToGraphType(graph);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Parses a {@code String organise} into a {@code String organise}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @throws ParseException if given {@code organise} is invalid."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static String parseOrganise(String organise) throws ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        requireNonNull(organise);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String trimmedOrganised \u003d organise.trim();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!Report.isValidOrganise(trimmedOrganised)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(Report.ORGANISE_TYPE_MESSAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return trimmedOrganised;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Parses a {@code String fileName} into {@code String fileNameTrimmed}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @throws ParseException if {@code String fileName} is invalid."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static String parseFileName(String fileName) throws ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String fileNameTrimmed \u003d fileName.trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!ExportFile.isValidFileName(fileNameTrimmed)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(ExportFile.FILENAME_CONSTRAINT);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return fileNameTrimmed;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 56,
      "sp-shaopeng": 49,
      "zwasd": 30,
      "-": 60,
      "JJiahui": 3
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/TopLevelParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_EMPTY_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.GoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.saveit.logic.commands.general.SetBudgetCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.account.AccLevelParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.expenditure.ExpLevelParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.general.FindCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.general.GoCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.general.HelpCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.saveit.logic.parser.general.SetBudgetCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.repeat.RepeatLevelParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.report.ReportLevelParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class TopLevelParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException(MESSAGE_EMPTY_COMMAND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case ExpLevelParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new ExpLevelParser().parseCommand(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case ReportLevelParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new ReportLevelParser().parseCommand(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case AccLevelParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new AccLevelParser().parseCommand(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        case RepeatLevelParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new RepeatLevelParser().parseCommand(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case GoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new GoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        case SetBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new SetBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 3,
      "zwasd": 28,
      "-": 44,
      "JJiahui": 15
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/account/AccAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccAddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse account add command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccAddCommandParser implements Parser\u003cAccAddCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AccAddCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * and returns an AccAddCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public AccAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (trimmedArgs.contains(\" \") || trimmedArgs.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    AccAddCommand.NAME_CONTAIN_SPACE + \"\\n\" + AccAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (trimmedArgs.length() \u003e\u003d 26) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    AccAddCommand.NAME_TOO_LONG + \"\\n\" + AccAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!StringUtil.isAlphanumeric(trimmedArgs)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    AccAddCommand.NAME_CONTAINS_INVALID_CHAR + \"\\n\" + AccAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Account newAccount \u003d new Account(trimmedArgs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new AccAddCommand(newAccount);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 14,
      "zwasd": 21,
      "JJiahui": 7
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/account/AccCheckoutCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccCheckoutCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse change account."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccCheckoutCommandParser implements Parser\u003cAccCheckoutCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccCheckoutCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccCheckoutCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String[] accountName \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (accountName.length !\u003d 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccCheckoutCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new AccCheckoutCommand(accountName[0]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 14,
      "JJiahui": 13
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/account/AccClearCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse clearing of account."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccClearCommandParser implements Parser\u003cAccClearCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AccClearCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * and returns an AccClearCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public AccClearCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (trimmedArgs.length() \u003e 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new AccClearCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 26,
      "JJiahui": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/account/AccDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccAddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse delete account."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccDeleteCommandParser implements Parser\u003cAccDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AccDeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * and returns an AccDeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public AccDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (trimmedArgs.contains(\" \") || trimmedArgs.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    AccAddCommand.NAME_CONTAIN_SPACE + \"\\n\" + AccDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (trimmedArgs.length() \u003e\u003d 26) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccAddCommand.NAME_TOO_LONG"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    + \"\\n\" + AccDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new AccDeleteCommand(trimmedArgs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 14,
      "zwasd": 16,
      "JJiahui": 7
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/account/AccLevelParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccCheckoutCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccDeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccRenameCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.TopLevelParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse account commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccLevelParser extends TopLevelParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"acc\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"acc add\\nacc checkout\\nacc clear\\nacc delete\\nacc list\\nacc rename\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String HELP_MESSAGE \u003d AccAddCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                                + AccDeleteCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                                + AccCheckoutCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                                + AccRenameCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                                + AccListCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                                + AccClearCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case AccAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new AccAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case AccDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new AccDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case AccCheckoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new AccCheckoutCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case AccRenameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new AccRenameCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case AccClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new AccClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case AccListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new AccListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 20,
      "zwasd": 21,
      "-": 36,
      "JJiahui": 2
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/account/AccListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse list accounts."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccListCommandParser implements Parser\u003cAccListCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AccListCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * and returns an AccListCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public AccListCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (trimmedArgs.length() \u003e 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new AccListCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 10,
      "zwasd": 16,
      "JJiahui": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/account/AccRenameCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.account.AccAddCommand.NAME_CONTAINS_INVALID_CHAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.account.AccAddCommand.NAME_TOO_LONG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccRenameCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse rename account."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccRenameCommandParser implements Parser\u003cAccRenameCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AccRenameCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * and returns an AccRenameCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public AccRenameCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccRenameCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String [] allName \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String oldName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String newName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (allName.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            oldName \u003d allName[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            newName \u003d allName[1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else if (allName.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            oldName \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            newName \u003d allName[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    \"The number of parameters is incorrect\\n\" + AccRenameCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if ((oldName !\u003d null \u0026\u0026 oldName.length() \u003e\u003d 26) || newName.length() \u003e\u003d 26) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    NAME_TOO_LONG + \"\\n\" + AccRenameCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if ((oldName !\u003d null \u0026\u0026 !StringUtil.isAlphanumeric(oldName)) || !StringUtil.isAlphanumeric(newName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    NAME_CONTAINS_INVALID_CHAR + \"\\n\" + AccRenameCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new AccRenameCommand(oldName, newName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 16,
      "zwasd": 25,
      "JJiahui": 17
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/expenditure/ExpAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parses input arguments and creates a new ExpAddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpAddCommandParser implements Parser\u003cExpAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExpAddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * and returns an ExpAddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INFO, PREFIX_AMOUNT, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INFO, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Info info \u003d ParserUtil.parseInfo(argMultimap.getValue(PREFIX_INFO).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).orElseGet(() -\u003e LocalDate.now().toString()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).orElseGet(() -\u003e \"Others\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Expenditure expenditure \u003d new Expenditure(info, amount, date, tag);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        boolean getActiveDate \u003d !arePrefixesPresent(argMultimap, PREFIX_DATE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new ExpAddCommand(expenditure, getActiveDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 4,
      "zwasd": 28,
      "-": 29,
      "JJiahui": 3
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/expenditure/ExpDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parses input arguments and creates a new ExpDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpDeleteCommandParser implements Parser\u003cExpDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExpDeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * and returns a ExpDeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new ExpDeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                            seedu.saveit.logic.commands.expenditure.ExpDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 32
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/expenditure/ExpEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpEditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parses input arguments and creates a new ExpEditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpEditCommandParser implements Parser\u003cExpEditCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExpEditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * and returns an ExpEditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INFO, PREFIX_AMOUNT, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor editExpenditureDescriptor \u003d new EditExpenditureDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INFO).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            editExpenditureDescriptor.setInfo(ParserUtil.parseInfo(argMultimap.getValue(PREFIX_INFO).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            editExpenditureDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            editExpenditureDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            editExpenditureDescriptor.setTag(ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!editExpenditureDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ParseException(ExpEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new ExpEditCommand(index, editExpenditureDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 4,
      "zwasd": 31,
      "-": 29,
      "JJiahui": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/expenditure/ExpLevelParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpDeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpEditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.TopLevelParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse expenditure commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpLevelParser extends TopLevelParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exp\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"exp add\\nexp edit\\nexp delete\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String HELP_MESSAGE \u003d ExpAddCommand.MESSAGE_USAGE + \" \\n\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                                + ExpDeleteCommand.MESSAGE_USAGE + \" \\n\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                                + ExpListCommand.MESSAGE_USAGE + \" \\n\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                                + ExpEditCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case ExpAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new ExpAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case ExpEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new ExpEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case ExpDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new ExpDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case ExpListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new ExpListCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 4,
      "sp-shaopeng": 12,
      "zwasd": 23,
      "-": 34,
      "JJiahui": 2
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/general/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String trimmedArgs \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (trimmedArgs.isEmpty() \u0026\u0026 !argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            for (String keyword: nameKeywords) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                ParserUtil.parseInfo(keyword); // will throw exception if any keyword contains any illegal characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                return new FindCommand(baseExp -\u003e predicate.test(baseExp) \u0026\u0026 baseExp.getTag().equals(tag),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                                        predicate.getKeywordsString(), tag.getTagName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                return new FindCommand(predicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new FindCommand(baseExp -\u003e baseExp.getTag().equals(tag), null, tag.getTagName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 2,
      "zwasd": 11,
      "JJiahui": 43
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/general/GoCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.GoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse switch to a date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class GoCommandParser implements Parser\u003cGoCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Goes to a target date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @param args The date argument to be parsed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public GoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (trimmedArgs.equals(\"today\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new GoCommand(LocalDate.now());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            LocalDate targetDate \u003d LocalDate.parse(trimmedArgs, DateTimeFormatter.ISO_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new GoCommand(targetDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 22,
      "zwasd": 22,
      "JJiahui": 4
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/general/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.FindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.GoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.saveit.logic.commands.general.SetBudgetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.account.AccLevelParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.expenditure.ExpLevelParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.repeat.RepeatLevelParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.report.ReportLevelParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse help."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HelpCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * and returns an HelpCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public HelpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        switch (args.trim()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case ExpLevelParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new HelpCommand(ExpLevelParser.HELP_MESSAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case RepeatLevelParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new HelpCommand(RepeatLevelParser.HELP_MESSAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case ReportLevelParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new HelpCommand(ReportLevelParser.HELP_MESSAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case AccLevelParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new HelpCommand(AccLevelParser.HELP_MESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case GoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new HelpCommand(GoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new HelpCommand(ExitCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new HelpCommand(FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        case SetBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new HelpCommand(SetBudgetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new HelpCommand(args.trim(), true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 9,
      "zwasd": 40,
      "JJiahui": 11
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/general/SetBudgetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.saveit.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_YEARMONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.saveit.logic.commands.general.SetBudgetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse set budget."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class SetBudgetCommandParser implements Parser\u003cSetBudgetCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public SetBudgetCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_AMOUNT, PREFIX_YEARMONTH);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_AMOUNT) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        YearMonth yearMonth \u003d ParserUtil.parseYearMonth(argMultimap.getValue(PREFIX_YEARMONTH).orElse(\"\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new SetBudgetCommand(yearMonth, amount);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 19,
      "sp-shaopeng": 2,
      "zwasd": 18,
      "JJiahui": 7
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/repeat/RepeatAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.repeat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.repeat.RepeatAddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * Parses input arguments and creates a new RepeatAddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatAddCommandParser implements Parser\u003cRepeatAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public RepeatAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INFO, PREFIX_AMOUNT, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        PREFIX_END_DATE, PREFIX_TAG, PREFIX_PERIOD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INFO, PREFIX_AMOUNT, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                                PREFIX_END_DATE, PREFIX_PERIOD)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RepeatAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Info info \u003d ParserUtil.parseInfo(argMultimap.getValue(PREFIX_INFO).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Date startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .orElseGet(() -\u003e LocalDate.now().toString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Date endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .orElseGet(() -\u003e LocalDate.now().toString()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        ParserUtil.checkDateRange(startDate, endDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).orElseGet(() -\u003e \"Others\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String period \u003d ParserUtil.parsePeriod(argMultimap.getValue(PREFIX_PERIOD).orElseThrow());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Repeat repeat \u003d new Repeat(info, amount, startDate, endDate, tag, period);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new RepeatAddCommand(repeat);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 44,
      "zwasd": 20,
      "JJiahui": 3
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/repeat/RepeatDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.repeat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.repeat.RepeatDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * Parses input arguments and creates a new RepeatDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatDeleteCommandParser implements Parser\u003cRepeatDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RepeatDeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * and returns a RepeatDeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public RepeatDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new RepeatDeleteCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                            seedu.saveit.logic.commands.repeat.RepeatDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 24,
      "zwasd": 8
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/repeat/RepeatEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.repeat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.repeat.RepeatEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * Parses input arguments and creates a new RepeatEditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatEditCommandParser implements Parser\u003cRepeatEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RepeatEditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * and returns an RepeatEditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public RepeatEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INFO, PREFIX_AMOUNT, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        PREFIX_END_DATE, PREFIX_TAG, PREFIX_PERIOD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    RepeatEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        RepeatEditCommand.EditRepeatDescriptor editRepeatDescriptor \u003d new RepeatEditCommand.EditRepeatDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INFO).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            editRepeatDescriptor.setInfo(ParserUtil.parseInfo(argMultimap.getValue(PREFIX_INFO).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            editRepeatDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            editRepeatDescriptor.setStartDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            editRepeatDescriptor.setEndDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            editRepeatDescriptor.setTag(ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PERIOD).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            editRepeatDescriptor.setPeriod(ParserUtil.parsePeriod(argMultimap.getValue(PREFIX_PERIOD).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (!editRepeatDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(RepeatEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new RepeatEditCommand(index, editRepeatDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 56,
      "zwasd": 15,
      "JJiahui": 2
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/repeat/RepeatLevelParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.repeat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.repeat.RepeatAddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.repeat.RepeatDeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.repeat.RepeatEditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.TopLevelParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * Parse repeat commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatLevelParser extends TopLevelParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"repeat\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"repeat add\\nrepeat edit\\nrepeat delete\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String HELP_MESSAGE \u003d RepeatAddCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                            + RepeatEditCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                            + RepeatDeleteCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case RepeatAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new RepeatAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case RepeatEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new RepeatEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case RepeatDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new RepeatDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 59,
      "zwasd": 10,
      "JJiahui": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/report/ExportReportCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_GRAPH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_ORGANISE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.report.ExportReportCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.Report;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse export report."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExportReportCommandParser implements Parser\u003cExportReportCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExportReportCommandParser() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExportReportCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                PREFIX_END_DATE, PREFIX_GRAPH, PREFIX_ORGANISE, PREFIX_FILENAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!arePrefixesPresent(argumentMultimap, PREFIX_START_DATE, PREFIX_END_DATE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                PREFIX_GRAPH, PREFIX_ORGANISE, PREFIX_FILENAME)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                || !argumentMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Date startDate \u003d ParserUtil.parseDate(argumentMultimap.getValue(PREFIX_START_DATE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .orElseGet(() -\u003e LocalDate.now().toString()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Date endDate \u003d ParserUtil.parseDate(argumentMultimap.getValue(PREFIX_END_DATE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .orElseGet(() -\u003e LocalDate.now().toString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Report.GraphType graphType \u003d ParserUtil.parseGraph(argumentMultimap.getValue(PREFIX_GRAPH)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .orElseGet(() -\u003e Report.GraphType.PIE.toString().toLowerCase()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String organise \u003d ParserUtil.parseOrganise(argumentMultimap.getValue(PREFIX_ORGANISE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .orElseGet(() -\u003e \"tag\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String fileName \u003d ParserUtil.parseFileName(argumentMultimap.getValue(PREFIX_FILENAME)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .orElseGet(() -\u003e \"default\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!Date.isEqualOrBefore(startDate, endDate)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_DATE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    ExportReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Report report \u003d new Report(startDate, endDate, graphType, organise);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new ExportReportCommand(report, fileName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 52,
      "sp-shaopeng": 1,
      "zwasd": 22
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/report/ExportReportWindowCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "package seedu.saveit.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.commands.report.ReportWindowExportCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.parser.ParserReportWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.ExportFile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Parses report window export command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ExportReportWindowCommandParser implements ParserReportWindow\u003cReportWindowExportCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportWindowExportCommand parse(String userInputTrimmed) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String[] userInputArray \u003d userInputTrimmed.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (userInputArray.length !\u003d 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (userInputArray.length \u003e 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                throw new ParseException(ExportFile.FILENAME_CONSTRAINT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        ReportWindowExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!ExportFile.isValidFileName(userInputArray[1].trim())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(ExportFile.FILENAME_CONSTRAINT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String fileName \u003d userInputArray[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new ReportWindowExportCommand(fileName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 39
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/report/PrintReportCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_GRAPH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_ORGANISE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.report.PrintReportCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.Report;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Parses for report print."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class PrintReportCommandParser implements Parser\u003cPrintReportCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public PrintReportCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                PREFIX_END_DATE, PREFIX_GRAPH, PREFIX_ORGANISE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!arePrefixesPresent(argumentMultimap, PREFIX_START_DATE, PREFIX_END_DATE, PREFIX_GRAPH, PREFIX_ORGANISE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                || !argumentMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PrintReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Date startDate \u003d ParserUtil.parseDate(argumentMultimap.getValue(PREFIX_START_DATE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .orElseGet(() -\u003e LocalDate.now().toString()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Date endDate \u003d ParserUtil.parseDate(argumentMultimap.getValue(PREFIX_END_DATE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .orElseGet(() -\u003e LocalDate.now().toString()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Report.GraphType graphType \u003d ParserUtil.parseGraph(argumentMultimap.getValue(PREFIX_GRAPH)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .orElseGet(() -\u003e Report.GraphType.PIE.toString().toLowerCase()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String organise \u003d ParserUtil.parseOrganise(argumentMultimap.getValue(PREFIX_ORGANISE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .orElseGet(() -\u003e \"tag\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!Date.isEqualOrBefore(startDate, endDate)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_DATE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    PrintReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Report report \u003d new Report(startDate, endDate, graphType, organise);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new PrintReportCommand(report);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 55,
      "sp-shaopeng": 1,
      "zwasd": 9
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/report/ReportLevelParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.report.ExportReportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.report.PrintReportCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.report.ViewReportCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.TopLevelParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse report commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ReportLevelParser extends TopLevelParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"report\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"report view\\nreport export\\nreport print\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String HELP_MESSAGE \u003d ViewReportCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                                + ExportReportCommand.MESSAGE_USAGE + \"\\n\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                                + PrintReportCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case ViewReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new ViewReportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case ExportReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new ExportReportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        case PrintReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return new PrintReportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 7,
      "sp-shaopeng": 9,
      "zwasd": 16,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/report/ReportWindowParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.report.ReportWindowExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.commands.report.ReportWindowHelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.report.ReportWindowPrintCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ParserReportWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Parses commands typed in report window."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ReportWindowParser implements ParserReportWindow\u003cReportCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND \u003d \"Invalid Command.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String userInputTrimmed \u003d userInput.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String[] userInputArray \u003d userInputTrimmed.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        switch (userInputArray[0]) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (!userInputTrimmed.equals(\"exit\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return new ReportWindowExitCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (!userInputTrimmed.equals(\"help\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return new ReportWindowHelpCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        case \"print\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (!userInputTrimmed.equals(\"print\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return new ReportWindowPrintCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        case \"export\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return new ExportReportWindowCommandParser().parse(userInputTrimmed);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return new ViewReportWindowCommandParser().parse(userInputTrimmed);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 54,
      "zwasd": 6,
      "JJiahui": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/report/ViewReportCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_GRAPH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_ORGANISE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.report.ViewReportCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.Report;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Parses view report."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ViewReportCommandParser implements Parser\u003cViewReportCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ViewReportCommandParser() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ViewReportCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                PREFIX_END_DATE, PREFIX_GRAPH, PREFIX_ORGANISE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!arePrefixesPresent(argumentMultimap, PREFIX_START_DATE, PREFIX_END_DATE, PREFIX_GRAPH, PREFIX_ORGANISE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                || !argumentMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Date startDate \u003d ParserUtil.parseDate(argumentMultimap.getValue(PREFIX_START_DATE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .orElseGet(() -\u003e LocalDate.now().toString()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Date endDate \u003d ParserUtil.parseDate(argumentMultimap.getValue(PREFIX_END_DATE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .orElseGet(() -\u003e LocalDate.now().toString()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Report.GraphType graphType \u003d ParserUtil.parseGraph(argumentMultimap.getValue(PREFIX_GRAPH)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .orElseGet(() -\u003e Report.GraphType.PIE.toString().toLowerCase()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String organise \u003d ParserUtil.parseOrganise(argumentMultimap.getValue(PREFIX_ORGANISE)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .orElseGet(() -\u003e \"tag\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!Date.isEqualOrBefore(startDate, endDate)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_DATE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    ViewReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Report report \u003d new Report(startDate, endDate, graphType, organise);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new ViewReportCommand(report);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 45,
      "sp-shaopeng": 1,
      "zwasd": 26
    }
  },
  {
    "path": "src/main/java/seedu/saveit/logic/parser/report/ViewReportWindowCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "package seedu.saveit.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.commands.report.ReportWindowViewCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.parser.ParserReportWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.Report;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Parses report window view command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ViewReportWindowCommandParser implements ParserReportWindow\u003cReportWindowViewCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportWindowViewCommand parse(String userInputTrimmed) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String[] userInputArray \u003d userInputTrimmed.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (userInputArray.length \u003c 5) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    ReportWindowViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String startDateStr \u003d userInputArray[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String endDateStr \u003d userInputArray[2];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Date startDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Date endDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            startDate \u003d new Date(startDateStr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            endDate \u003d new Date(endDateStr);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } catch (DateTimeParseException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(String.format(Date.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    ReportWindowViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!Date.isEqualOrBefore(startDate, endDate)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_DATE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    ReportWindowViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String graph \u003d userInputArray[3];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Report.GraphType graphType \u003d Report.GraphType.NULL;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        graphType \u003d Report.GraphType.mapToGraphType(graph);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assert graphType !\u003d Report.GraphType.NULL;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        switch (userInputArray[4]) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        case \"tag\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            Report report \u003d new Report(startDate, endDate, graphType, \"tag\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return new ReportWindowViewCommand(report);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        case \"month\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            Report report1 \u003d new Report(startDate, endDate, graphType, \"month\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return new ReportWindowViewCommand(report1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(Report.ORGANISE_TYPE_MESSAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 71
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/Account.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.stream.StreamSupport;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.budget.Budget;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.budget.BudgetMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.expenditure.UniqueExpenditureList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.expenditure.exceptions.RepeatNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class Account implements ReadOnlyAccount, ReportableAccount {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final UniqueExpenditureList expenditures;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final BudgetMap budgetList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private ObservableList\u003cRepeat\u003e repeats;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final String accountName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private MonthlySpendingCalculator calculator;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */ {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expenditures \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        repeats \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        budgetList \u003d new BudgetMap();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Account() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountName \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Account(String accountName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.accountName \u003d accountName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Creates an Account using the Expenditures in the {@code toBeCopied}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public Account copyAccountWithNewName(String newName) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Account toBeCopied \u003d new Account(newName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        toBeCopied.resetData(this);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return toBeCopied;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public String getAccountName() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accountName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Replaces the contents of the expenditure list with {@code expenditures}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * {@code expenditures} must not contain duplicate expenditures."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setExpenditures(List\u003cExpenditure\u003e expenditures) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.expenditures.setExpenditures(expenditures);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Resets the existing data of this {@code Account} with {@code newData}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void resetData(ReadOnlyAccount newData) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        setExpenditures(newData.getExpenditureList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        repeats.setAll(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    //// expenditure-level operations"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns true if a expenditure with the same identity as {@code expenditure} exists in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean hasExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(expenditure);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return expenditures.contains(expenditure);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Adds a expenditure to the dayToDayExpenditure."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure must not already exist in the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void addExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expenditures.add(expenditure);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Adds a repeat to the repeatList."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void addRepeat(Repeat repeat) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        repeats.add(repeat);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Replaces the given expenditure {@code target} in the list with {@code editedExpenditure}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure identity of {@code editedExpenditure} must not be the same as another"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * existing expenditure in the address book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setExpenditure(Expenditure target, Expenditure editedExpenditure) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(editedExpenditure);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expenditures.setExpenditure(target, editedExpenditure);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Replaces the given expenditure {@code target} in the list with {@code editedExpenditure}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure identity of {@code editedExpenditure} must not be the same as another"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * existing expenditure in the address book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setRepeat(Repeat target, Repeat editedRepeat) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(editedRepeat);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        repeats.set(repeats.indexOf(target), editedRepeat);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Removes {@code key} from this {@code Account}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * {@code key} must exist."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void removeExpenditure(Expenditure key) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expenditures.remove(key);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Removes {@code Repeat} from this {@code repeatItem}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void removeRepeat(Repeat repeat) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!repeats.remove(repeat)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new RepeatNotFoundException();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Add or reset a budget to the budgetList."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param budget contains amount and the yearMonth."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        //This can be used to change the budget too."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.budgetList.setBudget(budget);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setBudget(YearMonth yearMonth, Amount amount) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(yearMonth);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.budgetList.setBudget(new Budget(yearMonth, amount));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Obtain the budget object for a given yearMonth."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param yearMonth the target month you are looking for."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return If the budget is within the [@code budgetList], return it."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Else return a budget object with 0 amount."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public Double getBudget(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(yearMonth);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return budgetList.get(yearMonth);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Obtain the budget object for a given yearMonth."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param yearMonth the target month you are looking for."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return If the budget is within the [@code budgetList], return it."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Else return a budget object with 0 amount."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public double getBudget(String yearMonth) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(yearMonth);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            YearMonth targetYearMonth \u003d ParserUtil.parseYearMonth(yearMonth);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return getBudget(targetYearMonth);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(\"Year Month need to be in a format of : YYYY-MM\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public BudgetMap getBudgetList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return budgetList;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void setCalculator(YearMonth givenYearMonth) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.calculator \u003d new MonthlySpendingCalculator(getBudget(givenYearMonth), expenditures, repeats,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                givenYearMonth);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Calculate total expenditure amount for a given YearMonth."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param givenYearMonth target YearMonth."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a double which the total amount for all the expenditure."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private double calculateMonthlyExpenditure(YearMonth givenYearMonth) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.expenditures.calculateExpenditureAmount(givenYearMonth);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Calculate total repeat amount for a given YearMonth."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param givenYearMonth target YearMonth."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a double which the total amount for all the repeat."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private double calculateMonthlyRepeat(YearMonth givenYearMonth) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        double total \u003d 0;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        for (int i \u003d 0; i \u003c repeats.size(); i++) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            total +\u003d this.repeats.get(i).calculateForGivenYearMonth(givenYearMonth);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Calculate total amount of a given YearMonth."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param givenYearMonth target YearMonth."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a double which the total amount."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public MonthlySpendingCalculator calculateMonthly(YearMonth givenYearMonth) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        setCalculator(givenYearMonth);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.calculator;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return \"Account: \" + accountName;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ObservableList\u003cExpenditure\u003e getExpenditureList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return expenditures.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ObservableList\u003cRepeat\u003e getRepeatList() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return FXCollections.unmodifiableObservableList(repeats);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || (other instanceof Account // instanceof handles nulls"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 accountName.equals(((Account) other).accountName)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 expenditures.equals(((Account) other).expenditures)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 repeats.equals(((Account) other).repeats));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return expenditures.hashCode();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ObservableList\u003cRepeat\u003e getRepeatByDate(LocalDate date) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return FXCollections.observableArrayList("
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                repeats.stream().filter(repeat -\u003e repeat.isOn(date)).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Map\u003cRepeat, Double\u003e getRepeatExpFromToInclusiveByRepeat(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        HashMap repMap \u003d new HashMap();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        repeats.stream().filter(repeat -\u003e Date.isEqualOrAfter(repeat.getEndDate(), startDate)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                \u0026\u0026 Date.isEqualOrBefore(repeat.getStartDate(), endDate)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ).forEach(repeat -\u003e {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    if (repeat.getPeriod() \u003d\u003d Repeat.Period.DAILY) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        double amt \u003d repeat.calculateDaily(startDate, endDate);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        repMap.put(repeat, amt);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    } else if (repeat.getPeriod() \u003d\u003d Repeat.Period.WEEKLY"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                            || repeat.getPeriod() \u003d\u003d Repeat.Period.MONTHLY"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                            || repeat.getPeriod() \u003d\u003d Repeat.Period.ANNUALLY) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        double amt \u003d repeat.calculateWkOrMthOrYr(startDate, endDate);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        repMap.put(repeat, amt);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return repMap;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Map\u003cString, Double\u003e getRepeatExpFromToInclusiveByMonth(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        HashMap\u003cString, Double\u003e repMap \u003d new HashMap();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        repeats.stream().filter(repeat -\u003e Date.isEqualOrAfter(repeat.getEndDate(), startDate)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                \u0026\u0026 Date.isEqualOrBefore(repeat.getStartDate(), endDate)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ).forEach(repeat -\u003e {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    HashMap\u003cString, Double\u003e monthlyExpenditures \u003d null;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    if (repeat.getPeriod() \u003d\u003d Repeat.Period.DAILY) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        monthlyExpenditures \u003d repeat.calculateDailyRepeatMonth(startDate, endDate);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    } else if (repeat.getPeriod() \u003d\u003d Repeat.Period.WEEKLY"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                            || repeat.getPeriod() \u003d\u003d Repeat.Period.MONTHLY"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                            || repeat.getPeriod() \u003d\u003d Repeat.Period.ANNUALLY) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        monthlyExpenditures \u003d repeat.calculateWkOrMthOrYrMonth(startDate, endDate);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    assert monthlyExpenditures !\u003d null;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    for (String month : monthlyExpenditures.keySet()) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        if (repMap.containsKey(month)) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                            repMap.put(month, monthlyExpenditures.get(month) + repMap.get(month));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                            repMap.put(month, monthlyExpenditures.get(month));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return repMap;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public UniqueExpenditureList getExpByDate(String date) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new UniqueExpenditureList("
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                getExpenditureStream()"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        .filter(exp -\u003e exp.getDate().toString().equals(date))"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        .collect(Collectors.toList())"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        );"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public UniqueExpenditureList getExpByDate(LocalDate date) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return getExpByDate(date.format(DateTimeFormatter.ISO_DATE));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Map\u003cDate, UniqueExpenditureList\u003e getExpFromToInclusive(String startDate, String endDate) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return getExpFromToInclusive(new Date(startDate), new Date(endDate));"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Map\u003cDate, UniqueExpenditureList\u003e getExpFromToInclusive(Date start, Date end) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Map\u003cDate, UniqueExpenditureList\u003e expMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        getExpenditureStream()"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .filter(exp -\u003e Date.isEqualOrBefore(start, exp.getDate())"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        \u0026\u0026 Date.isEqualOrBefore(exp.getDate(), end))"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .forEach(exp -\u003e {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    Date date \u003d exp.getDate();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    if (!expMap.containsKey(date)) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        UniqueExpenditureList expList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        expList.add(exp);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        expMap.put(date, expList);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        expMap.get(date).add(exp);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                });"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return expMap;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Stream\u003cExpenditure\u003e getExpenditureStream() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return StreamSupport.stream(expenditures.spliterator(), false);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 100,
      "sp-shaopeng": 92,
      "zwasd": 36,
      "-": 68,
      "JJiahui": 99
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/AccountList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccDeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccRenameCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.budget.Budget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.budget.BudgetMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.BaseExp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Manages all accounts of the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccountList implements ReadOnlyAccountList {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String DEFAULT_ACCOUNT_NAME \u003d \"default\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Map\u003cString, Account\u003e accounts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private Account activeAccount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final ObservableList\u003cBaseExp\u003e displayedBaseExpList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private LocalDate activeDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private int expAddIndex \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Creates an AccountList using the accounts in the {@code toBeCopied}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountList(ReadOnlyAccountList toBeCopied) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // create new account"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (accounts.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            createDefaultAccount();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            activeAccount \u003d accounts.get(toBeCopied.getActiveAccountName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        resetFromActiveAccount();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountList(boolean createDefaultAccount) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (createDefaultAccount) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            createDefaultAccount();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private void createDefaultAccount() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        activeAccount \u003d new Account(DEFAULT_ACCOUNT_NAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        addAccount(activeAccount);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Resets the existing data of this {@code Account} with {@code newData}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void resetData(ReadOnlyAccountList newData) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        setAccounts(newData.getAccounts());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private void setAccounts(Map\u003cString, Account\u003e accountHashMap) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireAllNonNull(accountHashMap);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accounts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        for (Map.Entry\u003cString, Account\u003e entry : accountHashMap.entrySet()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            accounts.put(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    //// account-level operations"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ReportableAccount getReportableAccount() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return activeAccount;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns true if a account with the same identity as {@code account} exists in the account list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean hasAccount(Account account) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accounts.containsKey(account.getAccountName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Returns true if a account with the same account name exists in the account list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean hasAccount(String accountName) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(accountName);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return accounts.containsKey(accountName);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Renames account by copying the account data."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param oldName The old account name, if this is null, then it defaults to the active account name."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @param newName The new account name to be renamed to."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @String a string to denote the current active account name."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public String renameAccount(String oldName, String newName) throws CommandException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        oldName \u003d oldName !\u003d null ? oldName : activeAccount.getAccountName();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        boolean renameActiveAccount \u003d this.activeAccount.getAccountName().equals(oldName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireAllNonNull(oldName, newName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        //TODO: THIS EXCEPTION HAS TO CHANGE."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!accounts.containsKey(oldName)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_ACCOUNT_NAME, oldName) + \"\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                            + AccRenameCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else if (accounts.containsKey(newName)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    \"The account with the specified name \" + newName + \" already exists\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    + AccRenameCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Account targetAccount \u003d accounts.get(oldName);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Account replaceAccount \u003d targetAccount.copyAccountWithNewName(newName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.accounts.put(newName, replaceAccount);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.accounts.remove(oldName, targetAccount);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (renameActiveAccount) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            updateActiveAccount(newName);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return newName;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return this.activeAccount.getAccountName();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Delete an account for the accounts base on the input name."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param accName the target account\u0027s name"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a new account name which is to replace"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public String deleteAccount(String accName) throws CommandException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireAllNonNull(accName);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (!this.accounts.containsKey(accName)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_ACCOUNT_NAME, accName) + \"\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                            + AccDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Account target \u003d this.accounts.get(accName);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.accounts.remove(accName, target);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (this.accounts.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            Account defaultAccount \u003d new Account(\"default\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            addAccount(defaultAccount);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            updateActiveAccount(defaultAccount.getAccountName());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return defaultAccount.getAccountName();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (this.activeAccount.getAccountName().equals(accName)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                String firstKey \u003d (String) (this.accounts.keySet().toArray())[0];"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                updateActiveAccount(this.accounts.get(firstKey).getAccountName());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                return this.accounts.get(firstKey).getAccountName();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            //no change"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return this.activeAccount.getAccountName();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Adds an account to the account list."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The account must not already exist in the account list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void addAccount(Account account) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (accounts.containsKey(account.getAccountName())) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accounts.put(account.getAccountName(), account);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Clears all expenditures of the active account."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void clearActiveAccount() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expAddIndex \u003d 0;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeAccount.resetData(new Account());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        displayedBaseExpList.setAll(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    //// expenditure-level operations"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns true if a expenditure with the same identity as {@code expenditure} exists in the internal list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean hasExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(expenditure);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return displayedBaseExpList.contains(expenditure);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Deletes the given expenditure."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure must exist in the internal list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void removeExpenditure(Expenditure target) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeAccount.removeExpenditure(target);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        displayedBaseExpList.remove(target);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expAddIndex--;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Deletes the given repeat."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The repeat must exist in the internal list."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void removeRepeat(Repeat target) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeAccount.removeRepeat(target);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        displayedBaseExpList.remove(target);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Adds the given expenditure."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void addExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeAccount.addExpenditure(expenditure);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (expenditure.isOn(activeDate)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            displayedBaseExpList.add(expAddIndex, expenditure);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            expAddIndex++;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Adds the given repeat."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void addRepeat(Repeat repeat) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        activeAccount.addRepeat(repeat);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (repeat.isOn(activeDate)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            displayedBaseExpList.add(repeat);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Replaces the given expenditure {@code target} with {@code editedExpenditure}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * {@code target} must exist in the internal list."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure identity of {@code editedExpenditure} must not be the same as"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * another existing expenditure in the internal list."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setExpenditure(Expenditure target, Expenditure editedExpenditure) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireAllNonNull(target, editedExpenditure);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeAccount.setExpenditure(target, editedExpenditure);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (editedExpenditure.isOn(activeDate)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            displayedBaseExpList.set(displayedBaseExpList.indexOf(target), editedExpenditure);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            displayedBaseExpList.remove(target);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Replaces the given expenditure {@code target} with {@code editedExpenditure}."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * {@code target} must exist in the internal list."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure identity of {@code editedExpenditure} must not be the same as"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * another existing expenditure in the internal list."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setRepeat(Repeat target, Repeat editedRepeat) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireAllNonNull(target, editedRepeat);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeAccount.setRepeat(target, editedRepeat);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (editedRepeat.isOn(activeDate)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            displayedBaseExpList.set(displayedBaseExpList.indexOf(target), editedRepeat);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            displayedBaseExpList.remove(target);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        activeAccount.setBudget(budget);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public BudgetMap getBudgets() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return activeAccount.getBudgetList();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Updates the date at which the expenditures will be shown in the UI"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param date the new active date"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void updateActiveDate(LocalDate date) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeDate \u003d date;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        resetFromActiveAccount();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns the active date"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @return the active date"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public LocalDate getActiveDate() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return activeDate;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Updates the active account to the one with the specified accountName."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param accountName the name of the account"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @return if the update was successful"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean updateActiveAccount(String accountName) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!accounts.containsKey(accountName)) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            activeAccount \u003d accounts.get(accountName);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            resetFromActiveAccount();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public MonthlySpendingCalculator getMonthlySpending() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        YearMonth givenYearMonth \u003d YearMonth.from(this.activeDate);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.activeAccount.calculateMonthly(givenYearMonth);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public MonthlySpendingCalculator getMonthlySpending(YearMonth givenYearMonth) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.activeAccount.calculateMonthly(givenYearMonth);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public MonthlySpendingCalculator getMonthlySpending(String newAccount) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        YearMonth givenYearMonth \u003d YearMonth.from(this.activeDate);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Account acc \u003d accounts.get(newAccount);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return acc.calculateMonthly(givenYearMonth);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public String getActiveAccountName() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return activeAccount.getAccountName();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Map\u003cString, Account\u003e getAccounts() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return Collections.unmodifiableMap(accounts);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public String listAllNames() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.accounts.keySet().iterator().forEachRemaining(accName -\u003e list.append(accName + \" \"));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        //this is too ugly, so i turn into an array then reformat to look better."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        //return list.toString().trim();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String [] allName \u003d list.toString().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d allName.length; i++) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (i % 8 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                output.append(\"\\n\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            output.append(i + \". \" + allName[i - 1] + \"      \");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return output.toString().trim();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * resets the data in the displayed list and gets data from the active account"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private void resetFromActiveAccount() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        displayedBaseExpList.setAll(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        displayedBaseExpList.addAll(activeAccount.getExpByDate(activeDate).asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expAddIndex \u003d displayedBaseExpList.size();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        displayedBaseExpList.addAll(activeAccount.getRepeatByDate(activeDate));"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ObservableList\u003cExpenditure\u003e getExpenditureList() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return FXCollections.unmodifiableObservableList("
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                FXCollections.observableArrayList(displayedBaseExpList.stream()"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .filter(baseExp -\u003e baseExp instanceof Expenditure)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .map(exp -\u003e (Expenditure) exp).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ObservableList\u003cRepeat\u003e getRepeatList() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return FXCollections.unmodifiableObservableList("
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                FXCollections.observableArrayList(displayedBaseExpList.stream()"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .filter(baseExp -\u003e baseExp instanceof Repeat)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .map(exp -\u003e (Repeat) exp).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ObservableList\u003cBaseExp\u003e getBaseExpList() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return FXCollections.unmodifiableObservableList(displayedBaseExpList);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                || (other instanceof AccountList // instanceof handles nulls"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 accounts.equals(((AccountList) other).accounts));"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return \"AccountList: \" + displayedBaseExpList.toString();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "sp-shaopeng": 88,
      "zwasd": 38,
      "JJiahui": 274
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/DuplicateAccountException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Signals that the operation will result in duplicate Expenditures"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * (Expenditures are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class DuplicateAccountException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public DuplicateAccountException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        super(\"Operation would result in duplicate accounts\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 3,
      "JJiahui": 8
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.budget.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.budget.BudgetMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.BaseExp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    Predicate\u003cExpenditure\u003e PREDICATE_SHOW_ALL_EXPENDITURES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    Predicate\u003cRepeat\u003e PREDICATE_SHOW_ALL_REPEATS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    Predicate\u003cBaseExp\u003e PREDICATE_SHOW_ALL_BASEEXP \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Replaces address book data with the data in {@code account}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    void setAccountList(ReadOnlyAccountList accountList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /** Returns the Account */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    ReadOnlyAccountList getAccountList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns true if a expenditure with the same identity as {@code expenditure} exists in the internal list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    boolean hasExpenditure(Expenditure expenditure);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Deletes the given expenditure."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure must exist in the internal list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    void deleteExpenditure(Expenditure target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Adds the given expenditure."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * {@code expenditure} must not already exist in the internal list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    void addExpenditure(Expenditure expenditure);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Adds the given repeat."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    void addRepeat(Repeat repeat);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Deletes the given repeat."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The repeat must exist in the internal list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    void deleteRepeat(Repeat target);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Replaces the given expenditure {@code target} with {@code editedExpenditure}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * {@code target} must exist in the internal list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure identity of {@code editedExpenditure} must not be the same as"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * another existing expenditure in the internal list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    void setExpenditure(Expenditure target, Expenditure editedExpenditure);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Replaces the given repeat {@code target} with {@code editedRepeat}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * {@code target} must exist in the internal list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    void setRepeat(Repeat target, Repeat editedRepeat);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expenditure list */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    ObservableList\u003cExpenditure\u003e getFilteredExpenditureList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /** Returns an unmodifiable view of the filtered repeat list */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    ObservableList\u003cRepeat\u003e getFilteredRepeatList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    ObservableList\u003cBaseExp\u003e getFilteredBaseExpList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Updates the filter of the filtered expenditure list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    void updateFilteredExpenditureList(Predicate\u003cExpenditure\u003e predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Updates the filter of the filtered baseExp list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    void updateFilteredBaseExpList(Predicate\u003cBaseExp\u003e predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Rename the account\u0027s name."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param oldName target account\u0027s current name"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param newName target account\u0027s new name"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a string to denote the current active account name."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    String renameAccount(String oldName, String newName) throws CommandException;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Delete an account from the accountList."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param name the target account name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a string to denote the current active account name."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    String deleteAccount(String name) throws CommandException;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    void addAccount(Account account) throws CommandException;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    boolean updateActiveAccount(String accountName);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    void clearActiveAccount();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    ReportableAccount getReportableAccount();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Changes the active date to the one stated."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @param date New active date."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    void updateActiveDate(LocalDate date);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Obtains the active date being viewed."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    LocalDate getActiveDate();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Updates budget list with a budget detail."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @param budget The budget detail."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    void setBudget(Budget budget);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Obtains the hashmap of the budget."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    BudgetMap getBudgets();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Obtains a MonthlySpendingCalculator for the current active yearMonth."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    MonthlySpendingCalculator getMonthlySpending();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Obtains a MonthlySpendingCalculator for the given active yearMonth."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * To be called in go command."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    MonthlySpendingCalculator getMonthlySpending(YearMonth givenYearMonth);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Obtains a MonthlySpendingCalculator for the new active account."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * To be called in acc checkout, acc delete command."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    MonthlySpendingCalculator getMonthlySpending(String newActiveAccount);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "sp-shaopeng": 41,
      "zwasd": 33,
      "-": 63,
      "JJiahui": 51
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.budget.Budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.budget.BudgetMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.BaseExp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final AccountList accountList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final FilteredList\u003cExpenditure\u003e filteredExpenditures;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final FilteredList\u003cRepeat\u003e filteredRepeats;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final FilteredList\u003cBaseExp\u003e filteredBaseExp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Initializes a ModelManager with the given account and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ModelManager(ReadOnlyAccountList accountList, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireAllNonNull(accountList, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + accountList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.accountList \u003d new AccountList(accountList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        filteredExpenditures \u003d this.accountList.getExpenditureList().filtered(PREDICATE_SHOW_ALL_EXPENDITURES);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        filteredRepeats \u003d this.accountList.getRepeatList().filtered(PREDICATE_SHOW_ALL_REPEATS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        filteredBaseExp \u003d this.accountList.getBaseExpList().filtered(PREDICATE_SHOW_ALL_BASEEXP);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this(new AccountList(true), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Account \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setAccountList(ReadOnlyAccountList accountList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.accountList.resetData(accountList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ReadOnlyAccountList getAccountList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accountList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public boolean hasExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(expenditure);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accountList.hasExpenditure(expenditure);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void deleteExpenditure(Expenditure target) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.removeExpenditure(target);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void addExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.addExpenditure(expenditure);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        showAll();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void addRepeat(Repeat repeat) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        accountList.addRepeat(repeat);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        showAll();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void deleteRepeat(Repeat target) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.removeRepeat(target);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditure(Expenditure target, Expenditure editedExpenditure) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireAllNonNull(target, editedExpenditure);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.setExpenditure(target, editedExpenditure);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setRepeat(Repeat target, Repeat editedRepeat) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireAllNonNull(target, editedRepeat);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.setRepeat(target, editedRepeat);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Expenditure List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expenditure} backed by the internal list of"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ObservableList\u003cExpenditure\u003e getFilteredExpenditureList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return filteredExpenditures;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ObservableList\u003cRepeat\u003e getFilteredRepeatList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return filteredRepeats;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ObservableList\u003cBaseExp\u003e getFilteredBaseExpList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return filteredBaseExp;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void updateFilteredExpenditureList(Predicate\u003cExpenditure\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        filteredExpenditures.setPredicate(predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void updateFilteredBaseExpList(Predicate\u003cBaseExp\u003e predicate) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        filteredBaseExp.setPredicate(predicate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Displays all repeats and expenditures"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private void showAll() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        updateFilteredExpenditureList(PREDICATE_SHOW_ALL_EXPENDITURES);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        updateFilteredBaseExpList(PREDICATE_SHOW_ALL_BASEEXP);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean updateActiveAccount(String accountName) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!accountList.updateActiveAccount(accountName)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            showAll();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public String renameAccount(String oldName, String newName) throws CommandException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.accountList.renameAccount(oldName, newName);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public String deleteAccount(String name) throws CommandException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.accountList.deleteAccount(name);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void clearActiveAccount() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.clearActiveAccount();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ReportableAccount getReportableAccount() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accountList.getReportableAccount();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void updateActiveDate(LocalDate date) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.updateActiveDate(date);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public LocalDate getActiveDate() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accountList.getActiveDate();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.accountList.setBudget(budget);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public BudgetMap getBudgets() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return this.accountList.getBudgets();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public MonthlySpendingCalculator getMonthlySpending() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.accountList.getMonthlySpending();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public MonthlySpendingCalculator getMonthlySpending(YearMonth givenYearMonth) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.accountList.getMonthlySpending(givenYearMonth);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public MonthlySpendingCalculator getMonthlySpending(String newActiveAccount) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.accountList.getMonthlySpending(newActiveAccount);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void addAccount(Account account) throws CommandException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.accountList.addAccount(account);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } catch (DuplicateAccountException e) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new CommandException(\"Account \" + account.getAccountName()"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    + \" already exists! Unable to add.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // The test is failing because of expenditure"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accountList.equals(other.accountList)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 filteredExpenditures.equals(other.filteredExpenditures);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 7,
      "sp-shaopeng": 38,
      "zwasd": 25,
      "-": 112,
      "JJiahui": 98
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/MonthlySpendingCalculator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.UniqueExpenditureList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * Calculate monthly balance given the budget is set."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * If budget is not set, it will ask user to set budget."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class MonthlySpendingCalculator {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Double budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private UniqueExpenditureList expenditures;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private ObservableList \u003cRepeat\u003e repeats;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private YearMonth givenYearMonth;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private double totalSpending;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private double balance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public MonthlySpendingCalculator(Double budget, UniqueExpenditureList expenditures,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                      ObservableList \u003cRepeat\u003e repeats, YearMonth givenYearMonth) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (budget !\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.budget \u003d budget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.expenditures \u003d expenditures;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.repeats \u003d repeats;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.givenYearMonth \u003d givenYearMonth;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.totalSpending \u003d calculateTotalMonthlySpending();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.balance \u003d this.budget - this.totalSpending;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public Double getBudget() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.budget;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public double getTotalSpending() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.totalSpending;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Calculate total expenditure amount for a given YearMonth."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a double which the total amount for all the expenditure."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private double calculateMonthlyExpenditure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.expenditures.calculateExpenditureAmount(givenYearMonth);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Calculate total repeat amount for a given YearMonth."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a double which the total amount for all the repeat."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private double calculateMonthlyRepeat() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        double total \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        for (int i \u003d 0; i \u003c repeats.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            total +\u003d this.repeats.get(i).calculateForGivenYearMonth(givenYearMonth);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Calculate total amount of a given YearMonth."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a double which the total amount."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private double calculateTotalMonthlySpending() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return calculateMonthlyExpenditure() + calculateMonthlyRepeat();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 68,
      "zwasd": 3
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/ReadOnlyAccount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Unmodifiable view of an account."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public interface ReadOnlyAccount {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns an unmodifiable view of the expenditures list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * This list will not contain any duplicate expenditures."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    ObservableList\u003cExpenditure\u003e getExpenditureList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns an unmodifiable view of the repeats list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    ObservableList\u003cRepeat\u003e getRepeatList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 7,
      "-": 10,
      "JJiahui": 5
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/ReadOnlyAccountList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Unmodifiable view of an account list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public interface ReadOnlyAccountList extends ReadOnlyAccount {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns a list of accounts."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    Map\u003cString, Account\u003e getAccounts();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a string which consists of all account name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    String listAllNames();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Gets the date of expenditures shown."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @return The LocalDate date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    LocalDate getActiveDate();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns the name of the active account in the account list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    String getActiveAccountName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 4,
      "zwasd": 11,
      "JJiahui": 15
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/ReportableAccount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.UniqueExpenditureList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * An interface containing methods that allow expenditure data to be read from an account."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public interface ReportableAccount {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param date the date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @return a UniqueExpenditureList containing the expenditures on that date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    UniqueExpenditureList getExpByDate(String date);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param date the date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @return a UniqueExpenditureList containing the expenditures on that date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    UniqueExpenditureList getExpByDate(LocalDate date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * returns expenditures in the interval specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param startDate the inclusive start date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param endDate the inclusive end date"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @return a Map of key: date string \u0026 value: UniqueExpenditureList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    Map\u003cDate, UniqueExpenditureList\u003e getExpFromToInclusive(String startDate, String endDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * returns expenditures in the interval specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param startDate the inclusive start date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param endDate the inclusive end date"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @return a Map of key: date string \u0026 value: UniqueExpenditureList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    Map\u003cDate, UniqueExpenditureList\u003e getExpFromToInclusive(Date startDate, Date endDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param date the date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @return a list containing the repeats on that date"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    ObservableList\u003cRepeat\u003e getRepeatByDate(LocalDate date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * returns total repeat expenditures in interval specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param startDate the inclusive start date."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param endDate the inclusive end date."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @return a Map of key: repeat object \u0026 value : total amount"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    Map\u003cRepeat, Double\u003e getRepeatExpFromToInclusiveByRepeat(Date startDate, Date endDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * returns total repeat expenditures in interval specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param startDate the inclusive start date."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param endDate the inclusive end date."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @return a Map of key: month string \u0026 value : total amount"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    Map\u003cString, Double \u003e getRepeatExpFromToInclusiveByMonth(Date startDate, Date endDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 24,
      "zwasd": 4,
      "JJiahui": 38
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"saveit.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "-": 84,
      "JJiahui": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/budget/Budget.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * A class for budget."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final Amount budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    // The yearMonth is not going to change."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    // If need change yearMonth, just destroyed and create new one."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final YearMonth yearMonth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Budget(YearMonth yearMonth, Amount budgetAmount) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.budget \u003d budgetAmount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.yearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Budget(Amount budgetAmount) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.yearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.budget \u003d budgetAmount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Amount getBudget() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.budget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public YearMonth getYearMonth() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.yearMonth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 29,
      "zwasd": 7
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/budget/BudgetMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * A hashmap of the budgets to be stored."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class BudgetMap {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private HashMap\u003cYearMonth, Double\u003e budgets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public BudgetMap() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        budgets \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        budgets.put(budget.getYearMonth(), budget.getBudget().value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public Double get(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return budgets.getOrDefault(yearMonth, null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public HashMap\u003cYearMonth, Double\u003e getBudgets() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return budgets;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 3,
      "zwasd": 26
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/expenditure/Amount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Represents an Expenditure\u0027s amount in the account."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Amount should be positive, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"less than 1 billion and up to 2 decimal point.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    // TODO potentially can change to BigDecimal to represent money."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Constructs an {@code Amount}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Amount(double amount) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        value \u003d amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Constructs an {@code Amount}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns if a given string is a valid amount."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static boolean isValidAmount(double test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return test \u003e 0 \u0026\u0026 test \u003c 1000000000 \u0026\u0026 BigDecimal.valueOf(test).scale() \u003c\u003d 2;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns if a given string is a valid amount."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return isValidAmount(Double.parseDouble(test));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return Double.toString(value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Amount) other).value); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return Double.valueOf(value).hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 6,
      "JJiahui": 70
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/expenditure/BaseExp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * A base class for the Expenditure and Repeat classes"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public abstract class BaseExp {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    protected Info info;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    protected Amount amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    protected Tag tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public abstract UiPart\u003cRegion\u003e getUiCard(int displayedNumber);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public abstract boolean isOn(LocalDate localDate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Info getInfo() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return info;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "JJiahui": 30
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/expenditure/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Represents a Expenditure\u0027s address in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ISO_DATE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Invalid date! Date should be in a format of (YYYY-MM-DD), \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                                                        + \"and it should not be blank\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String START_END_MESSAGE_CONSTRAINTS \u003d \"Start date should not be after end date!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String YEARMONTH_MESSAGE_CONSTRAINTS \u003d \"Year and Month should be in the format of (YYYY-MM), \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                                                                + \"and it should not be blank\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public final LocalDate localDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final YearMonth yearMonth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Constructs an {@code Date}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        localDate \u003d LocalDate.parse(date, FORMATTER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.yearMonth \u003d YearMonth.from(localDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(test, FORMATTER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Returns true if two given date, first is after the another."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static boolean isValidDateRange(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(endDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return !startDate.localDate.isAfter(endDate.localDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * returns true if the first date is equal to or comes before the second date"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param d1 the first date"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param d2 the second date"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @return true if the first date is equal to or comes before the second date"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static boolean isEqualOrBefore(Date d1, Date d2) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return d1.value.equals(d2.value) || d1.localDate.isBefore(d2.localDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static boolean isEqualOrAfter(Date d1, Date d2) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return d1.value.equals(d2.value) || d1.localDate.isAfter(d2.localDate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Check if the date fall on a given YearMonth."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param givenYearMonth the given year month which we want to check."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a boolean."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean isOn (YearMonth givenYearMonth) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.yearMonth.equals(givenYearMonth);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 16,
      "sp-shaopeng": 23,
      "zwasd": 70,
      "JJiahui": 2
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/expenditure/Expenditure.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.ExpenditureCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Represents a Expenditure in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class Expenditure extends BaseExp {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Expenditure(Info info, Amount amount, Date date, Tag tag) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        requireAllNonNull(info, amount, date, tag);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.info \u003d info;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns true if both expenditure refers to the same expenditure object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public boolean isSameExpenditure(Expenditure otherExpenditure) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (otherExpenditure \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns true if both expenditures have all same fields."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Can be used for testing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!(other instanceof Expenditure)) { // short circuit if not same type"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        } else if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure otherExpenditure \u003d (Expenditure) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        boolean sameInfo \u003d otherExpenditure.info.equals(this.info);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        boolean sameAmt \u003d otherExpenditure.amount.equals(this.amount);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        boolean sameDate \u003d otherExpenditure.date.equals(this.date);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        boolean sameTag \u003d otherExpenditure.tag.equals(this.tag);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return sameAmt \u0026\u0026 sameDate \u0026\u0026 sameInfo \u0026\u0026 sameTag;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return Objects.hash(info, amount, date, tag);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        builder.append(getInfo())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .append(String.format(\"%.2f\", getAmount().value))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .append(\" Tag: \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .append(getTag());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public UiPart\u003cRegion\u003e getUiCard(int displayedNumber) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new ExpenditureCard(this, displayedNumber);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean isOn(LocalDate localDate) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return localDate.equals(date.localDate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 14,
      "sp-shaopeng": 1,
      "zwasd": 68,
      "JJiahui": 15
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/expenditure/Info.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Represents a Expenditure\u0027s name in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidInfo(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class Info {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            \"Infos should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public final String fullInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Constructs a {@code Info}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @param info A valid name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Info(String info) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(info);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        checkArgument(isValidInfo(info), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        fullInfo \u003d info;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static boolean isValidInfo(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return !test.trim().equals(\"\") \u0026\u0026 StringUtil.isAlphanumeric(test);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return fullInfo;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || (other instanceof Info // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 fullInfo.equals(((Info) other).fullInfo)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return fullInfo.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 1,
      "zwasd": 20,
      "-": 35,
      "JJiahui": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/expenditure/InfoContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Tests that a {@code BaseExp}\u0027s {@code Info} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class InfoContainsKeywordsPredicate implements Predicate\u003cBaseExp\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public InfoContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean test(BaseExp expenditure) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        StringUtil.containsSubstringInWordIgnoreCase(expenditure.getInfo().fullInfo, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || (other instanceof InfoContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 keywords.equals(((InfoContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public String getKeywordsString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return String.join(\", \", keywords);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 5,
      "-": 22,
      "JJiahui": 9
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/expenditure/Repeat.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.RepeatCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.UiPart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * A Repeated expenditure."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class Repeat extends BaseExp {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String PERIOD_MESSAGE_CONSTRAINTS \u003d \"Period should be only: \u0027\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + Period.DAILY.toString() + \"\u0027, \u0027\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + Period.WEEKLY.toString() + \"\u0027, \u0027\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + Period.MONTHLY.toString() + \"\u0027 or \u0027\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + Period.ANNUALLY.toString() + \"\u0027\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    // displayDate is empty, size 0 means daily."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    // non empty means weekly or monthly -\u003e cos i will at least add one day inside."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private HashSet\u003cLocalDate\u003e relevantDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Period period;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Represents the frequency"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * of repeat expenditure."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public enum Period {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        DAILY(\"daily\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        WEEKLY(\"weekly\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        MONTHLY(\"monthly\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        ANNUALLY(\"annually\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        private final String keyword;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Period(String keyword) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "         * Check if the input string is an valid period."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public static boolean isValidPeriod(String period) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return period.equalsIgnoreCase(Period.DAILY.toString())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    || period.equalsIgnoreCase(Period.WEEKLY.toString())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    || period.equalsIgnoreCase(Period.MONTHLY.toString())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    || period.equalsIgnoreCase(Period.ANNUALLY.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return keyword;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public Repeat(Info info, Amount amount, Date startDate, Date endDate, Tag tag, String period) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.info \u003d info;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        setPeriod(period);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        relevantDate \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        generateRelevantDate();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public UiPart\u003cRegion\u003e getUiCard(int displayedNumber) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new RepeatCard(this, displayedNumber);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * generate a Period based on input string."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param period the period in string."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a new period."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static Period generatePeriod(String period) throws IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Period p;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (period.equalsIgnoreCase(Period.DAILY.toString())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            p \u003d Period.DAILY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else if (period.equalsIgnoreCase(Period.WEEKLY.toString())) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            p \u003d Period.WEEKLY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else if (period.equalsIgnoreCase(Period.MONTHLY.toString())) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            p \u003d Period.MONTHLY;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else if (period.equalsIgnoreCase(Period.ANNUALLY.toString())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            p \u003d Period.ANNUALLY;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new IllegalValueException(PERIOD_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return p;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Period getPeriod() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return period;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setInfo(Info newInfo) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.info \u003d newInfo;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void setAmount(Amount newAmount) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.amount \u003d newAmount;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void setStartDate(Date newStartDate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.startDate \u003d newStartDate;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void setEndDate(Date newEndDate) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.endDate \u003d newEndDate;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void setPeriod(String duration) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (duration.equalsIgnoreCase(Period.DAILY.toString())) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.period \u003d Period.DAILY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else if (duration.equalsIgnoreCase(Period.WEEKLY.toString())) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.period \u003d Period.WEEKLY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else if (duration.equalsIgnoreCase(Period.MONTHLY.toString())) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            this.period \u003d Period.MONTHLY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else if (duration.equalsIgnoreCase(Period.ANNUALLY.toString())) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.period \u003d Period.ANNUALLY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * check if the start date is before or equal to end date."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return boolean to denote."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @throws CommandException if failed, tell user that there is problem."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean checkDateRange() throws CommandException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (!Date.isValidDateRange(startDate, endDate)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new CommandException(Date.START_END_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Update the displayDate hashSet."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void generateRelevantDate() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (this.period \u003d\u003d Period.WEEKLY) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            generateWeeklyDate();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else if (this.period \u003d\u003d Period.MONTHLY) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            generateMonthlyDate();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else if (this.period \u003d\u003d Period.ANNUALLY) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            generateAnnuallyDate();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.relevantDate.clear();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Update if it is a weekly repeat."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void generateWeeklyDate() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.relevantDate.clear();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        LocalDate pivotDate \u003d this.startDate.localDate;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            LocalDate toStore \u003d pivotDate.plusWeeks(i);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (toStore.isAfter(this.endDate.localDate)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.relevantDate.add(toStore);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Update if it is a monthly repeat."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void generateMonthlyDate() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.relevantDate.clear();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        LocalDate pivotDate \u003d this.startDate.localDate;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            LocalDate toStore \u003d pivotDate.plusMonths(i);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (toStore.isAfter(this.endDate.localDate)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.relevantDate.add(toStore);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Update if it is a annually repeat."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void generateAnnuallyDate() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.relevantDate.clear();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        LocalDate pivotDate \u003d this.startDate.localDate;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            LocalDate toStore \u003d pivotDate.plusYears(i);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (toStore.isAfter(this.endDate.localDate)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.relevantDate.add(toStore);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * To check if this repeat object suppose to appear on that date."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param targetDate the date you want to check."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return true denote suppose to appear, false to denote not suppose to appear."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean isOn(LocalDate targetDate) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (this.period \u003d\u003d Period.DAILY) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return checkDaily(targetDate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return checkWeeklyOrMonthlyOrAnnually(targetDate);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Check if a date lie within the range of start and end date."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param targetDate the date you want to check."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private boolean checkDaily(LocalDate targetDate) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        boolean wrtStartDate \u003d targetDate.isEqual(startDate.localDate)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                || targetDate.isAfter(startDate.localDate);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        boolean wrtEndDate \u003d targetDate.isEqual((endDate.localDate))"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                || targetDate.isBefore(endDate.localDate);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return wrtStartDate \u0026\u0026 wrtEndDate;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Check if the date exist in the displayDate."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param targetDate the date you want to check."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private boolean checkWeeklyOrMonthlyOrAnnually(LocalDate targetDate) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.relevantDate.contains(targetDate);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Do note that this method will only be call if period is not daily."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Get all the date from the relevantDate that falls in the given YearMonth."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param givenYearMonth target YearMonth."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return an arrayList of all the dates that follows within the YearMonth."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private ArrayList\u003cLocalDate\u003e isOnYearMonth(YearMonth givenYearMonth) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        ArrayList\u003cLocalDate\u003e allDateWithinGivenYearMonth \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Iterator iterator \u003d relevantDate.iterator();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            LocalDate temp \u003d (LocalDate) iterator.next();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (YearMonth.from(temp).equals(givenYearMonth)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                allDateWithinGivenYearMonth.add(temp);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return allDateWithinGivenYearMonth;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Calculate the total value for the given YearMonth and period is \"DAILY\"."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param givenYearMonth the target YearMonth"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return the total value of that period."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private double calculateDaily(YearMonth givenYearMonth) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (YearMonth.from(startDate.localDate).isAfter(givenYearMonth)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                || YearMonth.from(endDate.localDate).isBefore(givenYearMonth)) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            double total;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (YearMonth.from(startDate.localDate).equals((givenYearMonth))) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                // Start date is in the same month of the given year month."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                if (YearMonth.from(endDate.localDate).equals((givenYearMonth))) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    // End date is in the same month of the given year month."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    int totalDays \u003d this.startDate.localDate.until(this.endDate.localDate).getDays() + 1;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    total \u003d totalDays * this.amount.value;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    // End date is not in the same month of the given year month."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    int totalNumberOfDaysInTheMonth \u003d givenYearMonth.lengthOfMonth();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    int totalNumberOfCountableDays \u003d totalNumberOfDaysInTheMonth"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            - this.startDate.localDate.getDayOfMonth() + 1;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    total \u003d totalNumberOfCountableDays * this.amount.value;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                return total;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                // Start date is before the given YearMonth"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                if (YearMonth.from(endDate.localDate).isAfter(givenYearMonth)) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    // End date is after the given YearMonth"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    total \u003d givenYearMonth.lengthOfMonth() * this.amount.value;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    // End date is within the given YearMonth"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    int countableDays \u003d this.endDate.localDate.getDayOfMonth();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    total \u003d countableDays * this.amount.value;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                return total;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Calculate daily repeat for"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * given date range."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param startDate containing the first day."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param endDate   containing the last day."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public double calculateDaily(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        LocalDate adjustedStart \u003d null;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        LocalDate adjustedEnd \u003d null;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (startDate.localDate.isAfter(this.getEndDate().localDate)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                || endDate.localDate.isBefore(this.getStartDate().localDate)) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (Date.isEqualOrBefore(this.getEndDate(), endDate)) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedStart \u003d startDate.localDate;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (Date.isEqualOrAfter(this.getStartDate(), startDate)) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                adjustedStart \u003d this.getStartDate().localDate;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedEnd \u003d this.getEndDate().localDate;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedStart \u003d this.getStartDate().localDate;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (Date.isEqualOrBefore(this.getStartDate(), startDate)) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                adjustedStart \u003d startDate.localDate;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedEnd \u003d endDate.localDate;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assert adjustedStart !\u003d null \u0026\u0026 adjustedEnd !\u003d null;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        long days \u003d ChronoUnit.DAYS.between(adjustedStart, adjustedEnd) + 1;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        double amount \u003d this.getAmount().value * days;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Calculate daily repeat from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * startDate to endDate and"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * group in months."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public HashMap\u003cString, Double\u003e calculateDailyRepeatMonth(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Date adjustedStart \u003d null;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Date adjustedEnd \u003d null;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (startDate.localDate.isAfter(this.getEndDate().localDate)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                || endDate.localDate.isBefore(this.getStartDate().localDate)) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return new HashMap();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (Date.isEqualOrBefore(this.getEndDate(), endDate)) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedStart \u003d startDate;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (Date.isEqualOrAfter(this.getStartDate(), startDate)) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                adjustedStart \u003d this.getStartDate();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedEnd \u003d this.getEndDate();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedStart \u003d this.getStartDate();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (Date.isEqualOrBefore(this.getStartDate(), startDate)) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                adjustedStart \u003d startDate;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedEnd \u003d endDate;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assert adjustedStart !\u003d null \u0026\u0026 adjustedEnd !\u003d null;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        HashMap\u003cString, Double\u003e output \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //if is same month and year"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (adjustedStart.localDate.getMonth() \u003d\u003d adjustedEnd.localDate.getMonth()"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                \u0026\u0026 adjustedStart.localDate.getYear() \u003d\u003d adjustedEnd.localDate.getYear()) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            output.put(String.valueOf(YearMonth.from(adjustedStart.localDate)),"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    calculateDaily(adjustedStart, adjustedEnd));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // get eom for start date"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        LocalDate endOfMonthOfStartLocalDate \u003d YearMonth.from(adjustedStart.localDate).atEndOfMonth();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Date endOfMonthOfStartDate \u003d new Date(endOfMonthOfStartLocalDate.format(DateTimeFormatter.ISO_DATE));"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //first month expenditure"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        output.put(String.valueOf(YearMonth.from(endOfMonthOfStartLocalDate)),"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                calculateDaily(adjustedStart, endOfMonthOfStartDate));"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //middle months expenditure"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        YearMonth currentMonthYear \u003d YearMonth.from(adjustedStart.localDate.plusMonths(1));"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        YearMonth end \u003d YearMonth.from(adjustedEnd.localDate.minusMonths(1));"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        while (!currentMonthYear.isAfter(end)) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            output.put(String.valueOf(currentMonthYear), calculateDaily(currentMonthYear));"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            currentMonthYear \u003d currentMonthYear.plusMonths(1);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //last month expenditure"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        LocalDate startOfMonthOfEndLocalDate \u003d YearMonth.from(adjustedEnd.localDate).atDay(1);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Date startOfMonthOfEndDate \u003d new Date(startOfMonthOfEndLocalDate.format(DateTimeFormatter.ISO_DATE));"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        output.put(String.valueOf(YearMonth.from(startOfMonthOfEndLocalDate)),"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                calculateDaily(startOfMonthOfEndDate, adjustedEnd));"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Calculate repeat (weekly, monthly, annually)"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * total value for"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * given months."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param givenYearMonth"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return total spending for that repeat."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public double calculateForGivenYearMonth(YearMonth givenYearMonth) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (this.period \u003d\u003d Period.DAILY) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return calculateDaily(givenYearMonth);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            int totalNumOfDays \u003d isOnYearMonth(givenYearMonth).size();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            double total \u003d totalNumOfDays * this.amount.value;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return total;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Calculate repeat (weekly, monthly, annually)"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * total value for"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * given range of months."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param startYearMonth first month."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param endYearMonth   last month."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @return accumulated amount in these months."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public double calculateForGivenYearMonthRange(YearMonth startYearMonth, YearMonth endYearMonth) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        double total \u003d 0;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        YearMonth current \u003d startYearMonth;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        while (!current.isAfter(endYearMonth)) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            total \u003d total + calculateForGivenYearMonth(current);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            current \u003d current.plusMonths(1);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Calculates the total value from given start"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * to end date."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param startDate the starting date."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param endDate   ending date."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @return total value."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public double calculateWkOrMthOrYr(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        LocalDate adjustedStart \u003d null;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        LocalDate adjustedEnd \u003d null;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (startDate.localDate.isAfter(this.getEndDate().localDate)"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                || endDate.localDate.isBefore(this.getStartDate().localDate)) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (Date.isEqualOrBefore(this.getEndDate(), endDate)) {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedStart \u003d startDate.localDate;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (Date.isEqualOrAfter(this.getStartDate(), startDate)) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                adjustedStart \u003d this.getStartDate().localDate;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedEnd \u003d this.getEndDate().localDate;"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedStart \u003d this.getStartDate().localDate;"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (Date.isEqualOrBefore(this.getStartDate(), startDate)) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                adjustedStart \u003d startDate.localDate;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedEnd \u003d endDate.localDate;"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assert adjustedEnd !\u003d null \u0026\u0026 adjustedStart !\u003d null;"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //if is same month and year"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (adjustedStart.getMonth() \u003d\u003d adjustedEnd.getMonth()"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                \u0026\u0026 adjustedStart.getYear() \u003d\u003d adjustedEnd.getYear()) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return calculateRepeatTillEndDate(adjustedStart, adjustedEnd);"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        double amount \u003d 0;"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (adjustedStart.getDayOfMonth() !\u003d 1) {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            LocalDate endOfMonth \u003d YearMonth.from(adjustedStart).atEndOfMonth();"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            amount \u003d amount + calculateRepeatTillEndDate(adjustedStart,"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    endOfMonth);"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedStart \u003d YearMonth.from(adjustedStart.plusMonths(1)).atDay(1);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //check if adjusted end lies on eom"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (adjustedEnd.plusDays(1).getMonth() \u003d\u003d adjustedEnd.getMonth()) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            LocalDate startOfMonth \u003d YearMonth.from(adjustedEnd).atDay(1);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            amount \u003d amount + calculateRepeatTillEndDate(startOfMonth, adjustedEnd);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedEnd \u003d startOfMonth.minusDays(1);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        amount \u003d amount + calculateForGivenYearMonthRange(YearMonth.from(adjustedStart), YearMonth.from(adjustedEnd));"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Calculates the total value for given start"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * and end date and group in months."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param startDate the starting date."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param endDate   ending date."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public HashMap\u003cString, Double\u003e calculateWkOrMthOrYrMonth(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        HashMap\u003cString, Double\u003e output \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //if is same month and year"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (startDate.localDate.getMonth() \u003d\u003d endDate.localDate.getMonth()"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                \u0026\u0026 startDate.localDate.getYear() \u003d\u003d endDate.localDate.getYear()) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            output.put(String.valueOf(YearMonth.from(startDate.localDate)),"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    calculateRepeatTillEndDate(startDate.localDate, endDate.localDate));"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // get eom for start date"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        LocalDate endOfMonthOfStartLocalDate \u003d YearMonth.from(startDate.localDate).atEndOfMonth();"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Date endOfMonthOfStartDate \u003d new Date(endOfMonthOfStartLocalDate.format(DateTimeFormatter.ISO_DATE));"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //first month expenditure"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        output.put(String.valueOf(YearMonth.from(endOfMonthOfStartLocalDate)),"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                calculateRepeatTillEndDate(startDate.localDate, endOfMonthOfStartDate.localDate));"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //middle months expenditure"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        YearMonth currentMonthYear \u003d YearMonth.from(startDate.localDate.plusMonths(1));"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        YearMonth end \u003d YearMonth.from(endDate.localDate.minusMonths(1));"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        while (!currentMonthYear.isAfter(end)) {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            output.put(String.valueOf(currentMonthYear), calculateForGivenYearMonth(currentMonthYear));"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            currentMonthYear \u003d currentMonthYear.plusMonths(1);"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //last month expenditure"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        LocalDate startOfMonthOfEndLocalDate \u003d YearMonth.from(endDate.localDate).atDay(1);"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Date startOfMonthOfEndDate \u003d new Date(startOfMonthOfEndLocalDate.format(DateTimeFormatter.ISO_DATE));"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        output.put(String.valueOf(YearMonth.from(startOfMonthOfEndLocalDate)),"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                calculateRepeatTillEndDate(startOfMonthOfEndDate.localDate, endDate.localDate));"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Calculates repeat(weekly, monthly, annually)"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * from startDate to endDate in the same month and year."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public double calculateRepeatTillEndDate(LocalDate startLocalDate, LocalDate endLocalDate) {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (startLocalDate.getMonth() !\u003d endLocalDate.getMonth()"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                || startLocalDate.getYear() !\u003d endLocalDate.getYear()) {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new RuntimeException(\"This method is for calculation within same month and year\");"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        LocalDate adjustedStart \u003d null;"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        LocalDate adjustedEnd \u003d null;"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (startLocalDate.isAfter(this.getEndDate().localDate)"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                || endLocalDate.isBefore(this.getStartDate().localDate)) {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (endDate.localDate.isBefore(startLocalDate)"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                || endDate.localDate.isEqual(startLocalDate)) {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedStart \u003d startLocalDate;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (startDate.localDate.isAfter(startLocalDate)"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    || startDate.localDate.isEqual(startLocalDate)) {"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                adjustedStart \u003d startDate.localDate;"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedEnd \u003d endDate.localDate;"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedStart \u003d this.getStartDate().localDate;"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (startDate.localDate.isBefore(startLocalDate)"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    || startDate.localDate.isEqual(startLocalDate)) {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                adjustedStart \u003d startLocalDate;"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            adjustedEnd \u003d endLocalDate;"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assert adjustedStart !\u003d null \u0026\u0026 adjustedEnd !\u003d null;"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        double amount \u003d 0;"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (this.getPeriod() \u003d\u003d Period.WEEKLY) {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            LocalDate current \u003d null;"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (relevantDate.contains(adjustedStart)) {"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                current \u003d adjustedStart;"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                //check if repeat date is before or after start for start\u0027s week"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                if (adjustedStart.getDayOfWeek().getValue()"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        - startDate.localDate.getDayOfWeek().getValue() \u003e 0) {"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    current \u003d adjustedStart.plusWeeks(1).minusDays(adjustedStart.getDayOfWeek().getValue()"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                            - startDate.localDate.getDayOfWeek().getValue());"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                } else if (adjustedStart.getDayOfWeek().getValue()"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        - startDate.localDate.getDayOfWeek().getValue() \u003c 0) {"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    current \u003d adjustedStart.plusDays(startDate.localDate.getDayOfWeek().getValue()"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                            - adjustedStart.getDayOfWeek().getValue());"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            assert current !\u003d null;"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            while (!current.isAfter(adjustedEnd)) {"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                amount \u003d amount + this.getAmount().value;"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                current \u003d current.plusWeeks(1);"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return amount;"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (this.getPeriod() \u003d\u003d Period.MONTHLY) {"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            //check if the repeat is on last day of mth"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            LocalDate nextDateRepeat \u003d this.getStartDate().localDate.plusDays(1);"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            //repeat falls on last day of every month"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (nextDateRepeat.getMonth() !\u003d this.getStartDate().localDate.getMonth()) {"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                //check if endDate is also last day of every month"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                LocalDate nextDateEnd \u003d adjustedEnd.plusDays(1);"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                if (nextDateEnd.getMonth() !\u003d adjustedStart.getMonth()) {"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    amount \u003d this.getAmount().value;"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    return amount;"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                int dayOfMonthRepeat \u003d this.getStartDate().localDate.getDayOfMonth();"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                int adjustedStartDayOfMonth \u003d adjustedStart.getDayOfMonth();"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                int adjustedEndDayOfMonth \u003d adjustedEnd.getDayOfMonth();"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                //Check if the repeat day is in between the start and end."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                if (adjustedStartDayOfMonth \u003c\u003d dayOfMonthRepeat \u0026\u0026 dayOfMonthRepeat \u003c\u003d adjustedEndDayOfMonth) {"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    amount \u003d this.getAmount().value;"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    return amount;"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (this.getPeriod() \u003d\u003d Period.ANNUALLY) {"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (adjustedStart.getMonth()"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    \u003d\u003d this.getStartDate().localDate.getMonth()) {"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                if (adjustedStart.getDayOfMonth()"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        \u003d\u003d this.getStartDate().localDate.getDayOfMonth()) {"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    amount \u003d this.getAmount().value;"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    return amount;"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assert amount \u003d\u003d 0;"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Returns true if both repeats have all same fields."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Can be used for testing."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (!(other instanceof Repeat)) { // short circuit if not same type"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Repeat otherRepeat \u003d (Repeat) other;"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        boolean sameInfo \u003d otherRepeat.info.equals(this.info);"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        boolean sameAmt \u003d otherRepeat.amount.equals(this.amount);"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        boolean sameStartDate \u003d otherRepeat.startDate.equals(this.startDate);"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        boolean sameEndDate \u003d otherRepeat.endDate.equals(this.endDate);"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        boolean sameTag \u003d otherRepeat.tag.equals(this.tag);"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        boolean samePeriod \u003d otherRepeat.period.equals(this.period);"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return sameAmt \u0026\u0026 sameStartDate \u0026\u0026 sameEndDate \u0026\u0026 sameInfo \u0026\u0026 sameTag \u0026\u0026 samePeriod;"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return Objects.hash(info, amount, startDate, endDate, tag, period);"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        builder.append(getInfo())"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .append(String.format(\"%.2f\", getAmount().value))"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .append(\" Start Date: \")"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .append(\" End Date: \")"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .append(getEndDate())"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .append(\" Interval: \")"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .append(getPeriod().toString())"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .append(\" Tags: \")"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .append(getTag());"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 404,
      "sp-shaopeng": 301,
      "zwasd": 8,
      "JJiahui": 51
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/expenditure/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tag names should be a \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"single alphanumeric word that is less than 26 characters\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\w{1,25}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this.tagName.equals(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 5,
      "sp-shaopeng": 4,
      "zwasd": 3,
      "-": 49,
      "JJiahui": 2
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/expenditure/UniqueExpenditureList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.exceptions.DuplicateExpenditureException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.exceptions.ExpenditureNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * A list of expenditures that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * A expenditure is considered unique by comparing using {@code Expenditure#equals(Expenditure)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * expenditures uses Expenditure#equals(Expenditure) for equality"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * so as to ensure that the expenditure being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * unique in terms of identity in the UniqueExpenditureList. However,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * the removal of a expenditure uses Expenditure#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * as to ensure that the expenditure with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * @see Expenditure#isSameExpenditure(Expenditure)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class UniqueExpenditureList implements Iterable\u003cExpenditure\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final ObservableList\u003cExpenditure\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final ObservableList\u003cExpenditure\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public UniqueExpenditureList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public UniqueExpenditureList(List\u003cExpenditure\u003e expenditures) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        setExpenditures(expenditures);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns true if the list contains an equivalent expenditure as the given argument."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean contains(Expenditure toCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Adds a expenditure to the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure must not already exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void add(Expenditure toAdd) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Replaces the expenditure {@code target} in the list with {@code editedExpenditure}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure identity of {@code editedExpenditure} must not be the same as another"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * existing expenditure in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setExpenditure(Expenditure target, Expenditure editedExpenditure) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireAllNonNull(target, editedExpenditure);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ExpenditureNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!target.equals(editedExpenditure) \u0026\u0026 contains(editedExpenditure)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new DuplicateExpenditureException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        internalList.set(index, editedExpenditure);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Removes the equivalent expenditure from the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure must exist in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void remove(Expenditure toRemove) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ExpenditureNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setExpenditures(UniqueExpenditureList replacement) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Replaces the contents of this list with {@code expenditures}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * {@code expenditures} must not contain duplicate expenditures."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setExpenditures(List\u003cExpenditure\u003e expenditures) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireAllNonNull(expenditures);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        internalList.setAll(expenditures);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ObservableList\u003cExpenditure\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * calculate total amount of expenditure for a given yearMonth."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param givenYearMonth the given period of time."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a double which denotes the total amount."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public double calculateExpenditureAmount(YearMonth givenYearMonth) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        double total \u003d 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        int size \u003d internalList.size();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (internalList.get(i).getDate().isOn(givenYearMonth)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                total +\u003d internalList.get(i).getAmount().value;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Iterator\u003cExpenditure\u003e iterator() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                || (other instanceof UniqueExpenditureList // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueExpenditureList) other).internalList));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns true if {@code expenditures} contains only unique expenditures."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private boolean expendituresAreUnique(List\u003cExpenditure\u003e expenditures) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        for (int i \u003d 0; i \u003c expenditures.size() - 1; i++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            for (int j \u003d i + 1; j \u003c expenditures.size(); j++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                if (expenditures.get(i).equals(expenditures.get(j))) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 9,
      "sp-shaopeng": 17,
      "zwasd": 9,
      "JJiahui": 124
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/expenditure/exceptions/DuplicateExpenditureException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Signals that the operation will result in duplicate Expenditures"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * (Expenditures are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class DuplicateExpenditureException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public DuplicateExpenditureException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        super(\"Operation would result in duplicate expenditures.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 3,
      "-": 5,
      "JJiahui": 3
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/expenditure/exceptions/ExpenditureNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Signals that the operation is unable to find the specified expenditure."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpenditureNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "JJiahui": 4
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/expenditure/exceptions/RepeatNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * Signals that the operation is unable to find the specified expenditure."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 6,
      "zwasd": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/report/ExportFile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "package seedu.saveit.model.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.nio.file.FileAlreadyExistsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.embed.swing.SwingFXUtils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.Graph;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Class used for to represent"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * file that report graph is exporting to."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ExportFile {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String FILENAME_CONSTRAINT \u003d \"File name \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            + \"should not have whitespace and should be in lower case and alphanumeric.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Graph graph;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ExportFile(String fileName, Graph graph) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.graph \u003d graph;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Exports image into file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void export(WritableImage img) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        File f \u003d new File(\"Report/\" + fileName + \".png\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        f.getParentFile().mkdir();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (f.exists()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new FileAlreadyExistsException(fileName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ImageIO.write(SwingFXUtils.fromFXImage(img, null), \"png\", f);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        f.createNewFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Graph getGraph() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return graph;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Checks if {@code String fileName} is a valid file name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param fileName of file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @return true if fileName if valid and false, otherwise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static boolean isValidFileName(String fileName) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (fileName.contains(\" \")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                || !(fileName.length() \u003e 0)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                || !(fileName.toLowerCase().equals(fileName))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                || !(StringUtil.isAlphanumeric(fileName))) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (obj instanceof ExportFile) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                ExportFile f \u003d (ExportFile) obj;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                return graph.equals(f.graph)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        \u0026\u0026 fileName.equals(f.fileName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 85
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/report/Report.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "package seedu.saveit.model.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Holds information of report graph."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class Report {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String ORGANISE_TYPE_MESSAGE_CONSTRAINT \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            \"Expenditures organisation should be: \" + \"tag | month\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private final Date startDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private final Date endDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private final GraphType graph;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private final String organise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Represents the different types"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * of graph that can be generated for report."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public enum GraphType {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        BAR, PIE, NULL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        public static final String GRAPH_TYPE_MESSAGE_CONSTRAINT \u003d \"Graph types should only be: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                + \"pie | bar\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "         * Checks if {@code g} is a valid GraphType."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        public static boolean isValidGraph(String g) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            switch (g) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            case \"bar\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            case \"pie\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "         * Maps {@code String graph} to corresponding graphType"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        public static GraphType mapToGraphType(String graph) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            switch (graph) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            case \"bar\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                return GraphType.BAR;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            case \"pie\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                return GraphType.PIE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                throw new ParseException(GRAPH_TYPE_MESSAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Report(Date startDate, Date endDate, GraphType graph, String organise) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.graph \u003d graph;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.organise \u003d organise;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Checks if {@code organise} is valid"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static boolean isValidOrganise(String organise) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (organise.equals(\"tag\") || organise.equals(\"month\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Getter method for user input graph type."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @return GraphType user inputs"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public GraphType getFormat() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return graph;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public String getOrganise() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return organise;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (other instanceof Report) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Report o \u003d (Report) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                return this.startDate.equals(o.startDate) \u0026\u0026 this.endDate.equals(o.endDate)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        \u0026\u0026 this.graph.toString().equals(o.graph.toString())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        \u0026\u0026 this.organise.equals(o.organise);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 76,
      "sp-shaopeng": 22,
      "zwasd": 10,
      "JJiahui": 2
    }
  },
  {
    "path": "src/main/java/seedu/saveit/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyAccount;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Contains utility methods for populating {@code Account} with sample data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static Expenditure[] getSampleExpenditures() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new Expenditure[] {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            new Expenditure(new Info(\"Alex Yeoh\"), new Amount(3.1),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    new Date(\"2019-09-11\"), new Tag(\"friends\")),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            new Expenditure(new Info(\"Bernice Yu\"), new Amount(3.1),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    new Date(\"2019-09-12\"), new Tag(\"colleagues\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            new Expenditure(new Info(\"Charlotte Oliveiro\"), new Amount(3.1),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    new Date(\"2019-09-13\"), new Tag(\"neighbours\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            new Expenditure(new Info(\"David Li\"), new Amount(3.1),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    new Date(\"2019-09-14\"), new Tag(\"family\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            new Expenditure(new Info(\"Irfan Ibrahim\"), new Amount(3.1),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    new Date(\"2019-09-15\"), new Tag(\"classmates\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            new Expenditure(new Info(\"Roy Balakrishnan\"), new Amount(3.1),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    new Date(\"2019-09-11\"), new Tag(\"colleagues\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static ReadOnlyAccount getSampleAddressBook() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Account sampleAb \u003d new Account();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        for (Expenditure sampleExpenditure : getSampleExpenditures()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            sampleAb.addExpenditure(sampleExpenditure);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 12,
      "zwasd": 17,
      "-": 12,
      "JJiahui": 2
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/JsonAccountListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.saveit.model.AccountList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * A class to access Account data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class JsonAccountListStorage implements SaveItStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAccountListStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public JsonAccountListStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public Path getSaveItFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public Optional\u003cReadOnlyAccountList\u003e readSaveIt() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return readSaveIt(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Similar to {@link #readSaveIt()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public Optional\u003cReadOnlyAccountList\u003e readSaveIt(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Optional\u003cJsonSerializableAccountList\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                filePath, JsonSerializableAccountList.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ReadOnlyAccountList readSampleSaveIt() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String jsonString \u003d (new Scanner(getClass().getResourceAsStream(\"/files/saveit-demo.json\")))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .useDelimiter(\"\\\\A\").next();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return JsonUtil.fromJsonString(jsonString, JsonSerializableAccountList.class).toModelType();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } catch (IllegalValueException | IOException ive) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            logger.info(\"Illegal values found in saveit-demo.json\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new AccountList(true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void saveSaveIt(ReadOnlyAccountList addressBook) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        saveSaveIt(addressBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Similar to {@link #saveSaveIt(ReadOnlyAccountList)}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void saveSaveIt(ReadOnlyAccountList addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAccountList(addressBook), filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 5,
      "zwasd": 12,
      "-": 57,
      "JJiahui": 20
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/JsonAdaptedExpenditure.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Jackson-friendly version of {@link Expenditure}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "class JsonAdaptedExpenditure {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expenditure\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ISO_DATE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final String info;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private JsonAdaptedTag tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Constructs a {@code JsonAdaptedExpenditure} with the given expenditure details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public JsonAdaptedExpenditure(@JsonProperty(\"info\") String info, @JsonProperty(\"amount\") double amount,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                  @JsonProperty(\"date\") String date, @JsonProperty(\"tag\") JsonAdaptedTag tag) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.info \u003d info;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (tag !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Converts a given {@code Expenditure} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public JsonAdaptedExpenditure(Expenditure source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        info \u003d source.getInfo().fullInfo;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        amount \u003d source.getAmount().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        date \u003d source.getDate().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        tag \u003d new JsonAdaptedTag(source.getTag().tagName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Converts this Jackson-friendly adapted expenditure object into the model\u0027s {@code Expenditure} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expenditure."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Expenditure toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (info \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Info.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!Info.isValidInfo(info)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new IllegalValueException(Info.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        final Info modelInfo \u003d new Info(info);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!seedu.saveit.model.expenditure.Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new IllegalValueException(seedu.saveit.model.expenditure.Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            tag \u003d new JsonAdaptedTag(\"Others\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!seedu.saveit.model.expenditure.Tag.isValidTagName(tag.getTagName())) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new Expenditure(modelInfo, modelAmount, modelDate, tag.toModelType());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 13,
      "zwasd": 40,
      "-": 32,
      "JJiahui": 15
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/JsonAdaptedRepeat.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Jackson-friendly version of {@link Repeat}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "class JsonAdaptedRepeat {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Repeat\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ISO_DATE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final String info;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private JsonAdaptedTag tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private String period;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Constructs a {@code JsonAdaptedRepeat} with the given repeat details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public JsonAdaptedRepeat(@JsonProperty(\"info\") String info, @JsonProperty(\"amount\") double amount,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                             @JsonProperty(\"startDate\") String startDate, @JsonProperty(\"endDate\") String endDate,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                             @JsonProperty(\"period\") String period, @JsonProperty(\"tag\") JsonAdaptedTag tag) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.info \u003d info;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Converts a given {@code Repeat} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public JsonAdaptedRepeat(Repeat source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        info \u003d source.getInfo().fullInfo;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        amount \u003d source.getAmount().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        startDate \u003d source.getStartDate().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        endDate \u003d source.getEndDate().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        tag \u003d new JsonAdaptedTag(source.getTag().tagName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        period \u003d source.getPeriod().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Converts this Jackson-friendly adapted repeat object into the model\u0027s {@code Repeat} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted repeat."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Repeat toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (info \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Info.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!Info.isValidInfo(info)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new IllegalValueException(Info.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        final Info modelInfo \u003d new Info(info);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"startDate\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!Date.isValidDate(startDate)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        final Date modelStartDate \u003d new Date(startDate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"endDate\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!Date.isValidDate(endDate)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        final Date modelEndDate \u003d new Date(endDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            tag \u003d new JsonAdaptedTag(\"Others\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!Tag.isValidTagName(tag.getTagName())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (period \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    Repeat.Period.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!Repeat.Period.isValidPeriod(period)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new IllegalValueException(Repeat.PERIOD_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new Repeat(modelInfo, modelAmount, modelStartDate, modelEndDate, tag.toModelType(), period);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 7,
      "JJiahui": 110
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/JsonSerializableAccount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * An Immutable Account that is serializable to JSON format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "@JsonRootName(value \u003d \"saveit\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "class JsonSerializableAccount {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENDITURE \u003d \"Expenditures list contains duplicate expenditure(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final List\u003cJsonAdaptedExpenditure\u003e expenditures \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final List\u003cJsonAdaptedRepeat\u003e repeats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final HashMap\u003cYearMonth, Double\u003e budgets \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final String accountName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Constructs a {@code JsonSerializableAccount} with the given expenditures and accountName."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public JsonSerializableAccount(@JsonProperty(\"accountName\") String accountName,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                                   @JsonProperty(\"expenditures\") List\u003cJsonAdaptedExpenditure\u003e expenditures,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                                   @JsonProperty(\"repeats\") List\u003cJsonAdaptedRepeat\u003e repeats,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                                   @JsonProperty(\"budgets\") HashMap\u003cYearMonth, Double\u003e budgets) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.accountName \u003d accountName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.expenditures.addAll(expenditures);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.repeats.addAll(repeats);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.budgets.putAll(budgets);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Converts a given {@code Account} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAccount}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public JsonSerializableAccount(Account source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expenditures.addAll(source.getExpenditureList().stream().map(JsonAdaptedExpenditure::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        repeats.addAll(source.getRepeatList().stream().map(JsonAdaptedRepeat::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountName \u003d source.getAccountName();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        budgets.putAll(source.getBudgetList().getBudgets());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Converts this address book into the model\u0027s {@code Account} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Account toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account account \u003d new Account(accountName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        for (JsonAdaptedExpenditure jsonAdaptedExpenditure : expenditures) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            Expenditure expenditure \u003d jsonAdaptedExpenditure.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            account.addExpenditure(expenditure);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        for (JsonAdaptedRepeat jsonAdaptedRepeat : repeats) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            Repeat repeat \u003d jsonAdaptedRepeat.toModelType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            account.addRepeat(repeat);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        for (YearMonth yearMonth : budgets.keySet()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            account.setBudget(yearMonth, new Amount(budgets.get(yearMonth)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return account;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 21,
      "-": 33,
      "JJiahui": 27
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/JsonSerializableAccountList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.AccountList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * An Immutable AccountList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "@JsonRootName(value \u003d \"saveit\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class JsonSerializableAccountList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOUNT \u003d \"Accounts list contains duplicate account(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final List\u003cJsonSerializableAccount\u003e accounts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final String currentAccount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Constructs a {@code JsonSerializableAccountList} with the given accounts."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public JsonSerializableAccountList(@JsonProperty(\"accounts\") List\u003cJsonSerializableAccount\u003e accounts,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                                       @JsonProperty(\"currentAccount\") String currentAccount) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.accounts.addAll(accounts);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.currentAccount \u003d currentAccount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Converts a given {@code AccountList} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAccountList}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public JsonSerializableAccountList(ReadOnlyAccountList source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accounts.addAll(source.getAccounts().values().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .map(JsonSerializableAccount::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        currentAccount \u003d source.getActiveAccountName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AccountList} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList accountList \u003d new AccountList(false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // set default account name first"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        accountList.updateActiveAccount(AccountList.DEFAULT_ACCOUNT_NAME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        for (JsonSerializableAccount jsonAdaptedAccount: accounts) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            Account account \u003d jsonAdaptedAccount.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            if (accountList.hasAccount(account)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ACCOUNT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            accountList.addAccount(account);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            // set the last account as active account"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            accountList.updateActiveAccount(account.getAccountName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // if specified, set the active account to it"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        accountList.updateActiveAccount(currentAccount);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accountList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 19,
      "JJiahui": 55
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/SaveItStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.saveit.model.AccountList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Represents a storage for {@link AccountList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public interface SaveItStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    Path getSaveItFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns Account data as a {@link ReadOnlyAccountList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    Optional\u003cReadOnlyAccountList\u003e readSaveIt() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @see #getSaveItFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    Optional\u003cReadOnlyAccountList\u003e readSaveIt(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Reads from saveit-demo.json in resources/files/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @return a ReadOnlyAccountList with the sample data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    ReadOnlyAccountList readSampleSaveIt();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Saves the given {@link ReadOnlyAccountList} to the storage."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    void saveSaveIt(ReadOnlyAccountList addressBook) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @see #saveSaveIt(ReadOnlyAccountList)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    void saveSaveIt(ReadOnlyAccountList addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 4,
      "zwasd": 6,
      "-": 31,
      "JJiahui": 11
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public interface Storage extends SaveItStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    Path getSaveItFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    Optional\u003cReadOnlyAccountList\u003e readSaveIt() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    void saveSaveIt(ReadOnlyAccountList addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 2,
      "zwasd": 6,
      "-": 23,
      "JJiahui": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Manages storage of Account data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private SaveItStorage saveItStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public StorageManager(SaveItStorage saveItStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.saveItStorage \u003d saveItStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Account methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public Path getSaveItFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return saveItStorage.getSaveItFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public Optional\u003cReadOnlyAccountList\u003e readSaveIt() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return readSaveIt(saveItStorage.getSaveItFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public Optional\u003cReadOnlyAccountList\u003e readSaveIt(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return saveItStorage.readSaveIt(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ReadOnlyAccountList readSampleSaveIt() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return saveItStorage.readSampleSaveIt();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void saveSaveIt(ReadOnlyAccountList addressBook) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        saveSaveIt(addressBook, saveItStorage.getSaveItFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void saveSaveIt(ReadOnlyAccountList addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        saveItStorage.saveSaveIt(addressBook, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 7,
      "zwasd": 11,
      "-": 56,
      "JJiahui": 8
    }
  },
  {
    "path": "src/main/java/seedu/saveit/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Represents a storage for {@link seedu.saveit.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Saves the given {@link seedu.saveit.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/ActiveNameAndDateView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * This is for active account name label."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class ActiveNameAndDateView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final String FXML \u003d \"ActiveNameAndDate.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Label activeName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Label activeDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ActiveNameAndDateView(String accountName, LocalDate activeDate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        setActiveAccountName(accountName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        setActiveDate(activeDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void setActiveAccountName(String activeAccountName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.activeName.setText(activeAccountName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setActiveDate(LocalDate activeAccountDate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.activeDate.setText(activeAccountDate.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 30,
      "zwasd": 6
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/AutoCompleteTextField.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.scene.control.CustomMenuItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * This class is a TextField which implements an \"autocomplete\" functionality, based on a supplied list of entries."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * @author Caleb Brinkman (modified by fy)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AutoCompleteTextField extends TextField {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /** The existing autocomplete entries. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private SortedSet\u003cString\u003e entries;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /** The popup used to select an entry. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private ContextMenu entriesPopup;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /** Construct a new AutoCompleteTextField. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public AutoCompleteTextField() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        entries \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        entriesPopup \u003d new ContextMenu();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        textProperty().addListener(new ChangeListener\u003cString\u003e() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            public void changed(ObservableValue\u003c? extends String\u003e observableValue, String s, String s2) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                if (getText().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    entriesPopup.hide();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    LinkedList\u003cString\u003e searchResult \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    searchResult.addAll(entries.subSet(getText(), getText() + Character.MAX_VALUE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    if (searchResult.size() \u003e 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                        populatePopup(searchResult);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                        if (!entriesPopup.isShowing()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                            entriesPopup.show(AutoCompleteTextField.this, Side.BOTTOM, 0, 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                        entriesPopup.hide();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        focusedProperty().addListener(new ChangeListener\u003cBoolean\u003e() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            public void changed(ObservableValue\u003c? extends Boolean\u003e observableValue,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    Boolean aBoolean, Boolean aBoolean2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                entriesPopup.hide();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Add completed entries."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void addEntries(List\u003cString\u003e entries) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.entries.addAll(entries);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Get the existing set of autocomplete entries."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @return The existing autocomplete entries."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public SortedSet\u003cString\u003e getEntries() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Populate the entry set with the given search results.  Display is limited to 10 entries, for performance."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @param searchResult The set of matching strings."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private void populatePopup(List\u003cString\u003e searchResult) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        List\u003cCustomMenuItem\u003e menuItems \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // If you\u0027d like more entries, modify this line."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        int maxEntries \u003d 10;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        int count \u003d Math.min(searchResult.size(), maxEntries);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            final String result \u003d searchResult.get(i);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            Label entryLabel \u003d new Label(result);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            CustomMenuItem item \u003d new CustomMenuItem(entryLabel, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            item.setOnAction(new EventHandler\u003cActionEvent\u003e() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                public void handle(ActionEvent actionEvent) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    setText(result);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    entriesPopup.hide();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    AutoCompleteTextField.this.end();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            menuItems.add(item);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        entriesPopup.getItems().clear();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        entriesPopup.getItems().addAll(menuItems);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 106,
      "JJiahui": 2
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/Bar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Constructs bar graph."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class Bar extends Graph {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private HashMap stats;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private String organise;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Bar(HashMap stats, String organise) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.stats \u003d stats;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.organise \u003d organise;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Constructs graph based on stats."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @return BarChart reflecting stats."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public BarChart constructGraph() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (organise.equals(\"tag\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            CategoryAxis yAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            yAxis.setLabel(\"Tag\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            NumberAxis xAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            xAxis.setLabel(\"Expenditure\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            BarChart bar \u003d new BarChart(xAxis, yAxis);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            bar.setTitle(\"Expenditure breakdown\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            bar.setLegendVisible(false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            Set set \u003d stats.keySet();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            Iterator itr \u003d set.iterator();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            XYChart.Series dataSeries \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            while (itr.hasNext()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                Tag index \u003d ((Tag) itr.next());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                double amount \u003d (double) stats.get(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                String amtToStr \u003d String.format(\"%.2f\", amount);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                dataSeries.getData().add(new XYChart.Data(amount,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        index.getTagName() + \" : $\" + amtToStr));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            bar.getData().add(dataSeries);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return bar;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            assert organise.equals(\"month\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            CategoryAxis yAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            yAxis.setLabel(\"Month\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            NumberAxis xAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            xAxis.setLabel(\"Expenditure\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            BarChart bar \u003d new BarChart(xAxis, yAxis);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            bar.setTitle(\"Expenditure breakdown\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            bar.setLegendVisible(false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            XYChart.Series dataSeries \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            TreeMap\u003cString, Double\u003e sortedStats \u003d new TreeMap(new Comparator\u003cString\u003e() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                public int compare(String o1, String o2) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    YearMonth ym1 \u003d YearMonth.parse(o1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    YearMonth ym2 \u003d YearMonth.parse(o2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    return ym1.compareTo(ym2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            sortedStats.putAll(stats);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            Set set \u003d sortedStats.keySet();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            Iterator itr \u003d set.iterator();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            while (itr.hasNext()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                String month \u003d (String) itr.next();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                double amt \u003d sortedStats.get(month);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                String amtStr \u003d String.format(\"%.2f\", amt);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                dataSeries.getData().add(new XYChart.Data(amt,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        month + \" : $\" + amtStr));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            bar.getData().add(dataSeries);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return bar;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (obj instanceof Bar) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return stats.equals(((Bar) obj).stats)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    \u0026\u0026 organise.equals(((Bar) obj).organise);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 127,
      "zwasd": 2
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/BudgetView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * budget window view."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class BudgetView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final String FXML \u003d \"BudgetView.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private boolean budgetExist;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private double budgetAmount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private double totalSpending;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private boolean isSaving;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private VBox budgetWindow;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Image piggyBank \u003d new Image(this.getClass().getResourceAsStream(\"/images/piggyBank.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Image brokePiggy \u003d new Image(this.getClass().getResourceAsStream(\"/images/brokePiggy.png\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            150, 150, true, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Image feedingPiggy \u003d new Image(this.getClass().getResourceAsStream(\"/images/feedingPiggy.png\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            150, 150, true, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public BudgetView() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (budgetExist) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            display();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            setPiggyBank();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Update the budget view."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void updateView() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        budgetWindow.getChildren().clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (budgetExist) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            display();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            setPiggyBank();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void setBudgetExist(Boolean budgetExist) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.budgetExist \u003d budgetExist;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void setBudgetAmount(double budgetAmount) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.budgetAmount \u003d budgetAmount;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void setTotalSpending(double totalSpending) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.totalSpending \u003d totalSpending;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    //If budgetExist is false, then it will just display a piggyBank."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void setPiggyBank() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        ImageView pig \u003d new ImageView(piggyBank);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Label label \u003d new Label(\"Please set the budget for this month\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        label.setTextFill(Paint.valueOf(\"000000\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        label.setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        budgetWindow.getChildren().add(label);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        budgetWindow.getChildren().add(pig);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        budgetWindow.setSpacing(20);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        budgetWindow.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    //If budgetExist is true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Display the relevant display if the budget is set."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void display() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        double balance \u003d budgetAmount - totalSpending;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (balance \u003c\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.isSaving \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.isSaving \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Label budget \u003d new Label();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String budgetString \u003d String.format(\"%.2f\", budgetAmount);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        budget.setText(\"Budget: $\" + budgetString);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        budget.setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        budget.setTextFill(Paint.valueOf(\"000000\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        budget.setWrapText(true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Label spending \u003d new Label();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String spendingString \u003d String.format(\"%.2f\", totalSpending);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        spending.setText(\"Total spending: $\" + spendingString);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        spending.setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        spending.setTextFill(Paint.valueOf(\"000000\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        spending.setWrapText(true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Label leftOver \u003d new Label();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String balanceString \u003d String.format(\"%.2f\", balance);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        leftOver.setText(\"Balance: $\" + balanceString);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        leftOver.setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        leftOver.setTextFill(Paint.valueOf(\"000000\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        leftOver.setWrapText(true);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        budgetWindow.getChildren().add(budget);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        budgetWindow.getChildren().add(spending);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        budgetWindow.getChildren().add(leftOver);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (isSaving) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            ImageView pig \u003d new ImageView(feedingPiggy);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            budgetWindow.getChildren().add(pig);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            ImageView pig \u003d new ImageView(brokePiggy);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            budgetWindow.getChildren().add(pig);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        budgetWindow.setSpacing(12);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        budgetWindow.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 129,
      "zwasd": 4
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/CalendarView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.geometry.HPos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.geometry.VPos;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.effect.BlendMode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.Border;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.BorderStroke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.BorderStrokeStyle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.BorderWidths;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * UI component that is displayed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class CalendarView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final String FXML \u003d \"CalendarView.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private static final String[] MONTHS \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final int[] DAYS_IN_MONTH \u003d {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private int[] simulateGridPane \u003d new int[42];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private YearMonth yearMonth;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private LocalDate todayDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private LocalDate nonPivotDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private LocalDate pivotDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private LocalDate firstDayOfTheMonth;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private int prevMonthBalance;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private int nextMonthBalance;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private int thisMonthBalance;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final int dayOfTheMonthForToday;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Image leftArrow \u003d new Image(this.getClass().getResourceAsStream(\"/images/leftButton.png\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            30, 20, true, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Image rightArrow \u003d new Image(this.getClass().getResourceAsStream(\"/images/rightButton.png\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            30, 20, true, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private CommandBox.CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Label monthYearLabel;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private GridPane dateGridPane;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private GridPane monthYearGridPane;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private GridPane weekDayGridPane;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Button leftButton;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Button rightButton;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public CalendarView(CommandBox.CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        setUpButton();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.pivotDate \u003d todayDate;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.nonPivotDate \u003d todayDate;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.day \u003d todayDate.getDayOfMonth();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.month \u003d todayDate.getMonthValue();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.year \u003d todayDate.getYear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.dayOfTheMonthForToday \u003d this.day;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.yearMonth \u003d YearMonth.of(this.year, this.month);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.firstDayOfTheMonth \u003d yearMonth.atDay(1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        setMonthYearLabel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        generateCalender();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * It will update the attributes in the class according to the date parse in"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param date the new date"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void updateDayMonthYear(LocalDate date) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.year \u003d date.getYear();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.month \u003d date.getMonthValue();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.day \u003d date.getDayOfMonth();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.yearMonth \u003d YearMonth.of(this.year, this.month);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.firstDayOfTheMonth \u003d yearMonth.atDay(1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private boolean isSameMonth(LocalDate d1, LocalDate d2) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        LocalDate pivot \u003d d1.withDayOfMonth(1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        LocalDate toCheck \u003d d2.withDayOfMonth(1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return pivot.equals(toCheck);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Set up the left and right arrow button."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void setUpButton() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        ImageView leftButtonView \u003d new ImageView(this.leftArrow);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        ImageView rightButtonView \u003d new ImageView(this.rightArrow);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        leftButton.setPrefSize(26, 26);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        leftButton.setMinSize(26, 26);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        leftButton.setMaxSize(26, 26);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        rightButton.setPrefSize(26, 26);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        rightButton.setMinSize(26, 26);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        rightButton.setMaxSize(26, 26);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        leftButton.setGraphic(leftButtonView);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        rightButton.setGraphic(rightButtonView);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Find the number of days in a month given the year and month."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return return the number of days."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public int findNumberOfDaysInTheMonth() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (this.month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (this.yearMonth.isLeapYear()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                return 29;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                return DAYS_IN_MONTH[month - 1];"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return DAYS_IN_MONTH[month - 1];"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Find the number of days in a month given the year and month."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return return the number of days."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public int findNumberOfDaysOfAMonth(int month, int year) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (Year.isLeap(year)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                return 29;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                return DAYS_IN_MONTH[month - 1];"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return DAYS_IN_MONTH[month - 1];"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Find the number of days in the previous month given the year and month."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return return the number of days."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public int findNumberOfDaysInPreviousMonth() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (this.month \u003e\u003d 2) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return findNumberOfDaysOfAMonth(this.month - 1, this.year);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return DAYS_IN_MONTH[11];"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Set the monthYear Label\u0027s content."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void setMonthYearLabel() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        monthYearGridPane.setBackground(new Background("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new BackgroundFill(Color.valueOf(\"383838\"), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        StringBuilder monthYear \u003d new StringBuilder();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        monthYear.append(MONTHS[this.nonPivotDate.getMonthValue() - 1]);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        monthYear.append(\"  \");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        monthYear.append(this.nonPivotDate.getYear());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String output \u003d monthYear.toString();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.monthYearLabel.setText(output);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Fill up the simulateGridPane[] with the date in order."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void fill() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.thisMonthBalance \u003d findNumberOfDaysInTheMonth();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        int firstDayOfMonth \u003d this.firstDayOfTheMonth.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.prevMonthBalance \u003d firstDayOfMonth % 7;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        int firstValue \u003d findNumberOfDaysInPreviousMonth() - this.prevMonthBalance + 1;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        for (int i \u003d 0; i \u003c this.prevMonthBalance; i++) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.simulateGridPane[i] \u003d firstValue;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            firstValue++;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        for (int i \u003d 0; i \u003c this.thisMonthBalance; i++) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.simulateGridPane[this.prevMonthBalance + i] \u003d i + 1;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.nextMonthBalance \u003d 42 - this.thisMonthBalance - prevMonthBalance;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        int newStartingPoint \u003d this.thisMonthBalance + prevMonthBalance;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        for (int i \u003d 0; i \u003c this.nextMonthBalance; i++) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.simulateGridPane[newStartingPoint + i] \u003d i + 1;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Generate Label for dateGridPane."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param dayNumber text for the Label"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a label with specific text and font"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Label createLabel(int dayNumber) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Label label \u003d new Label();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        label.setText(\"\" + dayNumber);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        label.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Generate a VBox with specific calendar."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a VBox for dateGridPane."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private VBox placeHolderForLabel() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        VBox holder \u003d new VBox();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        holder.setFillWidth(false);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        holder.setPrefHeight(20);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        holder.setPrefWidth(20);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        holder.setMinSize(20, 20);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        holder.setMaxSize(30, 30);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        holder.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return holder;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Assign a Vbox to each GridPane."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Each Vbox contains a Label."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Each label\u0027s text is correspond to the calendar."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void generateCalender() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        fill();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.weekDayGridPane.setBackground(new Background("
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new BackgroundFill(Color.valueOf(\"383838\"), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.dateGridPane.setBackground(new Background("
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new BackgroundFill(Color.valueOf(\"383838\"), CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        for (int row \u003d 0; row \u003c 6; row++) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            for (int col \u003d 0; col \u003c 7; col++) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                VBox holder \u003d placeHolderForLabel();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                if (i \u003c this.prevMonthBalance || i \u003e 42 - 1 - this.nextMonthBalance) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    holder.setBlendMode(BlendMode.SOFT_LIGHT);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                if (i \u003d\u003d this.prevMonthBalance + this.day - 1 \u0026\u0026 isSameMonth(this.pivotDate, this.nonPivotDate)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    holder.setBackground(new Background("
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            new BackgroundFill(Color.MEDIUMSLATEBLUE, CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                if (isSameMonth(this.todayDate, this.nonPivotDate)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        \u0026\u0026 i \u003d\u003d this.prevMonthBalance + this.dayOfTheMonthForToday - 1) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    holder.setBorder(new Border(new BorderStroke(Color.valueOf(\"#FFFFFF\"),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(1))));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Label num \u003d createLabel(this.simulateGridPane[i]);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                holder.getChildren().add(num);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                holder.setOnMouseClicked(new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        Label a \u003d (Label) holder.getChildren().get(0);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        int clickedDate \u003d Integer.parseInt(a.getText());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        if (holder.getBlendMode() \u003d\u003d BlendMode.SOFT_LIGHT) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            pivotDate \u003d getNewDate(clickedDate);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            nonPivotDate \u003d pivotDate;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            updateDayMonthYear(pivotDate);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            refreshCalenderView();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            pivotDate \u003d nonPivotDate.withDayOfMonth(clickedDate);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            nonPivotDate \u003d pivotDate;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            updateDayMonthYear(pivotDate);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            refreshCalenderView();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                            commandExecutor.execute(\"go \" + pivotDate);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        } catch (Exception e) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                            e.printStackTrace();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                });"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                this.dateGridPane.add(holder, col, row);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                GridPane.setHalignment(holder, HPos.CENTER);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                GridPane.setValignment(holder, VPos.CENTER);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Refresh the whole dateGridPane to show latest UI."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void refreshCalenderView() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        dateGridPane.getChildren().clear();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        updateDayMonthYear(nonPivotDate);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        setUpButton();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        setMonthYearLabel();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        generateCalender();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * generate a new local date according to input new date."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param value date indicator."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a new localDate object with that date."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private LocalDate getNewDate(int value) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (value \u003c\u003d 31 \u0026\u0026 value \u003e\u003d 21) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            LocalDate prevM \u003d this.nonPivotDate.minusMonths(1);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            prevM \u003d prevM.withDayOfMonth(value);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return prevM;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            LocalDate nextM \u003d this.nonPivotDate.plusMonths(1);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            nextM \u003d nextM.withDayOfMonth(value);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return nextM;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Initialise calendar to previous month data when the next button is clicked."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void handleToPrev() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.nonPivotDate \u003d nonPivotDate.minusMonths(1);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        updateDayMonthYear(nonPivotDate);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        refreshCalenderView();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Initialise calendar to next month data when the next button is clicked."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void handToNext() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.nonPivotDate \u003d nonPivotDate.plusMonths(1);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        updateDayMonthYear(nonPivotDate);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        refreshCalenderView();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * This method will update the pivotDate to the new active date."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param date the new pivot date"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void updateActiveDate(LocalDate date) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.pivotDate \u003d date;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.nonPivotDate \u003d date;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.day \u003d date.getDayOfMonth();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.month \u003d date.getMonthValue();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.year \u003d date.getYear();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.yearMonth \u003d YearMonth.of(this.year, this.month);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.firstDayOfTheMonth \u003d yearMonth.atDay(1);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        refreshCalenderView();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 10,
      "sp-shaopeng": 357,
      "zwasd": 1,
      "JJiahui": 13
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.exceptions.PrinterException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private AutoCompleteTextField commandTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        commandTextField.addEntries(Arrays.asList("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \"acc add\", \"acc checkout\", \"acc clear\", \"acc delete\", \"acc list\", \"acc rename\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \"exp add\", \"exp edit\", \"exp delete\", \"exp list\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \"repeat add\", \"repeat edit\", \"repeat delete\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \"report view\", \"report export\", \"report print \","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \"go\", \"go today\", \"help\", \"exit\", \"find\", \"setbudget\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } catch (CommandException | ParseException | PrinterException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": "         * @see seedu.saveit.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, PrinterException;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 2,
      "zwasd": 15,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/ExpenditureCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * An UI component that displays information of a {@code Expenditure}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpenditureCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String FXML \u003d \"ExpenditureListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private static final DecimalFormat TWO_DP \u003d new DecimalFormat(\"0.00\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Account level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public final Expenditure expenditure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private Label info;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private Label number;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private Label tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpenditureCard(Expenditure expenditure, int displayedNumber) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.expenditure \u003d expenditure;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        number.setText(displayedNumber + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        info.setText(expenditure.getInfo().fullInfo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        amount.setText(\"$\" + TWO_DP.format(expenditure.getAmount().value));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        tag.setText(expenditure.getTag().tagName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (expenditure.getInfo().fullInfo.length() \u003c\u003d 10) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            info.setMinWidth(20 + (10 * expenditure.getInfo().fullInfo.length()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            info.setMinWidth(120);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (expenditure.getTag().tagName.length() \u003c\u003d 8) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            tag.setMinWidth(20 + (10 * expenditure.getTag().tagName.length()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            tag.setMinWidth(100);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!(other instanceof ExpenditureCard)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpenditureCard card \u003d (ExpenditureCard) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return number.getText().equals(card.number.getText())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 expenditure.equals(card.expenditure);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 29,
      "-": 42,
      "JJiahui": 9
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/ExpenditureListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.BaseExp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Panel containing the list of expenditures."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpenditureListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String FXML \u003d \"ExpenditureListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpenditureListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private ListView\u003cBaseExp\u003e expenditureListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ExpenditureListPanel(ObservableList\u003cBaseExp\u003e expenditureList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expenditureListView.setItems(expenditureList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expenditureListView.setCellFactory(listView -\u003e new ExpenditureListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Expenditure} using a {@code ExpenditureCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    class ExpenditureListViewCell extends ListCell\u003cBaseExp\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        protected void updateItem(BaseExp baseExp, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            super.updateItem(baseExp, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            if (empty || baseExp \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                setGraphic(baseExp.getUiCard(getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 10,
      "-": 29,
      "JJiahui": 7
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/Graph.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * Generate respective graph."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public abstract class Graph\u003cT\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public abstract T constructGraph();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 7,
      "sp-shaopeng": 3,
      "zwasd": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.exceptions.PrinterException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private ExpenditureListPanel expenditureListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    //private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private ReportWindow reportWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private ActiveNameAndDateView activeNameAndDateView;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private CalendarView calendarView;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private BudgetView budgetView;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private StackPane expenditureListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private StackPane calendar;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private StackPane activeAccountNamePlaceHolder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private StackPane budgetPlaceHolder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        reportWindow \u003d new ReportWindow();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        reportWindow.addLogic(logic);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expenditureListPanel \u003d new ExpenditureListPanel(logic.getFilteredBaseExpList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expenditureListPanelPlaceholder.getChildren().add(expenditureListPanel.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        calendarView \u003d new CalendarView(this::executeCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        calendar.getChildren().add(calendarView.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeNameAndDateView \u003d new ActiveNameAndDateView(logic.getAddressBook().getActiveAccountName(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                logic.getAddressBook().getActiveDate());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        activeAccountNamePlaceHolder.getChildren().add(activeNameAndDateView.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        budgetView \u003d new BudgetView();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        budgetPlaceHolder.getChildren().add(budgetView.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            executeCommand(\"help\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } catch (CommandException | ParseException | PrinterException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        reportWindow.hide();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //helpWindow.hide();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpenditureListPanel getExpenditureListPanel() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return expenditureListPanel;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Opens a report window."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleReport() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assert reportWindow.isShowing() \u003d\u003d false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        reportWindow.showEmpty();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * This method is called to ensure all the view are displaying the right stuff"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * when the app is just opened up."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void refreshAtStart() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.executeCommand(\"go \" + LocalDate.now().toString());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @see seedu.saveit.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException, PrinterException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (commandResult.isShowReport()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                reportWindow.showResult(commandResult);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            if (commandResult.isUpdateCalendar()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                calendarView.updateActiveDate(commandResult.getNewActiveDate());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                activeNameAndDateView.setActiveDate(commandResult.getNewActiveDate());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (commandResult.isUpdateAccountName()) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                activeNameAndDateView.setActiveAccountName(commandResult.getActiveAccountName());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (commandResult.isUpdateBudgetView()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Boolean isExist \u003d commandResult.getBudget() !\u003d null;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                budgetView.setBudgetExist(isExist);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                if (isExist) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    budgetView.setBudgetAmount(commandResult.getBudget());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    budgetView.setTotalSpending(commandResult.getTotalSpending());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    budgetView.updateView();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    budgetView.updateView();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 28,
      "sp-shaopeng": 42,
      "zwasd": 16,
      "-": 172,
      "JJiahui": 13
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/MonthlyBudgetView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * This is for budget view."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class MonthlyBudgetView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public MonthlyBudgetView(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        super(fxmlFileUrl);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 14,
      "zwasd": 1
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/Pie.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Constructs pie chart."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class Pie extends Graph {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private HashMap stats;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private String organise;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Pie(HashMap stats, String organise) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.stats \u003d stats;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.organise \u003d organise;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Constructs graph based on stats"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @return PieChart reflecting stats."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public PieChart constructGraph() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        PieChart pie \u003d new PieChart();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        pie.setTitle(\"Expenditure Breakdown\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        pie.setStartAngle(180.0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        pie.setLegendSide(Side.RIGHT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (organise.equals(\"tag\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            Set set \u003d stats.keySet();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            Iterator itr \u003d set.iterator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            while (itr.hasNext()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                Tag index \u003d ((Tag) itr.next());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                PieChart.Data data \u003d new PieChart.Data(index.getTagName(), (double) stats.get(index));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                pie.getData().add(data);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            assert organise.equals(\"month\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            TreeMap sortedStats \u003d new TreeMap(new Comparator\u003cString\u003e() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                public int compare(String o1, String o2) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    YearMonth ym1 \u003d YearMonth.parse(o1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    YearMonth ym2 \u003d YearMonth.parse(o2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    return ym1.compareTo(ym2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            sortedStats.putAll(stats);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            Set set \u003d sortedStats.keySet();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            Iterator itr \u003d set.iterator();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            while (itr.hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                String month \u003d (String) itr.next();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                PieChart.Data data \u003d new PieChart.Data(month, (double) sortedStats.get(month));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                pie.getData().add(data);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return pie;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else if (obj instanceof Pie) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return stats.equals(((Pie) obj).stats)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    \u0026\u0026 organise.equals(((Pie) obj).organise);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 85,
      "zwasd": 2
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/RepeatCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * An UI component that displays information of a {@code Repeat}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class RepeatCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private static final String FXML \u003d \"RepeatListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private static final DateTimeFormatter DTF \u003d DateTimeFormatter.ISO_DATE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private static final DecimalFormat TWO_DP \u003d new DecimalFormat(\"0.00\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Account level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public final Repeat repeat;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private HBox repeatCardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Label repeatInfo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Label repeatNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Label repeatAmount;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private Label repeatDetails;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private Label repeatTag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public RepeatCard(Repeat repeat, int displayedNumber) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.repeat \u003d repeat;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        repeatNumber.setText(displayedNumber + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        repeatInfo.setText(repeat.getInfo().fullInfo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        repeatAmount.setText(\"$\" + TWO_DP.format(repeat.getAmount().value));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        repeatTag.setText(repeat.getTag().tagName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (repeat.getInfo().fullInfo.length() \u003c\u003d 10) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            repeatInfo.setMinWidth(20 + (10 * repeat.getInfo().fullInfo.length()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            repeatInfo.setMinWidth(120);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (repeat.getTag().tagName.length() \u003c\u003d 8) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            repeatTag.setMinWidth(20 + (10 * repeat.getTag().tagName.length()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            repeatTag.setMinWidth(100);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String startDate \u003d repeat.getStartDate().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String endDate \u003d repeat.getEndDate().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String period \u003d repeat.getPeriod().name();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        repeatDetails.setText(String.format(\"Repeated %s from %s to %s\", period, startDate, endDate));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!(other instanceof RepeatCard)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        RepeatCard card \u003d (RepeatCard) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return repeatNumber.getText().equals(card.repeatNumber.getText())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 repeat.equals(card.repeat);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 22,
      "JJiahui": 65
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/ReportCommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.exceptions.PrinterException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Command box for report window."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ReportCommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private static final String FXML \u003d \"ReportCommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private final ReportCommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private AutoCompleteTextField commandTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportCommandBox(ReportCommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        commandTextField.addEntries(Arrays.asList("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \"export\", \"exit\", \"print\", \"view\", \"help\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            commandExecutor.executeReportWindowCommand(commandTextField.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } catch (CommandException | ParseException | PrinterException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public interface ReportCommandExecutor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "         * @see seedu.saveit.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportCommandResult executeReportWindowCommand(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                throws CommandException, ParseException, PrinterException;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 71,
      "zwasd": 12
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/ReportWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.control.Menu;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.control.MenuBar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.ui.exceptions.PrinterException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * The Report Window. Provides statistics on expenditure"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * based on the user input. Supports export feature as well"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * in the future."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ReportWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ReportWindow.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private static final String FXML \u003d \"ReportWindow.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private static Graph currentGraph;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private ReportCommandBox box;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private ResultDisplay display;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private MenuBar menuBar;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Creates a new Report Window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param root Stage to use as the root of the Report Window."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportWindow(Stage root) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        root.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportWindow() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Initialise the report window"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * with necessary components."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.box \u003d new ReportCommandBox(this::executeReportWindowCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.display \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.menuBar \u003d new MenuBar();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        initMenu();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        initStyle();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        initCloseHandler();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Initialise the menu"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * component of the report window."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private void initMenu() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //help item"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Label label \u003d new Label(\"Help\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        label.setFont(new Font(\"Segoe UI Light\", 14));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        label.setOnMouseClicked(click -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                executeReportWindowCommand(\"help\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            } catch (CommandException | ParseException | PrinterException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // print item"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Menu menu \u003d new Menu(\"\", label);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        menuBar.getMenus().add(menu);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Label label1 \u003d new Label(\"Print\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        label1.setFont(new Font(\"Segoe UI Light\", 14));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        label1.setOnMouseClicked(click -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                executeReportWindowCommand(\"print\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                logger.info(\"Invalid or no printer\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                display.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Menu menu1 \u003d new Menu(\"\", label1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        menuBar.getMenus().add(menu1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private void initStyle() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        getRoot().initStyle(StageStyle.UTILITY);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Initialises close handler."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private void initCloseHandler() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        getRoot().setOnCloseRequest(new EventHandler\u003c\u003e() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            public void handle(WindowEvent event) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                currentGraph \u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                display.clear();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                getRoot().hide();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Returns true if the report window is currently being shown."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Hides the report window."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void addLogic(Logic logic) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private void setScene(Node graph) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        VBox topBox \u003d new VBox(menuBar, box.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        VBox vbox \u003d new VBox(topBox, display.getRoot(), graph);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Scene scene \u003d new Scene(vbox);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        scene.getStylesheets().addAll(this.getClass()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .getResource(\"/view/DarkTheme.css\").toExternalForm());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        getRoot().setScene(scene);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Shows the report window."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Method is called when the report"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * button in Main Window in clicked."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void showEmpty() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        logger.fine(\"Showing empty report page.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        setScene((Node) new Pie(new HashMap(), \"tag\").constructGraph());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Shows the expenditure breakdown"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * in user inputted graph type."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Method is called when input is from"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Main Window."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void showResult(CommandResult result) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        logger.fine(\"Showing report page.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        currentGraph \u003d result.getGraph();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        setScene((Node) currentGraph.constructGraph());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Shows the expenditure breakdown"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * in user inputted graph type."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Method is called when input is from"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Report Window."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void showResult(ReportCommandResult result) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        logger.fine(\"Showing report page.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        currentGraph \u003d result.getGraph();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        setScene((Node) currentGraph.constructGraph());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static Graph getGraph() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return currentGraph;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Executor method for report command box."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private ReportCommandResult executeReportWindowCommand(String commandText)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throws CommandException, ParseException, PrinterException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportCommandResult result \u003d null;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            result \u003d logic.executeReportWindowCommand(commandText);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            logger.info(\"command executed \" + commandText);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            display.setFeedbackToUser(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (result.isExitReport()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                currentGraph \u003d null;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                display.clear();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                getRoot().hide();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            } else if (result.isChangeView()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                showResult(result);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            logger.info(\"Invalid command :\" + commandText);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            display.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 232,
      "sp-shaopeng": 2,
      "zwasd": 9,
      "JJiahui": 2
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        resultDisplay.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 4,
      "zwasd": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/moneybag.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            mainWindow.refreshAtStart();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "sp-shaopeng": 1,
      "zwasd": 5,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/saveit/ui/exceptions/PrinterException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Exception thrown when printer cannot complete job."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class PrinterException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public PrinterException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 11,
      "zwasd": 1
    }
  },
  {
    "path": "src/main/resources/view/ActiveNameAndDate.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003cGridPane layoutY\u003d\"7.0\" prefHeight\u003d\"393.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"7.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cLabel fx:id\u003d\"activeName\" text\u003d\"Account Name\" styleClass\u003d\"activeNameAndDate\" GridPane.halignment\u003d\"LEFT\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "               \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cLabel fx:id\u003d\"activeDate\" text\u003d\"whichDate\" styleClass\u003d\"activeNameAndDate\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"RIGHT\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \u003cInsets bottom\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 36,
      "zwasd": 3
    }
  },
  {
    "path": "src/main/resources/view/BudgetView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003cVBox fx:id\u003d\"budgetWindow\" fillWidth\u003d\"false\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 10
    }
  },
  {
    "path": "src/main/resources/view/CalendarView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"calenderPane\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    \u003cGridPane fx:id\u003d\"monthYearGridPane\" prefHeight\u003d\"73.0\" prefWidth\u003d\"600.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cLabel fx:id\u003d\"monthYearLabel\" alignment\u003d\"CENTER\" blendMode\u003d\"DARKEN\" prefHeight\u003d\"66.0\" prefWidth\u003d\"266.0\" text\u003d\"MONTH YEAR\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cFont name\u003d\"Mongolian Baiti\" size\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cButton fx:id\u003d\"leftButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleToPrev\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"LEFT\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cButton fx:id\u003d\"rightButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handToNext\" GridPane.halignment\u003d\"RIGHT\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    \u003cGridPane fx:id\u003d\"weekDayGridPane\" layoutY\u003d\"58.0\" prefHeight\u003d\"42.0\" prefWidth\u003d\"600.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"58.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" styleClass\u003d\"weekDayLabel\" text\u003d\"S\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cLabel styleClass\u003d\"weekDayLabel\" text\u003d\"M\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cLabel styleClass\u003d\"weekDayLabel\" text\u003d\"T\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cLabel styleClass\u003d\"weekDayLabel\" text\u003d\"W\" GridPane.columnIndex\u003d\"3\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cLabel styleClass\u003d\"weekDayLabel\" text\u003d\"T\" GridPane.columnIndex\u003d\"4\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cLabel styleClass\u003d\"weekDayLabel\" text\u003d\"F\" GridPane.columnIndex\u003d\"5\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cLabel styleClass\u003d\"weekDayLabel\" text\u003d\"S\" GridPane.columnIndex\u003d\"6\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    \u003cGridPane fx:id\u003d\"dateGridPane\" layoutY\u003d\"105.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 106
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "\u003c?import seedu.saveit.ui.AutoCompleteTextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "\u003cStackPane styleClass\u003d\"command-box-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "  \u003cAutoCompleteTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zwasd": 3,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/ExpenditureListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"90\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"15\" right\u003d\"15\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u003cLabel fx:id\u003d\"number\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u003cLabel fx:id\u003d\"tag\" styleClass\u003d\"cell_small_label\" wrapText\u003d\"true\" alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u003cLabel fx:id\u003d\"info\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 8,
      "zwasd": 9,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/ExpenditureListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "  \u003cListView fx:id\u003d\"expenditureListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "\u003cfx:root minHeight\u003d\"700\" minWidth\u003d\"1000\" onCloseRequest\u003d\"#handleExit\" title\u003d\"\\$AVE IT\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        \u003cImage url\u003d\"@/images/moneybag.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"command-box-pane\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" alignment\u003d\"TOP_CENTER\" maxHeight\u003d\"101.0\" minHeight\u003d\"87.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"result-display-pane\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cGridPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"ALWAYS\" maxWidth\u003d\"500\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"100.0\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"ALWAYS\" maxWidth\u003d\"300\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \u003cRowConstraints maxHeight\u003d\"800\" minHeight\u003d\"200.0\" prefHeight\u003d\"800.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"calendar\" prefHeight\u003d\"100.0\" prefWidth\u003d\"50.0\" styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        \u003cVBox fx:id\u003d\"expenditureList\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"100.0\" prefWidth\u003d\"150.0\" styleClass\u003d\"pane-with-border\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"activeAccountNamePlaceHolder\" prefHeight\u003d\"30.0\" prefWidth\u003d\"130.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"expenditureListPanelPlaceholder\" prefHeight\u003d\"78.0\" prefWidth\u003d\"130.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"report\" prefHeight\u003d\"100.0\" prefWidth\u003d\"50.0\" styleClass\u003d\"pane-with-border\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"budgetPlaceHolder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                              \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                                                \u003cButton fx:id\u003d\"reportButton\" alignment\u003d\"CENTER\" contentDisplay\u003d\"TEXT_ONLY\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleReport\" style\u003d\"-fx-background-color: LIGHT GREY;\" text\u003d\"Report\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                                        \u003cFont name\u003d\"Euphemia UCAS\" size\u003d\"0.5\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                                \u003c/Button\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" alignment\u003d\"BASELINE_CENTER\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 16,
      "sp-shaopeng": 28,
      "zwasd": 4,
      "-": 47
    }
  },
  {
    "path": "src/main/resources/view/MonthlyBudgetView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            fx:controller\u003d\"view.MonthlyBudgetView\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 14
    }
  },
  {
    "path": "src/main/resources/view/RepeatListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003cHBox id\u003d\"repeatCardPane\" fx:id\u003d\"repeatCardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"15\" right\u003d\"15\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \u003cLabel fx:id\u003d\"repeatNumber\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u003cLabel fx:id\u003d\"repeatTag\" styleClass\u003d\"cell_small_label\" wrapText\u003d\"true\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u003cLabel fx:id\u003d\"repeatInfo\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u003cLabel fx:id\u003d\"repeatAmount\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                 \u003cLabel fx:id\u003d\"repeatDetails\" styleClass\u003d\"cell_small_label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 36,
      "zwasd": 15
    }
  },
  {
    "path": "src/main/resources/view/ReportCommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "\u003c?import seedu.saveit.ui.AutoCompleteTextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003cStackPane styleClass\u003d\"command-box-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    \u003cAutoCompleteTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 7,
      "zwasd": 2
    }
  },
  {
    "path": "src/main/resources/view/ReportWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003cfx:root fx:id\u003d\"ReportWindow\" minHeight\u003d\"550\" minWidth\u003d\"650\" resizable\u003d\"false\" title\u003d\"Report\" type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 7
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"result-display-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" prefHeight\u003d\"100.0\" styleClass\u003d\"result-display\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/saveit/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        final Index fifthExpenditureIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(fifthExpenditureIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(fifthExpenditureIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(fifthExpenditureIndex.equals(fifthExpenditureIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(fifthExpenditureIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(fifthExpenditureIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(fifthExpenditureIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 9,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/moneybag.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "zwasd": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/saveit/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DATE_DESC_BUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INFO_DESC_BUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpAddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.account.AccLevelParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.expenditure.ExpLevelParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.storage.JsonAccountListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        JsonAccountListStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                new JsonAccountListStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String expDeleteCommand \u003d \"exp delete 11\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertCommandException(expDeleteCommand, MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String listCommand \u003d AccLevelParser.COMMAND_WORD + \" \" + AccListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertCommandSuccess(listCommand, AccListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // Setup LogicManager with JsonAccountListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        JsonAccountListStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                new JsonAccountListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String addCommand \u003d ExpLevelParser.COMMAND_WORD + \" \" + ExpAddCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + INFO_DESC_BUS + AMOUNT_DESC_BUS + DATE_DESC_BUS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Expenditure expectedExpenditure \u003d new ExpenditureBuilder(AMY).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expectedModel.addExpenditure(expectedExpenditure);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void getFilteredExpenditureList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredExpenditureList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private static class JsonAccountListIoExceptionThrowingStub extends JsonAccountListStorage {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        private JsonAccountListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void saveSaveIt(ReadOnlyAccountList addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 5,
      "zwasd": 34,
      "-": 120,
      "JJiahui": 8
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                false, false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                false, false, false, false, false, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                false, false, false, false,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                false, false)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                false, false, false, false, false, false, false).hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                true, false, false, false, false, false, false).hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                false, false, false, false, false, false).hashCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 3,
      "sp-shaopeng": 13,
      "zwasd": 1,
      "-": 48,
      "JJiahui": 3
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_GRAPH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_ORGANISE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.AccountList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.BaseExp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.EditExpenditureDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_INFO_BUS \u003d \"Bus fare\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_INFO_MRT \u003d \"Mrt fare\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final double VALID_AMOUNT_BUS \u003d 3.14;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final double VALID_AMOUNT_MRT \u003d 1.34;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_DATE_BUS \u003d \"2019-09-11\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_DATE_MRT \u003d \"2019-09-12\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_TAG_BUS \u003d \"BUS\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_TAG_TRANSPORT \u003d \"Transport\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String INFO_DESC_BUS \u003d \" \" + PREFIX_INFO + VALID_INFO_BUS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String INFO_DESC_MRT \u003d \" \" + PREFIX_INFO + VALID_INFO_MRT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String AMOUNT_DESC_BUS \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_BUS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String AMOUNT_DESC_MRT \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_MRT;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String DATE_DESC_BUS \u003d \" \" + PREFIX_DATE + VALID_DATE_BUS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String DATE_DESC_MRT \u003d \" \" + PREFIX_DATE + VALID_DATE_MRT;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String TAG_DESC_TRANSPORT \u003d \" \" + PREFIX_TAG + VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String TAG_DESC_BUS \u003d \" \" + PREFIX_TAG + VALID_TAG_BUS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String INVALID_INFO_DESC \u003d \" \" + PREFIX_INFO + \"Mc\u0027donalds\"; // \"\u0027\" not allowed in infos"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_AMOUNT + \"bob!yahoo\"; // a string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_START_DATE_BUS \u003d \"2019-01-02\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String VALID_START_DATE_BUS_ALT \u003d \"2019-02-01\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_END_DATE_BUS \u003d \"2019-04-03\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String START_DATE_DESC_BUS \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_BUS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String END_DATE_DESC_BUS \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_BUS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_START_DATE_MRT \u003d \"2020-01-01\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_END_DATE_MRT \u003d \"2020-04-01\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String START_DATE_DESC_MRT \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_MRT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String END_DATE_DESC_MRT \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_MRT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_DAILY_PERIOD \u003d \"DAILY\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_WEEKLY_PERIOD \u003d \"WEEKLY\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_MONTHLY_PERIOD \u003d \"MONTHLY\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_ANNUALLY_PERIOD \u003d \"ANNUALLY\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_DAILY_PERIOD_DESC \u003d \" \" + PREFIX_PERIOD + VALID_DAILY_PERIOD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_WEEKLY_PERIOD_DESC \u003d \" \" + PREFIX_PERIOD + VALID_WEEKLY_PERIOD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String VALID_MONTHLY_PERIOD_DESC \u003d \" \" + PREFIX_PERIOD + VALID_MONTHLY_PERIOD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    // this date does not exist"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String INVALID_START_DATE_DESC \u003d \" \" + PREFIX_START_DATE + \"2019-02-31\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String INVALID_END_DATE_DESC \u003d \" \" + PREFIX_END_DATE; // empty string"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String INVALID_PERIOD_DESC \u003d \" \" + PREFIX_PERIOD + \"MINUTE\"; // empty string"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    //report"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String VALID_GRAPH_BAR_CAPS \u003d \"bar\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String VALID_GRAPH_PIE_CAPS \u003d \"pie\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String INVALID_GRAPH \u003d \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String VALID_GRAPH_BAR_DESC_CAPS \u003d \" \" + PREFIX_GRAPH + VALID_GRAPH_BAR_CAPS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String VALID_GRAPH_PIE_DESC_CAPS \u003d \" \" + PREFIX_GRAPH + VALID_GRAPH_PIE_CAPS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String INVALID_GRAPH_DESC \u003d \" \" + PREFIX_GRAPH + INVALID_GRAPH;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String VALID_FILE_NAME \u003d \"hello\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String VALID_FILE_NAME_ALT \u003d \"hey\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String INVALID_FILE_NAME \u003d \" \";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String VALID_FILE_NAME_DESC \u003d \" \" + PREFIX_FILENAME + VALID_FILE_NAME;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String INVALID_FILE_NAME_DESC \u003d \" \" + PREFIX_FILENAME + INVALID_FILE_NAME;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String VALID_ORGANISATION_TAG \u003d \"tag\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String VALID_ORGANISATION_MONTH \u003d \"month\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String INVALID_ORGANISATION \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String VALID_ORGANISATION_TAG_DESC \u003d \" \" + PREFIX_ORGANISE + VALID_ORGANISATION_TAG;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String VALID_ORGANISATION_MONTH_DESC \u003d \" \" + PREFIX_ORGANISE + VALID_ORGANISATION_MONTH;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String INVALID_ORGANISATION_DESC \u003d \" \" + PREFIX_ORGANISE + INVALID_ORGANISATION;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final EditExpenditureDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final EditExpenditureDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        DESC_AMY \u003d new EditExpenditureDescriptorBuilder().withInfo(VALID_INFO_BUS)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withAmount(VALID_AMOUNT_BUS).withDate(VALID_DATE_BUS).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        DESC_BOB \u003d new EditExpenditureDescriptorBuilder().withInfo(VALID_INFO_MRT)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withAmount(VALID_AMOUNT_MRT).withDate(VALID_DATE_MRT)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withTag(VALID_TAG_BUS).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static void assertCommandSuccess(ReportCommand command, Model actualModel,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                            ReportCommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            ReportCommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static void assertCommandSuccess(ReportCommand command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportCommandResult expectedCommandResult \u003d new ReportCommandResult(expectedMessage);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * - the address book, filtered expenditure list and selected expenditure in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static void assertCommandFailure(ReportCommand command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        AccountList expectedAccountList \u003d new AccountList(actualModel.getAccountList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        List\u003cExpenditure\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExpenditureList());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertEquals(expectedAccountList, actualModel.getAccountList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredExpenditureList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * - the address book, filtered expenditure list and selected expenditure in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList expectedAccountList \u003d new AccountList(actualModel.getAccountList());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        List\u003cExpenditure\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExpenditureList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(expectedAccountList, actualModel.getAccountList());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredExpenditureList());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the expenditure at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static void showExpenditureAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBaseExpList().size());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        BaseExp baseExp \u003d model.getFilteredBaseExpList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        final String[] splitInfo \u003d baseExp.getInfo().fullInfo.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        model.updateFilteredBaseExpList(new InfoContainsKeywordsPredicate(Arrays.asList(splitInfo[0])));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(1, model.getFilteredBaseExpList().size());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 66,
      "sp-shaopeng": 52,
      "zwasd": 28,
      "-": 63,
      "JJiahui": 9
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/account/AccAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccAddCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void constructor_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AccAddCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void add_duplicate_account() throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        model.addAccount(new Account(\"duplicate123\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003enew AccAddCommand(new Account(\"duplicate123\"))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .execute(model));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        model.deleteAccount(\"duplicate123\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Account personal \u003d new AccountBuilder(\"Personal\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Account project \u003d new AccountBuilder(\"Project\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        AccAddCommand addPersonalCommand \u003d new AccAddCommand(personal);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        AccAddCommand addProjectCommand \u003d new AccAddCommand(project);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertTrue(addPersonalCommand.equals(addPersonalCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        AccAddCommand addPersonalCommandCopy \u003d new AccAddCommand(personal);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertTrue(addPersonalCommand.equals(addPersonalCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(addPersonalCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(addPersonalCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // different expenditure -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(addPersonalCommand.equals(addProjectCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 57,
      "zwasd": 4
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/account/AccCheckoutCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccCheckoutCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void constructor_nullAccountName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AccCheckoutCommand(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void constructor_nonExistentAccountName_throwsCommandException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AccCheckoutCommand(\".\").execute(model));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 27,
      "zwasd": 4
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/account/AccClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.testutil.TypicalExpenditures.getTypicalAccount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertCommandSuccess(new AccClearCommand(), model, AccClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expectedModel.clearActiveAccount();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertCommandSuccess(new AccClearCommand(), model, AccClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 10,
      "-": 19,
      "JJiahui": 3
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/account/AccDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccDeleteCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void constructor_nullAccountName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AccCheckoutCommand(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void constructor_nonExistentAccountName_throwsCommandException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AccCheckoutCommand(\"nonExistingAccount\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .execute(model));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        AccDeleteCommand deletePersonalAccountCommand \u003d new AccDeleteCommand(\"PERSONAL\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        AccDeleteCommand deleteProjectAccountCommand \u003d new AccDeleteCommand(\"PROJECT\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertTrue(deletePersonalAccountCommand.equals(deletePersonalAccountCommand));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        AccDeleteCommand deletePersonalAccountCommandCopy \u003d new AccDeleteCommand(\"PERSONAL\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertTrue(deletePersonalAccountCommand.equals(deletePersonalAccountCommandCopy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(deletePersonalAccountCommand.equals(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(deletePersonalAccountCommand.equals(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // different expenditure -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(deletePersonalAccountCommand.equals(deleteProjectAccountCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 51,
      "zwasd": 4
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/account/AccListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "//import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.logic.commands.CommandTestUtil.showExpenditureAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.testutil.TypicalExpenditures.getTypicalAccount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for AccListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    //TODO: SP HAS NO IDEA FOR THE ONE BELOW"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    //public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    //    assertCommandSuccess(new AccListCommand(), model, AccListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     showExpenditureAtIndex(model, INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(new AccListCommand(), model, AccListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 6,
      "zwasd": 16,
      "-": 17,
      "JJiahui": 2
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/account/AccRenameCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccRenameCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void constructor_nullAccountRename_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AccRenameCommand(\"default\", null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void constructor_existentAccountName_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        model.addAccount(new Account(\"testing123\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        model.addAccount(new Account(\"123testing\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AccRenameCommand(\"testing123\", \"123testing\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .execute(model));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        model.deleteAccount(\"testing123\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        model.deleteAccount(\"123testing\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        AccRenameCommand renamePersonalAccountCommand \u003d new AccRenameCommand(\"PERSONAL\", \"12345\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        AccRenameCommand renameProjectAccountCommand \u003d new AccRenameCommand(\"PROJECT\", \"54321\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertTrue(renamePersonalAccountCommand.equals(renamePersonalAccountCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        AccRenameCommand renamePersonalAccountCommandCopy \u003d new AccRenameCommand(\"PERSONAL\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \"12345\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertTrue(renamePersonalAccountCommand.equals(renamePersonalAccountCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(renamePersonalAccountCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(renamePersonalAccountCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // different expenditure -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(renamePersonalAccountCommand.equals(renameProjectAccountCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 52,
      "zwasd": 4
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/expenditure/EditExpenditureDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_AMOUNT_MRT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DATE_MRT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_INFO_MRT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_BUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.EditExpenditureDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class EditExpenditureDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor descriptorWithSameValues \u003d new EditExpenditureDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // different info -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor editedAmy \u003d new EditExpenditureDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withInfo(VALID_INFO_MRT).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        editedAmy \u003d new EditExpenditureDescriptorBuilder(DESC_AMY).withAmount(VALID_AMOUNT_MRT).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        editedAmy \u003d new EditExpenditureDescriptorBuilder(DESC_AMY).withDate(VALID_DATE_MRT).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        editedAmy \u003d new EditExpenditureDescriptorBuilder(DESC_AMY).withTag(VALID_TAG_BUS).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 12,
      "zwasd": 12,
      "-": 30,
      "JJiahui": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/expenditure/ExpAddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ExpAddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_newExpenditure_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure validExpenditure \u003d new ExpenditureBuilder().withAmount(3.00).withInfo(\"chicken\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(model.getAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     expectedModel.addExpenditure(validExpenditure);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(new ExpAddCommand(validExpenditure), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             String.format(ExpAddCommand.MESSAGE_SUCCESS, validExpenditure), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_duplicateExpenditure_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure expenditureInList \u003d model.getAccountList().getExpenditureList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandFailure(new ExpAddCommand(expenditureInList), model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             ExpAddCommand.MESSAGE_DUPLICATE_EXPENDITURE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 30,
      "-": 16,
      "JJiahui": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/expenditure/ExpAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.model.AccountList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.model.ReadOnlyAccount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.MonthlySpendingCalculator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReportableAccount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.budget.Budget;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.budget.BudgetMap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.BaseExp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpAddCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void constructor_nullExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExpAddCommand(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void execute_expenditureAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ModelStubAcceptingExpenditureAdded modelStub \u003d new ModelStubAcceptingExpenditureAdded();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure validExpenditure \u003d new ExpenditureBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        CommandResult commandResult \u003d new ExpAddCommand(validExpenditure).execute(modelStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(String.format(ExpAddCommand.MESSAGE_SUCCESS, validExpenditure), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(Arrays.asList(validExpenditure), modelStub.expendituresAdded);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_duplicateExpenditure_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure validExpenditure \u003d new ExpenditureBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpAddCommand expAddCommand \u003d new ExpAddCommand(validExpenditure);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ModelStub modelStub \u003d new ModelStubWithExpenditure(validExpenditure);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertThrows(CommandException.class, ExpAddCommand.MESSAGE_DUPLICATE_EXPENDITURE, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             expAddCommand.execute(modelStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure alice \u003d new ExpenditureBuilder().withInfo(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure bob \u003d new ExpenditureBuilder().withInfo(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpAddCommand addAliceCommand \u003d new ExpAddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpAddCommand addBobCommand \u003d new ExpAddCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpAddCommand addAliceCommandCopy \u003d new ExpAddCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // different expenditure -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void addExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public void addRepeat(Repeat repeat) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public void deleteRepeat(Repeat target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public void setAccountList(ReadOnlyAccountList newData) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public ReadOnlyAccountList getAccountList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public boolean hasExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void deleteExpenditure(Expenditure target) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void setExpenditure(Expenditure target, Expenditure editedExpenditure) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public void setRepeat(Repeat target, Repeat editedRepeat) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public ObservableList\u003cExpenditure\u003e getFilteredExpenditureList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public ObservableList\u003cRepeat\u003e getFilteredRepeatList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public ObservableList\u003cBaseExp\u003e getFilteredBaseExpList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void updateFilteredExpenditureList(Predicate\u003cExpenditure\u003e predicate) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public void updateFilteredBaseExpList(Predicate\u003cBaseExp\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public boolean updateActiveAccount(String accountName) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public void clearActiveAccount() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public String renameAccount(String oldName, String newName) throws CommandException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public String deleteAccount(String name) throws CommandException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public void addAccount(Account account) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public ReportableAccount getReportableAccount() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void updateActiveDate(LocalDate date) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public LocalDate getActiveDate() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public BudgetMap getBudgets() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public MonthlySpendingCalculator getMonthlySpending() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public MonthlySpendingCalculator getMonthlySpending(YearMonth givenYearMonth) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        public MonthlySpendingCalculator getMonthlySpending(String newActiveAccount) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * A Model stub that contains a single expenditure."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private class ModelStubWithExpenditure extends ModelStub {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        private final Expenditure expenditure;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ModelStubWithExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            requireNonNull(expenditure);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            this.expenditure \u003d expenditure;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public boolean hasExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            requireNonNull(expenditure);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return this.expenditure.equals(expenditure);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * A Model stub that always accept the expenditure being added."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private class ModelStubAcceptingExpenditureAdded extends ModelStub {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        final ArrayList\u003cExpenditure\u003e expendituresAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public boolean hasExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            requireNonNull(expenditure);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return expendituresAdded.stream().anyMatch(expenditure::equals);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void addExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            requireNonNull(expenditure);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            expendituresAdded.add(expenditure);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public MonthlySpendingCalculator getMonthlySpending() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new MonthlySpendingCalculator(null, null, null, null);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public ReadOnlyAccountList getAccountList() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            // return new AccountList();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "sp-shaopeng": 35,
      "zwasd": 83,
      "-": 133,
      "JJiahui": 55
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/expenditure/ExpDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.logic.commands.CommandTestUtil.showExpenditureAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_SECOND_EXPENDITURE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.testutil.TypicalExpenditures.getTypicalAccount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * {@code ExpDeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpDeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure expenditureToDelete \u003d model.getFilteredExpenditureList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .get(INDEX_FIRST_EXPENDITURE.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpDeleteCommand expDeleteCommand \u003d new ExpDeleteCommand(INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     String expectedMessage \u003d String.format(ExpDeleteCommand.MESSAGE_DELETE_EXPENDITURE_SUCCESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //                     expenditureToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ModelManager expectedModel \u003d new ModelManager(model.getAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     expectedModel.deleteExpenditure(expenditureToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(expDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenditureList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpDeleteCommand expDeleteCommand \u003d new ExpDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertCommandFailure(expDeleteCommand, model, Messages.MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     showExpenditureAtIndex(model, INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure expenditureToDelete \u003d model.getFilteredExpenditureList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .get(INDEX_FIRST_EXPENDITURE.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpDeleteCommand expDeleteCommand \u003d new ExpDeleteCommand(INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     String expectedMessage \u003d String.format(ExpDeleteCommand.MESSAGE_DELETE_EXPENDITURE_SUCCESS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //                     expenditureToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(model.getAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     expectedModel.deleteExpenditure(expenditureToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     showNoExpenditure(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(expDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     showExpenditureAtIndex(model, INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Index outOfBoundIndex \u003d INDEX_SECOND_EXPENDITURE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAccountList().getExpenditureList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpDeleteCommand expDeleteCommand \u003d new ExpDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandFailure(expDeleteCommand, model, Messages.MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpDeleteCommand deleteFirstCommand \u003d new ExpDeleteCommand(INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpDeleteCommand deleteSecondCommand \u003d new ExpDeleteCommand(INDEX_SECOND_EXPENDITURE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpDeleteCommand deleteFirstCommandCopy \u003d new ExpDeleteCommand(INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // different expenditure -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private void showNoExpenditure(Model model) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        model.updateFilteredExpenditureList(p -\u003e false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(model.getFilteredExpenditureList().isEmpty());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 61,
      "-": 52,
      "JJiahui": 2
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/expenditure/ExpEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_INFO_MRT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.logic.commands.CommandTestUtil.showExpenditureAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_SECOND_EXPENDITURE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.model.AccountList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.EditExpenditureDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * and unit tests for ExpEditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpEditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure editedExpenditure \u003d new ExpenditureBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     EditExpenditureDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             new EditExpenditureDescriptorBuilder(editedExpenditure).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpEditCommand expEditCommand \u003d new ExpEditCommand(INDEX_FIRST_EXPENDITURE, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     String expectedMessage \u003d String.format(ExpEditCommand.MESSAGE_EDIT_EXPENDITURE_SUCCESS, editedExpenditure);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new AccountList(model.getAccountList()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     expectedModel.setExpenditure(model.getFilteredExpenditureList().get(0), editedExpenditure);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(expEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Index indexLastExpenditure \u003d Index.fromOneBased(model.getFilteredExpenditureList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure lastExpenditure \u003d model.getFilteredExpenditureList().get(indexLastExpenditure.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpenditureBuilder expenditureInList \u003d new ExpenditureBuilder(lastExpenditure);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure editedExpenditure \u003d expenditureInList.withInfo(VALID_INFO_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder().withInfo(VALID_INFO_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpEditCommand expEditCommand \u003d new ExpEditCommand(indexLastExpenditure, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     String expectedMessage \u003d String.format(ExpEditCommand.MESSAGE_EDIT_EXPENDITURE_SUCCESS, editedExpenditure);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new AccountList(model.getAccountList()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     expectedModel.setExpenditure(lastExpenditure, editedExpenditure);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(expEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpEditCommand expEditCommand \u003d new ExpEditCommand(INDEX_FIRST_EXPENDITURE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             new EditExpenditureDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure editedExpenditure \u003d model.getFilteredExpenditureList()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .get(INDEX_FIRST_EXPENDITURE.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     String expectedMessage \u003d String.format(ExpEditCommand.MESSAGE_EDIT_EXPENDITURE_SUCCESS, editedExpenditure);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new AccountList(model.getAccountList()), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(expEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO; update test case"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     showExpenditureAtIndex(model, INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure expenditureInFilteredList \u003d model.getFilteredExpenditureList()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .get(INDEX_FIRST_EXPENDITURE.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure editedExpenditure \u003d new ExpenditureBuilder(expenditureInFilteredList)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .withInfo(VALID_INFO_BOB).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpEditCommand expEditCommand \u003d new ExpEditCommand(INDEX_FIRST_EXPENDITURE,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             new EditExpenditureDescriptorBuilder().withInfo(VALID_INFO_BOB).build());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     String expectedMessage \u003d String.format(ExpEditCommand.MESSAGE_EDIT_EXPENDITURE_SUCCESS, editedExpenditure);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new AccountList(model.getAccountList()), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     expectedModel.setExpenditure(model.getFilteredExpenditureList().get(0), editedExpenditure);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(expEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_duplicateExpenditureUnfilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure firstExpenditure \u003d model.getFilteredExpenditureList()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .get(INDEX_FIRST_EXPENDITURE.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder(firstExpenditure).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpEditCommand expEditCommand \u003d new ExpEditCommand(INDEX_SECOND_EXPENDITURE, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandFailure(expEditCommand, model, ExpEditCommand.MESSAGE_DUPLICATE_EXPENDITURE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_duplicateExpenditureFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     showExpenditureAtIndex(model, INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // edit expenditure in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure expenditureInList \u003d model.getAccountList().getExpenditureList()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .get(INDEX_SECOND_EXPENDITURE.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpEditCommand expEditCommand \u003d new ExpEditCommand(INDEX_FIRST_EXPENDITURE,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             new EditExpenditureDescriptorBuilder(expenditureInList).build());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandFailure(expEditCommand, model, ExpEditCommand.MESSAGE_DUPLICATE_EXPENDITURE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void execute_invalidExpenditureIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenditureList().size() + 1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withInfo(VALID_INFO_MRT).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand expEditCommand \u003d new ExpEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertCommandFailure(expEditCommand, model, Messages.MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_invalidExpenditureIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     showExpenditureAtIndex(model, INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Index outOfBoundIndex \u003d INDEX_SECOND_EXPENDITURE;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAccountList().getExpenditureList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpEditCommand expEditCommand \u003d new ExpEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             new EditExpenditureDescriptorBuilder().withInfo(VALID_INFO_BOB).build());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandFailure(expEditCommand, model, Messages.MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        final ExpEditCommand standardCommand \u003d new ExpEditCommand(INDEX_FIRST_EXPENDITURE, DESC_AMY);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor copyDescriptor \u003d new ExpEditCommand"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .EditExpenditureDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand commandWithSameValues \u003d new ExpEditCommand(INDEX_FIRST_EXPENDITURE, copyDescriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(standardCommand.equals(new AccClearCommand()));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(standardCommand.equals(new ExpEditCommand(INDEX_SECOND_EXPENDITURE, DESC_AMY)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(standardCommand.equals(new ExpEditCommand(INDEX_FIRST_EXPENDITURE, DESC_BOB)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 2,
      "sp-shaopeng": 3,
      "zwasd": 128,
      "-": 57,
      "JJiahui": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/general/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.general.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, true, false, false,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 2,
      "zwasd": 7,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/general/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.testutil.TypicalExpenditures.CARL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.testutil.TypicalExpenditures.ELLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.testutil.TypicalExpenditures.FIONA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.testutil.TypicalExpenditures.getTypicalAccount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        InfoContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                new InfoContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        InfoContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                new InfoContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // different expenditure -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void execute_zeroKeywords_noExpenditureFound() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENDITURES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expectedModel.updateFilteredBaseExpList(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredBaseExpList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_multipleKeywords_multipleExpendituresFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     String expectedMessage \u003d String.format(MESSAGE_EXPENDITURES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     InfoContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    //     FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     expectedModel.updateFilteredExpenditureList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredExpenditureList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses {@code userInput} into a {@code InfoContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private InfoContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new InfoContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 29,
      "-": 41,
      "JJiahui": 14
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/general/GoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class GoCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 5
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/general/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.general.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, false,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                false, false, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 2,
      "zwasd": 7,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/general/SetBudgetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.saveit.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class SetBudgetCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void constructor_nullArgs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // both null"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SetBudgetCommand(null, null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // amount null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                new SetBudgetCommand(ParserUtil.parseYearMonth(\"2020-03\"), null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 2,
      "zwasd": 16,
      "JJiahui": 4
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/repeat/RepeatAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.repeat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatAddCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void constructor_nullRepeat_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RepeatAddCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Expenditure alice \u003d new ExpenditureBuilder().withInfo(\"Alice\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Expenditure bob \u003d new ExpenditureBuilder().withInfo(\"Bob\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        ExpAddCommand addAliceCommand \u003d new ExpAddCommand(alice);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        ExpAddCommand addBobCommand \u003d new ExpAddCommand(bob);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        ExpAddCommand addAliceCommandCopy \u003d new ExpAddCommand(alice);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // different expenditure -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 50,
      "zwasd": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/repeat/RepeatDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.repeat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatDeleteCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void constructor_nullExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExpAddCommand(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    //TODO ADD MORE TEST CASE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 24,
      "zwasd": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/repeat/RepeatEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.repeat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class RepeatEditCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 4
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/report/ExportReportCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_ORGANISATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_END_DATE_BUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_FILE_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_FILE_NAME_ALT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_GRAPH_BAR_CAPS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_MONTH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_BUS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_BUS_ALT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.testutil.ReportBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExportReportCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void constructor_nullExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportBuilder builder \u003d new ReportBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withStartDate(VALID_START_DATE_BUS)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withEndDate(VALID_END_DATE_BUS)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withGraphType(VALID_GRAPH_BAR_CAPS)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withOrganise(VALID_ORGANISATION_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExportReportCommand(null, VALID_FILE_NAME));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExportReportCommand(builder.build(), null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExportReportCommand(null, null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportBuilder rp \u003d new ReportBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withStartDate(VALID_START_DATE_BUS)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withEndDate(VALID_END_DATE_BUS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withGraphType(VALID_GRAPH_BAR_CAPS)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withOrganise(VALID_ORGANISATION_MONTH);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ExportReportCommand command1 \u003d new ExportReportCommand(rp.build(), VALID_FILE_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ExportReportCommand command2 \u003d new ExportReportCommand(rp.build(), VALID_FILE_NAME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertTrue(command1.equals(command2));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //different start date"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        rp.withStartDate(VALID_START_DATE_BUS_ALT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ExportReportCommand command3 \u003d new ExportReportCommand(rp.build(), VALID_FILE_NAME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(command1.equals(command3));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        rp.withStartDate(VALID_START_DATE_BUS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //different end date"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        rp.withEndDate(VALID_START_DATE_BUS_ALT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ExportReportCommand command4 \u003d new ExportReportCommand(rp.build(), VALID_FILE_NAME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(command1.equals(command4));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        rp.withEndDate(VALID_END_DATE_BUS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //different file name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ExportReportCommand command5 \u003d new ExportReportCommand(rp.build(), VALID_FILE_NAME_ALT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(command1.equals(command5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void executeFailure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportBuilder rp \u003d new ReportBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withStartDate(VALID_START_DATE_BUS)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withEndDate(VALID_END_DATE_BUS)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withGraphType(VALID_GRAPH_BAR_CAPS)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withOrganise(INVALID_ORGANISATION);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ExportReportCommand command1 \u003d new ExportReportCommand(rp.build(), VALID_FILE_NAME);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertCommandFailure(command1, model,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 86,
      "zwasd": 5,
      "JJiahui": 3
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/report/PrintReportCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "package seedu.saveit.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_ORGANISATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_END_DATE_BUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_GRAPH_BAR_CAPS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_MONTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_BUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_BUS_ALT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.testutil.ReportBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class PrintReportCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void constructor_nullExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PrintReportCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportBuilder rp \u003d new ReportBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withStartDate(VALID_START_DATE_BUS)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withEndDate(VALID_END_DATE_BUS)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withGraphType(VALID_GRAPH_BAR_CAPS)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withOrganise(VALID_ORGANISATION_MONTH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        PrintReportCommand command1 \u003d new PrintReportCommand(rp.build());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        PrintReportCommand command2 \u003d new PrintReportCommand(rp.build());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertTrue(command1.equals(command2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //different start date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        rp.withStartDate(VALID_START_DATE_BUS_ALT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        PrintReportCommand command3 \u003d new PrintReportCommand(rp.build());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(command1.equals(command3));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        rp.withStartDate(VALID_START_DATE_BUS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //different end date"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        rp.withEndDate(VALID_START_DATE_BUS_ALT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        PrintReportCommand command4 \u003d new PrintReportCommand(rp.build());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(command1.equals(command4));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void executeFailure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportBuilder rp \u003d new ReportBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withStartDate(VALID_START_DATE_BUS)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withEndDate(VALID_END_DATE_BUS)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withGraphType(VALID_GRAPH_BAR_CAPS)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withOrganise(INVALID_ORGANISATION);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        PrintReportCommand command1 \u003d new PrintReportCommand(rp.build());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertCommandFailure(command1, model, PrintReportCommand.MESSAGE_FAIL);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 75
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/report/ReportWindowViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "package seedu.saveit.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_ORGANISATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_END_DATE_BUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_GRAPH_BAR_CAPS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_MONTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_BUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_BUS_ALT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.commands.ReportCommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.testutil.ReportBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.Bar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.Graph;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ReportWindowViewCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportBuilder rp \u003d new ReportBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withStartDate(VALID_START_DATE_BUS)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withEndDate(VALID_END_DATE_BUS)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withGraphType(VALID_GRAPH_BAR_CAPS)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withOrganise(VALID_ORGANISATION_MONTH);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportWindowViewCommand command1 \u003d new ReportWindowViewCommand(rp.build());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportWindowViewCommand command2 \u003d new ReportWindowViewCommand(rp.build());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertTrue(command1.equals(command2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //different start date"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        rp.withStartDate(VALID_START_DATE_BUS_ALT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportWindowViewCommand command3 \u003d new ReportWindowViewCommand(rp.build());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(command1.equals(command3));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        rp.withStartDate(VALID_START_DATE_BUS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //different end date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        rp.withEndDate(VALID_START_DATE_BUS_ALT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportWindowViewCommand command4 \u003d new ReportWindowViewCommand(rp.build());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(command1.equals(command4));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void executeSuccess() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportBuilder rp \u003d new ReportBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withStartDate(VALID_START_DATE_BUS)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withEndDate(VALID_END_DATE_BUS)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withGraphType(VALID_GRAPH_BAR_CAPS)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withOrganise(VALID_ORGANISATION_MONTH);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportWindowViewCommand command1 \u003d new ReportWindowViewCommand(rp.build());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Graph graph \u003d new Bar(new HashMap(), VALID_ORGANISATION_MONTH);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportCommandResult r \u003d new ReportCommandResult(ReportWindowViewCommand.MESSAGE_SUCCESS, graph);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertCommandSuccess(command1, model, r, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void executeFailure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportBuilder rp \u003d new ReportBuilder()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withStartDate(VALID_START_DATE_BUS)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withEndDate(VALID_END_DATE_BUS)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withGraphType(VALID_GRAPH_BAR_CAPS)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withOrganise(INVALID_ORGANISATION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportWindowViewCommand command1 \u003d new ReportWindowViewCommand(rp.build());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertCommandFailure(command1, model,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReportWindowViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 87,
      "JJiahui": 3
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/commands/report/ViewReportCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_ORGANISATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_END_DATE_BUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_GRAPH_BAR_CAPS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_MONTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_BUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_BUS_ALT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.testutil.ReportBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.Bar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.Graph;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ViewReportCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void constructor_nullExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ViewReportCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportBuilder rp \u003d new ReportBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withStartDate(VALID_START_DATE_BUS)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withEndDate(VALID_END_DATE_BUS)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withGraphType(VALID_GRAPH_BAR_CAPS)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withOrganise(VALID_ORGANISATION_MONTH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ViewReportCommand command1 \u003d new ViewReportCommand(rp.build());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ViewReportCommand command2 \u003d new ViewReportCommand(rp.build());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertTrue(command1.equals(command2));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //different start date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        rp.withStartDate(VALID_START_DATE_BUS_ALT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ViewReportCommand command3 \u003d new ViewReportCommand(rp.build());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(command1.equals(command3));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        rp.withStartDate(VALID_START_DATE_BUS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //different end date"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        rp.withEndDate(VALID_START_DATE_BUS_ALT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ViewReportCommand command4 \u003d new ViewReportCommand(rp.build());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(command1.equals(command4));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void executeSuccess() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportBuilder rp \u003d new ReportBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withStartDate(VALID_START_DATE_BUS)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withEndDate(VALID_END_DATE_BUS)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withGraphType(VALID_GRAPH_BAR_CAPS)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withOrganise(VALID_ORGANISATION_MONTH);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ViewReportCommand command1 \u003d new ViewReportCommand(rp.build());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Graph graph \u003d new Bar(new HashMap(), VALID_ORGANISATION_MONTH);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        CommandResult r \u003d new CommandResult(ViewReportCommand.MESSAGE_SUCCESS, graph, true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertCommandSuccess(command1, model, r, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void executeFailure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportBuilder rp \u003d new ReportBuilder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withStartDate(VALID_START_DATE_BUS)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withEndDate(VALID_END_DATE_BUS)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withGraphType(VALID_GRAPH_BAR_CAPS)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withOrganise(INVALID_ORGANISATION);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ViewReportCommand command1 \u003d new ViewReportCommand(rp.build());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertCommandFailure(command1, model, ViewReportCommand.MESSAGE_FAIL);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 90,
      "zwasd": 5
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String INVALID_INFO \u003d \"F@od\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2020\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final double INVALID_AMOUNT \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String VALID_INFO \u003d \"phone\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String VALID_DATE \u003d \"2019-09-11\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final double VALID_AMOUNT \u003d 3.14;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String VALID_TAG \u003d \"friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENDITURE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENDITURE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseInfo_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseInfo((String) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseInfo_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseInfo(INVALID_INFO));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseInfo_validValueWithoutWhitespace_returnsInfo() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Info expectedInfo \u003d new Info(VALID_INFO);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(expectedInfo, ParserUtil.parseInfo(VALID_INFO));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseInfo_validValueWithWhitespace_returnsTrimmedInfo() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String infoWithWhitespace \u003d WHITESPACE + VALID_INFO + WHITESPACE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Info expectedInfo \u003d new Info(VALID_INFO);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(expectedInfo, ParserUtil.parseInfo(infoWithWhitespace));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((String) null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseAmount_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAmount((String) null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseAmount_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAmount(Double.toString(INVALID_AMOUNT)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseAmount_validValueWithoutWhitespace_returnsAmount() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(Double.toString(VALID_AMOUNT)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseAmount_validValueWithWhitespace_returnsTrimmedAmount() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String amountWithWhitespace \u003d WHITESPACE + VALID_AMOUNT + WHITESPACE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(amountWithWhitespace));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG + WHITESPACE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 59,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/TopLevelParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_EMPTY_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpAddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpDeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpEditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.general.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.general.GoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.account.AccLevelParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.expenditure.ExpLevelParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.EditExpenditureDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.ExpenditureUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class TopLevelParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final TopLevelParser parser \u003d new TopLevelParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseCommand_expenditure_add() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure expenditure \u003d new ExpenditureBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpAddCommand command \u003d (ExpAddCommand) parser.parseCommand(ExpLevelParser.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + ExpenditureUtil.getAddCommand(expenditure));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(new ExpAddCommand(expenditure), command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseCommand_account_clear() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(parser.parseCommand(AccLevelParser.COMMAND_WORD + \" \" + AccClearCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                instanceof AccClearCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(parser.parseCommand(AccLevelParser.COMMAND_WORD + \" \" + AccClearCommand.COMMAND_WORD + \" 3\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                instanceof AccClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseCommand_expenditure_delete() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpDeleteCommand command \u003d (ExpDeleteCommand) parser.parseCommand(ExpLevelParser.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + ExpDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENDITURE.getOneBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(new ExpDeleteCommand(INDEX_FIRST_EXPENDITURE), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseCommand_expenditure_edit() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure expenditure \u003d new ExpenditureBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder(expenditure).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand command \u003d (ExpEditCommand) parser.parseCommand(ExpLevelParser.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + ExpEditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENDITURE.getOneBased() + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + ExpenditureUtil.getEditExpenditureDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(new ExpEditCommand(INDEX_FIRST_EXPENDITURE, descriptor), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String keyword \u003d \"bus\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertEquals(new FindCommand(new InfoContainsKeywordsPredicate(Arrays.asList(keyword))), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseCommand_go() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        LocalDate goTo \u003d LocalDate.now();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        GoCommand command \u003d (GoCommand) parser.parseCommand(GoCommand.COMMAND_WORD + \" \" + goTo.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(new GoCommand(goTo), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_EMPTY_COMMAND, ()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 23,
      "zwasd": 51,
      "-": 35,
      "JJiahui": 4
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/account/AccAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccAddCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final AccAddCommandParser parser \u003d new AccAddCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parse_validValue_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Account expectedAccount \u003d new AccountBuilder(\"school\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseSuccess(parser, \"school\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                new AccAddCommand(expectedAccount));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // with preamble whitespace"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + \"school\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                new AccAddCommand(expectedAccount));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseInvalidValue_nameContainSpace_parseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                AccAddCommand.NAME_CONTAIN_SPACE + \"\\n\" + AccAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String expectedMessage1 \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                AccAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // contains space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"my account\", expectedMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // empty"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseInvalidValue_nameTooLong_parseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                AccAddCommand.NAME_TOO_LONG + \"\\n\" + AccAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"thisIsAVeryLongAccountName\", expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 43,
      "JJiahui": 7
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/account/AccCheckoutCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccCheckoutCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccCheckoutCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccCheckoutCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final AccCheckoutCommandParser parser \u003d new AccCheckoutCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parse_validValue_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseSuccess(parser, \"school\", new AccCheckoutCommand(\"school\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // empty value"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // with space"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"my account\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 31
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/account/AccClearCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccClearCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccClearCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final AccClearCommandParser parser \u003d new AccClearCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parse_validValue_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // whitespace"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseSuccess(parser, \" \", new AccClearCommand());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // empty"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseSuccess(parser, \"\", new AccClearCommand());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // any letters or words"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"something\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 31,
      "JJiahui": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/account/AccDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccDeleteCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final AccDeleteCommandParser parser \u003d new AccDeleteCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseSuccess(parser, \"school\", new AccDeleteCommand(\"school\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseInvalidArgs_nameContainSpace_parseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String expectedMessage1 \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                AccAddCommand.NAME_CONTAIN_SPACE + \"\\n\" + AccDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // contains space"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertParseFailure(parser, \"my account\", expectedMessage1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // empty"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseInvalidArgs_nameTooLong_parseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccAddCommand.NAME_TOO_LONG"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                + \"\\n\" + AccDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"thisIsAVeryLongAccountName\", expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 34,
      "JJiahui": 8
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/account/AccLevelParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccCheckoutCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccDeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccRenameCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.AccountUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccLevelParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final AccLevelParser parser \u003d new AccLevelParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseAccCommand_add() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Account account \u003d new AccountBuilder(\"school\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        AccAddCommand command \u003d (AccAddCommand) parser.parseCommand(AccountUtil.getAddCommand(account));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(new AccAddCommand(account), command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseAccCommand_checkout() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        AccCheckoutCommand command \u003d (AccCheckoutCommand) parser.parseCommand("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                AccCheckoutCommand.COMMAND_WORD + \" school\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(new AccCheckoutCommand(\"school\"), command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseAccCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(parser.parseCommand(AccClearCommand.COMMAND_WORD) instanceof AccClearCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseAccCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        AccDeleteCommand command \u003d (AccDeleteCommand) parser.parseCommand(AccDeleteCommand.COMMAND_WORD + \" school\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(new AccDeleteCommand(\"school\"), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseAccCommand_list() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(parser.parseCommand(AccListCommand.COMMAND_WORD) instanceof AccListCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseAccCommand_rename() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        AccRenameCommand command \u003d (AccRenameCommand) parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                AccRenameCommand.COMMAND_WORD + \" school work\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(new AccRenameCommand(\"school\", \"work\"), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void accParseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void accParseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 20,
      "zwasd": 55
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/account/AccListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccListCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final AccListCommandParser parser \u003d new AccListCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parse_validValue_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // whitespace"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseSuccess(parser, \" \", new AccListCommand());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // empty"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseSuccess(parser, \"\", new AccListCommand());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // any letters or words"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"something\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 31,
      "JJiahui": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/account/AccRenameCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.account.AccAddCommand.NAME_TOO_LONG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccRenameCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccRenameCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final AccRenameCommandParser parser \u003d new AccRenameCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parse_validArgs_returnsAccRenameCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseSuccess(parser, \"school work\", new AccRenameCommand(\"school\", \"work\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertParseSuccess(parser, \"work\", new AccRenameCommand(null, \"work\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parse_invalidArgs_parseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccRenameCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String expectedMessage1 \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \"The number of parameters is incorrect\\n\" + AccRenameCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String expectedMessage2 \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                NAME_TOO_LONG + \"\\n\" + AccRenameCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // more than 2 words"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertParseFailure(parser, \"my school work\", expectedMessage1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // empty"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // old account name at least 26 characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertParseFailure(parser, \"thisIsAVeryLongAccountName work\", expectedMessage2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // new account name at least 26 characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertParseFailure(parser, \"school thisIsAVeryLongAccountName\", expectedMessage2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 32,
      "JJiahui": 9
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/expenditure/ExpAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.AMOUNT_DESC_MRT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DATE_DESC_BUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DATE_DESC_MRT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INFO_DESC_BUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INFO_DESC_MRT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_INFO_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_BUS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_AMOUNT_MRT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_INFO_MRT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpAddCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpAddCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private ExpAddCommandParser parser \u003d new ExpAddCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Expenditure expectedExpenditure \u003d new ExpenditureBuilder(BOB).withTag(VALID_TAG_TRANSPORT).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + INFO_DESC_MRT + AMOUNT_DESC_MRT"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + DATE_DESC_MRT + TAG_DESC_TRANSPORT, new ExpAddCommand(expectedExpenditure));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // multiple infos - last info accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_BUS + INFO_DESC_MRT + AMOUNT_DESC_MRT"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + DATE_DESC_MRT + TAG_DESC_TRANSPORT, new ExpAddCommand(expectedExpenditure));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // multiple amounts - last amount accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_MRT + AMOUNT_DESC_BUS + AMOUNT_DESC_MRT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + DATE_DESC_MRT + TAG_DESC_TRANSPORT, new ExpAddCommand(expectedExpenditure));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_MRT + AMOUNT_DESC_MRT + DATE_DESC_BUS"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + DATE_DESC_MRT + TAG_DESC_TRANSPORT, new ExpAddCommand(expectedExpenditure));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure expectedExpenditureMultipleTags \u003d new ExpenditureBuilder(BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withTag(VALID_TAG_TRANSPORT)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_MRT + AMOUNT_DESC_MRT + DATE_DESC_MRT"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + TAG_DESC_BUS + TAG_DESC_TRANSPORT, new ExpAddCommand(expectedExpenditureMultipleTags));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Expenditure expectedExpenditure \u003d new ExpenditureBuilder(AMY).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_BUS + AMOUNT_DESC_BUS + DATE_DESC_BUS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                new ExpAddCommand(expectedExpenditure));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // missing info prefix"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, VALID_INFO_MRT + AMOUNT_DESC_MRT + DATE_DESC_MRT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_MRT + VALID_AMOUNT_MRT + DATE_DESC_MRT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, VALID_INFO_MRT + VALID_AMOUNT_MRT + DATE_DESC_MRT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // invalid info"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INVALID_INFO_DESC + AMOUNT_DESC_MRT + DATE_DESC_MRT"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + TAG_DESC_BUS + TAG_DESC_TRANSPORT, Info.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_MRT + INVALID_AMOUNT_DESC + DATE_DESC_MRT"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + TAG_DESC_BUS + TAG_DESC_TRANSPORT, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_MRT + AMOUNT_DESC_MRT + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + TAG_DESC_BUS + TAG_DESC_TRANSPORT, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_MRT + AMOUNT_DESC_MRT + DATE_DESC_MRT"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_TRANSPORT, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INVALID_INFO_DESC + AMOUNT_DESC_MRT + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                Info.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + INFO_DESC_MRT + AMOUNT_DESC_MRT"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        + DATE_DESC_MRT + TAG_DESC_BUS + TAG_DESC_TRANSPORT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "sp-shaopeng": 39,
      "zwasd": 40,
      "-": 42,
      "JJiahui": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/expenditure/ExpDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * outside of the ExpDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * same path through the ExpDeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpDeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private ExpDeleteCommandParser parser \u003d new ExpDeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ExpDeleteCommand(INDEX_FIRST_EXPENDITURE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 12,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/expenditure/ExpEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.AMOUNT_DESC_MRT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DATE_DESC_BUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.DATE_DESC_MRT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INFO_DESC_BUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_INFO_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_BUS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_AMOUNT_BUS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_AMOUNT_MRT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DATE_BUS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DATE_MRT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_INFO_BUS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_BUS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_SECOND_EXPENDITURE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_THIRD_EXPENDITURE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpEditCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.EditExpenditureDescriptorBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpEditCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private ExpEditCommandParser parser \u003d new ExpEditCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, VALID_INFO_BUS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"1\", ExpEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"-5\" + INFO_DESC_BUS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"0\" + INFO_DESC_BUS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INFO_DESC, Info.MESSAGE_CONSTRAINTS); // invalid info"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS); // invalid amount"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Expenditure} being edited,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_TRANSPORT + TAG_DESC_BUS + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INFO_DESC + INVALID_AMOUNT_DESC + VALID_DATE_BUS,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                Info.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXPENDITURE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_BUS"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + AMOUNT_DESC_BUS + DATE_DESC_BUS + INFO_DESC_BUS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder().withInfo(VALID_INFO_BUS)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withAmount(VALID_AMOUNT_BUS).withDate(VALID_DATE_BUS)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withTag(VALID_TAG_BUS).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand expectedCommand \u003d new ExpEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withAmount(VALID_AMOUNT_BUS).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand expectedCommand \u003d new ExpEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // info"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENDITURE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INFO_DESC_BUS;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withInfo(VALID_INFO_BUS).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand expectedCommand \u003d new ExpEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // amount"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor \u003d new EditExpenditureDescriptorBuilder().withAmount(VALID_AMOUNT_BUS).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expectedCommand \u003d new ExpEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_BUS;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor \u003d new EditExpenditureDescriptorBuilder().withDate(VALID_DATE_BUS).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expectedCommand \u003d new ExpEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor \u003d new EditExpenditureDescriptorBuilder().withTag(VALID_TAG_TRANSPORT).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expectedCommand \u003d new ExpEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_BUS + AMOUNT_DESC_BUS"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + TAG_DESC_TRANSPORT + DATE_DESC_BUS + AMOUNT_DESC_BUS + TAG_DESC_TRANSPORT"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + DATE_DESC_MRT + AMOUNT_DESC_MRT + TAG_DESC_BUS;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withAmount(VALID_AMOUNT_MRT).withDate(VALID_DATE_MRT)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withTag(VALID_TAG_BUS)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand expectedCommand \u003d new ExpEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 40,
      "zwasd": 53,
      "-": 75,
      "JJiahui": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/expenditure/ExpLevelParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpDeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpEditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.EditExpenditureDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.ExpenditureUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpLevelParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final ExpLevelParser parser \u003d new ExpLevelParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseExpCommand_add() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure expenditure \u003d new ExpenditureBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpAddCommand command \u003d (ExpAddCommand) parser.parseCommand(ExpenditureUtil.getAddCommand(expenditure));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertEquals(new ExpAddCommand(expenditure), command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseExpCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpDeleteCommand command \u003d (ExpDeleteCommand) parser.parseCommand(ExpDeleteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                        + \" \" + INDEX_FIRST_EXPENDITURE.getOneBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(new ExpDeleteCommand(INDEX_FIRST_EXPENDITURE), command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /* TODO budget test class"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseExpCommand_setBudget() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        YearMonth inputYearMonth \u003d YearMonth.from(LocalDate.now());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        SetBudgetCommand command \u003d (SetBudgetCommand) parser.parseCommand(SetBudgetCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + \" -a 500 -ym \" + inputYearMonth.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(new SetBudgetCommand(inputYearMonth, new Amount(500)), command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseExpCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure expenditure \u003d new ExpenditureBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder(expenditure).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand command \u003d (ExpEditCommand) parser.parseCommand(ExpEditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + INDEX_FIRST_EXPENDITURE.getOneBased() + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + ExpenditureUtil.getEditExpenditureDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(new ExpEditCommand(INDEX_FIRST_EXPENDITURE, descriptor), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void expParseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void expParseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 36,
      "zwasd": 34,
      "JJiahui": 7
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/general/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_nullArg_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FindCommandParser().parse(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                new FindCommand(new InfoContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 7,
      "zwasd": 7,
      "-": 23,
      "JJiahui": 5
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/general/GoCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.general.GoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class GoCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final GoCommandParser parser \u003d new GoCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_nullArg_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GoCommandParser().parse(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_invalidDate_throwsParserException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"2019-02-31\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_invalidDateFormat_throwsParserException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"2020/04/04\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_validArgs_returnsGoCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        LocalDate pivot \u003d LocalDate.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        GoCommand expectedGoCommand \u003d new GoCommand(pivot);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, pivot.toString(), expectedGoCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 39,
      "zwasd": 5,
      "JJiahui": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/general/SetBudgetCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.saveit.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.saveit.logic.commands.general.SetBudgetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class SetBudgetCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final SetBudgetCommandParser parser \u003d new SetBudgetCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parse_validArgs_returnSetBudgetCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String amountValue \u003d \"123.3\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String yearMonthValue \u003d YearMonth.now().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Amount testAmount \u003d new Amount(amountValue);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        YearMonth testYearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        //TODO I ALLOW NULL FOR YEARMONTH"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        //assertParseSuccess(parser, \"\" + CliSyntax.PREFIX_AMOUNT.getPrefix() + amountValue,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        //        new SetBudgetCommand(null, testAmount));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseSuccess(parser, \" \" + CliSyntax.PREFIX_AMOUNT.getPrefix() + amountValue + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + CliSyntax.PREFIX_YEARMONTH.getPrefix() + yearMonthValue,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                new SetBudgetCommand(testYearMonth, testAmount));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 2,
      "zwasd": 24,
      "JJiahui": 6
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/repeat/RepeatAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.repeat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.AMOUNT_DESC_MRT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.END_DATE_DESC_BUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.END_DATE_DESC_MRT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INFO_DESC_BUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INFO_DESC_MRT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_END_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_INFO_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_PERIOD_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_START_DATE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.START_DATE_DESC_BUS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.START_DATE_DESC_MRT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_BUS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_AMOUNT_MRT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DAILY_PERIOD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DAILY_PERIOD_DESC;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_END_DATE_MRT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_INFO_MRT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_MRT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_WEEKLY_PERIOD_DESC;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.repeat.RepeatAddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.testutil.RepeatBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatAddCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final RepeatAddCommandParser parser \u003d new RepeatAddCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Repeat expectedRepeat \u003d new RepeatBuilder().withInfo(VALID_INFO_MRT)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withAmount(VALID_AMOUNT_MRT)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withStartDate(VALID_START_DATE_MRT)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withEndDate(VALID_END_DATE_MRT)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withTag(VALID_TAG_TRANSPORT)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withPeriod(VALID_DAILY_PERIOD)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + INFO_DESC_MRT + AMOUNT_DESC_MRT"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + START_DATE_DESC_MRT + END_DATE_DESC_MRT + TAG_DESC_TRANSPORT + VALID_DAILY_PERIOD_DESC,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new RepeatAddCommand(expectedRepeat));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // multiple infos - last info accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_BUS + INFO_DESC_MRT + AMOUNT_DESC_MRT"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + START_DATE_DESC_MRT + END_DATE_DESC_MRT + TAG_DESC_TRANSPORT + VALID_DAILY_PERIOD_DESC,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new RepeatAddCommand(expectedRepeat));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // multiple amounts - last amount accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_MRT + AMOUNT_DESC_BUS + AMOUNT_DESC_MRT"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + START_DATE_DESC_MRT + END_DATE_DESC_MRT + TAG_DESC_TRANSPORT + VALID_DAILY_PERIOD_DESC,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new RepeatAddCommand(expectedRepeat));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // multiple start date - last start date accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_MRT + AMOUNT_DESC_MRT + START_DATE_DESC_BUS"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        + START_DATE_DESC_MRT + END_DATE_DESC_MRT + TAG_DESC_TRANSPORT + VALID_DAILY_PERIOD_DESC,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new RepeatAddCommand(expectedRepeat));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // multiple end date - last end date accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_MRT + AMOUNT_DESC_MRT + START_DATE_DESC_MRT + END_DATE_DESC_BUS"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        + END_DATE_DESC_MRT + TAG_DESC_TRANSPORT + VALID_DAILY_PERIOD_DESC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new RepeatAddCommand(expectedRepeat));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // multiple tags - only last tag accepted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_MRT + AMOUNT_DESC_MRT + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + TAG_DESC_BUS + TAG_DESC_TRANSPORT + VALID_DAILY_PERIOD_DESC, new RepeatAddCommand(expectedRepeat));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // multiple period - only last period accepted"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_MRT + AMOUNT_DESC_MRT + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + TAG_DESC_TRANSPORT + VALID_WEEKLY_PERIOD_DESC + VALID_DAILY_PERIOD_DESC,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new RepeatAddCommand(expectedRepeat));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Repeat expectedRepeat \u003d new RepeatBuilder().withTag(\"Others\").build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_MRT + AMOUNT_DESC_MRT + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + VALID_DAILY_PERIOD_DESC, new RepeatAddCommand(expectedRepeat));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RepeatAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // missing info prefix"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, VALID_INFO_MRT + AMOUNT_DESC_MRT + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + VALID_DAILY_PERIOD_DESC, expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_MRT + VALID_AMOUNT_MRT + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        + VALID_DAILY_PERIOD_DESC, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // missing start date prefix"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_MRT + AMOUNT_DESC_MRT + VALID_START_DATE_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + VALID_DAILY_PERIOD_DESC, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // missing end date prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_MRT + AMOUNT_DESC_MRT + START_DATE_DESC_MRT + VALID_END_DATE_MRT"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + VALID_DAILY_PERIOD_DESC, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // missing period prefix"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_MRT + AMOUNT_DESC_MRT + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + VALID_DAILY_PERIOD, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, VALID_INFO_MRT + VALID_AMOUNT_MRT + VALID_START_DATE_MRT"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + VALID_END_DATE_MRT + VALID_DAILY_PERIOD, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid info"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INVALID_INFO_DESC + AMOUNT_DESC_MRT + START_DATE_DESC_MRT"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + END_DATE_DESC_MRT + TAG_DESC_TRANSPORT + VALID_DAILY_PERIOD_DESC, Info.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_MRT + INVALID_AMOUNT_DESC + START_DATE_DESC_MRT"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + END_DATE_DESC_MRT + TAG_DESC_TRANSPORT + VALID_DAILY_PERIOD_DESC, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid start date"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_MRT + AMOUNT_DESC_MRT + INVALID_START_DATE_DESC"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + END_DATE_DESC_MRT + TAG_DESC_TRANSPORT + VALID_DAILY_PERIOD_DESC, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid end date"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_MRT + AMOUNT_DESC_MRT + START_DATE_DESC_MRT"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + INVALID_END_DATE_DESC + TAG_DESC_TRANSPORT + VALID_DAILY_PERIOD_DESC, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_MRT + AMOUNT_DESC_MRT + START_DATE_DESC_MRT"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + END_DATE_DESC_MRT + INVALID_TAG_DESC + VALID_DAILY_PERIOD_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid period"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_MRT + AMOUNT_DESC_MRT + START_DATE_DESC_MRT"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + END_DATE_DESC_MRT + TAG_DESC_TRANSPORT + INVALID_PERIOD_DESC, Repeat.PERIOD_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, INVALID_INFO_DESC + AMOUNT_DESC_MRT + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        + START_DATE_DESC_MRT + END_DATE_DESC_MRT + TAG_DESC_TRANSPORT + VALID_DAILY_PERIOD_DESC,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Info.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + INFO_DESC_MRT + AMOUNT_DESC_MRT"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        + START_DATE_DESC_MRT + END_DATE_DESC_MRT + TAG_DESC_TRANSPORT + VALID_DAILY_PERIOD_DESC,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RepeatAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 173,
      "zwasd": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/repeat/RepeatDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.repeat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_REPEAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.repeat.RepeatDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatDeleteCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final RepeatDeleteCommandParser parser \u003d new RepeatDeleteCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, \"1\", new RepeatDeleteCommand(INDEX_FIRST_REPEAT));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                RepeatDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 24,
      "zwasd": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/repeat/RepeatEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.repeat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.AMOUNT_DESC_MRT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.END_DATE_DESC_BUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.END_DATE_DESC_MRT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INFO_DESC_BUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_END_DATE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_INFO_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_PERIOD_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_START_DATE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.START_DATE_DESC_BUS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.START_DATE_DESC_MRT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_BUS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.TAG_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_AMOUNT_BUS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DAILY_PERIOD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DAILY_PERIOD_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DATE_BUS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_END_DATE_BUS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_INFO_BUS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_MONTHLY_PERIOD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_MONTHLY_PERIOD_DESC;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_BUS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_BUS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_WEEKLY_PERIOD_DESC;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_SECOND_EXPENDITURE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_THIRD_EXPENDITURE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.repeat.RepeatEditCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.testutil.EditRepeatDescriptorBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatEditCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RepeatEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final RepeatEditCommandParser parser \u003d new RepeatEditCommandParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, VALID_INFO_BUS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"1\", RepeatEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"-5\" + INFO_DESC_BUS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"0\" + INFO_DESC_BUS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INFO_DESC, Info.MESSAGE_CONSTRAINTS); // invalid info"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS); // invalid amount"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_START_DATE_DESC,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_END_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PERIOD_DESC,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Repeat.PERIOD_MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Expenditure} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_TRANSPORT + TAG_DESC_BUS + TAG_EMPTY,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INFO_DESC + INVALID_AMOUNT_DESC + VALID_DATE_BUS,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Info.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXPENDITURE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_BUS + VALID_DAILY_PERIOD_DESC"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + AMOUNT_DESC_BUS + START_DATE_DESC_BUS + END_DATE_DESC_BUS + INFO_DESC_BUS;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        RepeatEditCommand.EditRepeatDescriptor descriptor \u003d new EditRepeatDescriptorBuilder().withInfo(VALID_INFO_BUS)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withAmount(VALID_AMOUNT_BUS).withStartDate(VALID_START_DATE_BUS).withEndDate(VALID_END_DATE_BUS)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withTag(VALID_TAG_BUS).withPeriod(VALID_DAILY_PERIOD).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        RepeatEditCommand expectedCommand \u003d new RepeatEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        RepeatEditCommand.EditRepeatDescriptor descriptor \u003d new EditRepeatDescriptorBuilder()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withAmount(VALID_AMOUNT_BUS).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        RepeatEditCommand expectedCommand \u003d new RepeatEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // info"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENDITURE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INFO_DESC_BUS;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        RepeatEditCommand.EditRepeatDescriptor descriptor \u003d new EditRepeatDescriptorBuilder()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withInfo(VALID_INFO_BUS).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        RepeatEditCommand expectedCommand \u003d new RepeatEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // amount"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor \u003d new EditRepeatDescriptorBuilder().withAmount(VALID_AMOUNT_BUS).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        expectedCommand \u003d new RepeatEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // start date"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + START_DATE_DESC_BUS;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor \u003d new EditRepeatDescriptorBuilder().withStartDate(VALID_START_DATE_BUS).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        expectedCommand \u003d new RepeatEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // end date"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + END_DATE_DESC_BUS;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor \u003d new EditRepeatDescriptorBuilder().withEndDate(VALID_END_DATE_BUS).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        expectedCommand \u003d new RepeatEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor \u003d new EditRepeatDescriptorBuilder().withTag(VALID_TAG_TRANSPORT).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        expectedCommand \u003d new RepeatEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // period"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + VALID_MONTHLY_PERIOD_DESC;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor \u003d new EditRepeatDescriptorBuilder().withPeriod(VALID_MONTHLY_PERIOD).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        expectedCommand \u003d new RepeatEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + START_DATE_DESC_MRT + START_DATE_DESC_BUS + AMOUNT_DESC_MRT"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + TAG_DESC_TRANSPORT + END_DATE_DESC_MRT + END_DATE_DESC_BUS + AMOUNT_DESC_BUS + TAG_DESC_TRANSPORT"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + TAG_DESC_BUS + VALID_WEEKLY_PERIOD_DESC + VALID_DAILY_PERIOD_DESC;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        RepeatEditCommand.EditRepeatDescriptor descriptor \u003d new EditRepeatDescriptorBuilder()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withAmount(VALID_AMOUNT_BUS).withStartDate(VALID_START_DATE_BUS).withEndDate(VALID_END_DATE_BUS)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withTag(VALID_TAG_BUS).withPeriod(VALID_DAILY_PERIOD)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        RepeatEditCommand expectedCommand \u003d new RepeatEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 191,
      "zwasd": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/repeat/RepeatLevelParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.repeat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.TypicalIndexes.INDEX_FIRST_REPEAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.repeat.RepeatAddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.repeat.RepeatDeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.repeat.RepeatEditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.testutil.EditRepeatDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.testutil.RepeatBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.testutil.RepeatUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatLevelParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final RepeatLevelParser parser \u003d new RepeatLevelParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseRepeatCommand_add() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Repeat repeat \u003d new RepeatBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        RepeatAddCommand command \u003d (RepeatAddCommand) parser.parseCommand(RepeatUtil.getAddCommand(repeat));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertEquals(new RepeatAddCommand(repeat), command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseRepeatCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        RepeatDeleteCommand command \u003d (RepeatDeleteCommand) parser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .parseCommand(RepeatDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_REPEAT.getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertEquals(new RepeatDeleteCommand(INDEX_FIRST_EXPENDITURE), command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseRepeatCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Repeat repeat \u003d new RepeatBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        RepeatEditCommand.EditRepeatDescriptor descriptor \u003d new EditRepeatDescriptorBuilder(repeat).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        RepeatEditCommand command \u003d (RepeatEditCommand) parser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .parseCommand(RepeatEditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + INDEX_FIRST_REPEAT.getOneBased() + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                + RepeatUtil.getEditRepeatDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertEquals(new RepeatEditCommand(INDEX_FIRST_REPEAT, descriptor), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void repeatParseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void repeatParseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 61,
      "zwasd": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/report/ExportReportCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.END_DATE_DESC_BUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.END_DATE_DESC_MRT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_END_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_FILE_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_GRAPH_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_ORGANISATION_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_START_DATE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.START_DATE_DESC_BUS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.START_DATE_DESC_MRT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_END_DATE_MRT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_FILE_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_FILE_NAME_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_GRAPH_BAR_CAPS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_GRAPH_BAR_DESC_CAPS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_GRAPH_PIE_DESC_CAPS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_TAG_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_MRT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.report.ExportReportCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.ExportFile;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.Report;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.testutil.ReportBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExportReportCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final ExportReportCommandParser parser \u003d new ExportReportCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Report expectedReport \u003d new ReportBuilder().withGraphType(VALID_GRAPH_BAR_CAPS)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withStartDate(VALID_START_DATE_MRT)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withEndDate(VALID_END_DATE_MRT)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withOrganise(VALID_ORGANISATION_TAG)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String expectedFileName \u003d \"hello\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_TAG_DESC + VALID_FILE_NAME_DESC,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                new ExportReportCommand(expectedReport, expectedFileName));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // multiple graph type - last graph type accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_PIE_DESC_CAPS + VALID_GRAPH_BAR_DESC_CAPS"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_ORGANISATION_TAG_DESC + VALID_FILE_NAME_DESC,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                new ExportReportCommand(expectedReport, expectedFileName));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // multiple start date - last start date accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + START_DATE_DESC_BUS + START_DATE_DESC_MRT"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + END_DATE_DESC_MRT + VALID_GRAPH_BAR_DESC_CAPS"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_ORGANISATION_TAG_DESC + VALID_FILE_NAME_DESC,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                new ExportReportCommand(expectedReport, expectedFileName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // multiple end date - last end date accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + START_DATE_DESC_MRT + END_DATE_DESC_BUS"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + END_DATE_DESC_MRT + VALID_GRAPH_BAR_DESC_CAPS"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_ORGANISATION_TAG_DESC + VALID_FILE_NAME_DESC,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                new ExportReportCommand(expectedReport, expectedFileName));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportReportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // missing start date prefix"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, VALID_START_DATE_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_TAG_DESC"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_FILE_NAME_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // missing end date prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + VALID_END_DATE_MRT"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_TAG_DESC"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_FILE_NAME_DESC,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // missing graph type prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_CAPS + VALID_ORGANISATION_TAG_DESC + VALID_FILE_NAME_DESC,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //missing organisation prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_BUS + END_DATE_DESC_BUS"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_TAG"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_FILE_NAME_DESC,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // missing file name prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_BUS + END_DATE_DESC_BUS"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_TAG_DESC"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_FILE_NAME,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, VALID_START_DATE_MRT + VALID_START_DATE_MRT"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_CAPS + VALID_ORGANISATION_TAG + VALID_FILE_NAME,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid start date"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_START_DATE_DESC + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_TAG_DESC"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_FILE_NAME_DESC,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid end date"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + INVALID_END_DATE_DESC"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_TAG_DESC"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_FILE_NAME_DESC,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid graph type"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + INVALID_GRAPH_DESC + VALID_ORGANISATION_TAG_DESC"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_FILE_NAME_DESC,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Report.GraphType.GRAPH_TYPE_MESSAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //invalid organisation"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + INVALID_ORGANISATION_DESC"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_FILE_NAME_DESC,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                Report.ORGANISE_TYPE_MESSAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // invalid file name"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_TAG_DESC"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + INVALID_FILE_NAME_DESC,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                ExportFile.FILENAME_CONSTRAINT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_START_DATE_DESC + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + INVALID_GRAPH_DESC + VALID_ORGANISATION_TAG_DESC"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_FILE_NAME_DESC,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_TAG_DESC"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_FILE_NAME_DESC,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 75,
      "sp-shaopeng": 79,
      "zwasd": 5
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/report/PrintReportCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "package seedu.saveit.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.END_DATE_DESC_BUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.END_DATE_DESC_MRT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_END_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_GRAPH_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_ORGANISATION_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_START_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.START_DATE_DESC_BUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.START_DATE_DESC_MRT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_END_DATE_MRT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_GRAPH_BAR_CAPS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_GRAPH_BAR_DESC_CAPS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_GRAPH_PIE_DESC_CAPS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_MONTH_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_TAG_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_MRT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.report.PrintReportCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.Report;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.testutil.ReportBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class PrintReportCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final PrintReportCommandParser parser \u003d new PrintReportCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Report expectedReport \u003d new ReportBuilder().withGraphType(VALID_GRAPH_BAR_CAPS)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withStartDate(VALID_START_DATE_MRT)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withEndDate(VALID_END_DATE_MRT)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withOrganise(VALID_ORGANISATION_TAG)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_TAG_DESC, new PrintReportCommand(expectedReport));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // multiple graph type - last graph type accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + VALID_GRAPH_PIE_DESC_CAPS + VALID_GRAPH_BAR_DESC_CAPS"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + VALID_ORGANISATION_TAG_DESC, new PrintReportCommand(expectedReport));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // multiple start date - last start date accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + START_DATE_DESC_BUS + START_DATE_DESC_MRT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + END_DATE_DESC_MRT + VALID_GRAPH_BAR_DESC_CAPS"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + VALID_ORGANISATION_TAG_DESC, new PrintReportCommand(expectedReport));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // multiple end date - last end date accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + START_DATE_DESC_MRT + END_DATE_DESC_BUS"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + END_DATE_DESC_MRT + VALID_GRAPH_BAR_DESC_CAPS"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + VALID_ORGANISATION_TAG_DESC, new PrintReportCommand(expectedReport));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // multiple organisation- last organisation accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_MONTH_DESC"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + VALID_ORGANISATION_TAG_DESC, new PrintReportCommand(expectedReport));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, PrintReportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // missing start date prefix"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, VALID_START_DATE_MRT + END_DATE_DESC_MRT + VALID_GRAPH_BAR_DESC_CAPS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // missing end date prefix"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + VALID_END_DATE_MRT + VALID_GRAPH_BAR_DESC_CAPS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // missing graph type prefix"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + END_DATE_DESC_MRT + VALID_GRAPH_BAR_CAPS,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, VALID_START_DATE_MRT + VALID_START_DATE_MRT + VALID_GRAPH_BAR_CAPS,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid start date"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_START_DATE_DESC + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_TAG_DESC,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid end date"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + INVALID_END_DATE_DESC"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_TAG_DESC,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid graph type"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + INVALID_GRAPH_DESC + VALID_ORGANISATION_TAG_DESC,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Report.GraphType.GRAPH_TYPE_MESSAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //invalid organisation type"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + INVALID_ORGANISATION_DESC,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                Report.ORGANISE_TYPE_MESSAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_START_DATE_DESC + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + INVALID_GRAPH_DESC + VALID_ORGANISATION_TAG_DESC,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_TAG_DESC,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, PrintReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 40,
      "sp-shaopeng": 86
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/report/ReportLevelParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_FILE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.report.ExportReportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.report.PrintReportCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.report.ViewReportCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.Report;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.testutil.ReportBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.testutil.ReportUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ReportLevelParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final ReportLevelParser parser \u003d new ReportLevelParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    //TODO: NEED TEST CASE FOR VIEW AND EXPORT REPORT COMMAND"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseReportCommand_view() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Report report \u003d new ReportBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        ViewReportCommand command \u003d (ViewReportCommand) parser.parseCommand(ReportUtil.getReportViewCommand(report));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertEquals(new ViewReportCommand(report), command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseReportCommand_export() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Report report \u003d new ReportBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        ExportReportCommand command \u003d (ExportReportCommand) parser.parseCommand(ReportUtil"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .getReportExportCommand(report, VALID_FILE_NAME));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertEquals(new ExportReportCommand(report, VALID_FILE_NAME), command);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseReportCommand_print() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Report report \u003d new ReportBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        PrintReportCommand command \u003d (PrintReportCommand) parser.parseCommand(ReportUtil.getReportPrintCommand(report));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertEquals(new PrintReportCommand(report), command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void reportParseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void reportParseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 4,
      "sp-shaopeng": 44,
      "zwasd": 12
    }
  },
  {
    "path": "src/test/java/seedu/saveit/logic/parser/report/ViewReportCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.END_DATE_DESC_BUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.END_DATE_DESC_MRT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_END_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_GRAPH_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_ORGANISATION_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.INVALID_START_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.START_DATE_DESC_BUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.START_DATE_DESC_MRT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_END_DATE_MRT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_GRAPH_BAR_CAPS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_GRAPH_BAR_DESC_CAPS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_GRAPH_PIE_DESC_CAPS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_MONTH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_MONTH_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_TAG_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_MRT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.report.ViewReportCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.Report;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.testutil.ReportBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ViewReportCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final ViewReportCommandParser parser \u003d new ViewReportCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Report expectedReport \u003d new ReportBuilder().withGraphType(VALID_GRAPH_BAR_CAPS)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withStartDate(VALID_START_DATE_MRT)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .withEndDate(VALID_END_DATE_MRT)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withOrganise(VALID_ORGANISATION_MONTH)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_MONTH_DESC, new ViewReportCommand(expectedReport));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // multiple graph type - last graph type accepted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + VALID_GRAPH_PIE_DESC_CAPS + VALID_GRAPH_BAR_DESC_CAPS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + VALID_ORGANISATION_MONTH_DESC, new ViewReportCommand(expectedReport));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // multiple start date - last start date accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + START_DATE_DESC_BUS + START_DATE_DESC_MRT"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + END_DATE_DESC_MRT + VALID_GRAPH_BAR_DESC_CAPS"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + VALID_ORGANISATION_MONTH_DESC, new ViewReportCommand(expectedReport));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // multiple end date - last end date accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + START_DATE_DESC_MRT + END_DATE_DESC_BUS"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + END_DATE_DESC_MRT + VALID_GRAPH_BAR_DESC_CAPS"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + VALID_ORGANISATION_MONTH_DESC, new ViewReportCommand(expectedReport));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //multiple organisation - last organisation accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_TAG_DESC"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + VALID_ORGANISATION_MONTH_DESC, new ViewReportCommand(expectedReport));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewReportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // missing start date prefix"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, VALID_START_DATE_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_MONTH_DESC,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // missing end date prefix"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + VALID_END_DATE_MRT"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_MONTH_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // missing graph type prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_CAPS + VALID_ORGANISATION_MONTH_DESC,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // missing organisation prefix"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_MONTH,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, VALID_START_DATE_MRT + VALID_START_DATE_MRT"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_CAPS + VALID_ORGANISATION_MONTH,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid start date"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_START_DATE_DESC + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_MONTH_DESC,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid end date"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + INVALID_END_DATE_DESC"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_MONTH_DESC,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // invalid graph type"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + INVALID_GRAPH_DESC + VALID_ORGANISATION_MONTH_DESC,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Report.GraphType.GRAPH_TYPE_MESSAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //invalid organisation"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + INVALID_ORGANISATION_DESC,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                Report.ORGANISE_TYPE_MESSAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_START_DATE_DESC + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + INVALID_GRAPH_DESC + VALID_ORGANISATION_MONTH_DESC,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + START_DATE_DESC_MRT + END_DATE_DESC_MRT"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        + VALID_GRAPH_BAR_DESC_CAPS + VALID_ORGANISATION_MONTH_DESC,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 49,
      "sp-shaopeng": 80,
      "zwasd": 6
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/AccountListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.saveit.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class AccountListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final AccountList accountListWithDefault \u003d new AccountList(true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final AccountList accountList \u003d new AccountList(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(accountListWithDefault.getAccounts().size(), 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(accountListWithDefault.getAccounts().get(\"default\"), new Account(\"default\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(accountList.getAccounts().size(), 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e accountList.resetData(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void resetData_withValidReadOnlyAccountList_replacesData() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList newData \u003d getTypicalAccountList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.resetData(newData);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(newData, accountList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void hasAccount_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account nullAccount \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e accountList.hasAccount(nullAccount));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void hasAccount_accountNotInAccountList_returnsFalse() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(accountList.hasAccount(new Account(\"default\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void hasAccount_accountInAccountList_returnsTrue() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account account \u003d new Account(\"temp\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.addAccount(account);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(accountList.hasAccount(account));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void addAccount_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account nullAccount \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e accountList.addAccount(nullAccount));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void addAccount_duplicateAccount_throwsDuplicateAccountException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account account \u003d new Account(\"temp\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList accountList \u003d getTypicalAccountList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.addAccount(account);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(DuplicateAccountException.class, () -\u003e accountList.addAccount(account));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(DuplicateAccountException.class, () -\u003e accountList.addAccount(new Account(\"temp\")));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void clearActiveAccount_dataEqualsEmptyAccount() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList accountList \u003d getTypicalAccountList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.clearActiveAccount();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account empty \u003d new Account(accountList.getActiveAccountName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(accountList.getReportableAccount(), empty);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void renameAccount_success() throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList accountList \u003d getTypicalAccountList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(accountList.hasAccount(\"school\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(accountList.hasAccount(\"hmm\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account school \u003d accountList.getAccounts().get(\"school\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.renameAccount(\"school\", \"hmm\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(accountList.hasAccount(\"school\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(accountList.hasAccount(\"hmm\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account hmm \u003d accountList.getAccounts().get(\"hmm\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(school.getRepeatList(), hmm.getRepeatList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(school.getExpenditureList(), hmm.getExpenditureList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void renameAccount_nullOldName_success() throws CommandException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList accountList \u003d getTypicalAccountList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(accountList.hasAccount(\"school\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(accountList.hasAccount(\"hmm\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.updateActiveAccount(\"school\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account school \u003d accountList.getAccounts().get(\"school\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.renameAccount(null, \"hmm\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(accountList.hasAccount(\"school\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(accountList.hasAccount(\"hmm\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account hmm \u003d accountList.getAccounts().get(\"hmm\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(school.getRepeatList(), hmm.getRepeatList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(school.getExpenditureList(), hmm.getExpenditureList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void renameAccount_nullNewName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList accountList \u003d getTypicalAccountList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e accountList.renameAccount(null, null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void deleteAccount_nullAccount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e accountList.deleteAccount(null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void deleteAccount_doesNotContainAccount_throwsCommandException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList accountList \u003d getTypicalAccountList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e accountList.deleteAccount(\"default\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void deleteAccount_deletingLastAccount_createsDefaultAccount() throws CommandException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList accountList \u003d new AccountList(true);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(accountList.getAccounts().size(), 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.deleteAccount(\"default\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(accountList.getAccounts().size(), 1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(accountList.getActiveAccountName(), \"default\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void deleteAccount_deletingActiveAccount_activeAccountChanges() throws CommandException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList accountList \u003d getTypicalAccountList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.updateActiveAccount(\"school\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.deleteAccount(\"school\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertNotEquals(accountList.getActiveAccountName(), \"school\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertNotEquals(accountList.getActiveAccountName(), null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void updateActiveDate_success() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList accountList \u003d new AccountList(true);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.updateActiveDate(LocalDate.now());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(accountList.getActiveDate(), LocalDate.now());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void updateActiveAccount_accountExists_success() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList accountList \u003d getTypicalAccountList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(accountList.updateActiveAccount(\"work\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(accountList.getActiveAccountName(), \"work\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void updateActiveAccount_accountNotExists_failure() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList accountList \u003d new AccountList(true);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(accountList.updateActiveAccount(\"hmm\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 5,
      "JJiahui": 168
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/AccountTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DATE_MRT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_BUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccounts;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccountTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final Account account \u003d new Account();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(Collections.emptyList(), account.getExpenditureList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e account.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void resetData_withValidReadOnlyAccount_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Account newData \u003d getTypicalAccounts();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        account.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(newData.getExpenditureList(), account.getExpenditureList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(newData.getRepeatList(), account.getRepeatList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void hasExpenditure_nullExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e account.hasExpenditure(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void hasExpenditure_expenditureNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(account.hasExpenditure(ALICE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void hasExpenditure_expenditureInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        account.addExpenditure(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(account.hasExpenditure(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void hasExpenditure_expenditureWithSameDifferentDate_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        account.addExpenditure(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Expenditure editedAlice \u003d new ExpenditureBuilder(ALICE).withDate(VALID_DATE_MRT).withTag(VALID_TAG_BUS)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(account.hasExpenditure(editedAlice));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void getExpenditureList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e account.getExpenditureList().remove(0));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void copyAccountWithNewName_sameData() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account personal \u003d new Account(\"personal\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account personal1 \u003d personal.copyAccountWithNewName(\"personal1\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(personal1.getExpenditureList(), personal.getExpenditureList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(personal1.getRepeatList(), personal.getRepeatList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void copyAccountWithNewName_notEquals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account personal \u003d new Account(\"personal\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account personal1 \u003d personal.copyAccountWithNewName(\"personal1\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertNotEquals(personal, personal1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void copyAccountWithNewName_oldNameUnchanged() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account personal \u003d new Account(\"personal\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account personal1 \u003d personal.copyAccountWithNewName(\"personal1\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(personal1.getAccountName(), \"personal1\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(personal.getAccountName(), \"personal\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * A stub ReadOnlyAccount whose expenditures list can violate interface constraints."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static class AccountStub implements ReadOnlyAccount {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        private final ObservableList\u003cExpenditure\u003e expenditures \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        private final ObservableList\u003cRepeat\u003e repeats \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        AccountStub(Collection\u003cExpenditure\u003e expenditures) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            this.expenditures.setAll(expenditures);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public ObservableList\u003cExpenditure\u003e getExpenditureList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return expenditures;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public ObservableList\u003cRepeat\u003e getRepeatList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return repeats;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 7,
      "zwasd": 21,
      "-": 50,
      "JJiahui": 45
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/ExportFileTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_FILE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_FILE_NAME_ALT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.testutil.ExportFileBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.Bar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.Pie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ExportFileTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ExportFileBuilder file1 \u003d new ExportFileBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withFileName(VALID_FILE_NAME)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withGraph(new Pie(new HashMap\u003c\u003e(), VALID_ORGANISATION_TAG));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ExportFileBuilder file2 \u003d new ExportFileBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withFileName(VALID_FILE_NAME)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withGraph(new Pie(new HashMap\u003c\u003e(), VALID_ORGANISATION_TAG));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertTrue(file1.build().equals(file2.build()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //different file name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        file1.withFileName(VALID_FILE_NAME_ALT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(file1.build().equals(file2.build()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        file1.withFileName(VALID_FILE_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //different graph"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        file1.withGraph(new Bar(new HashMap(), VALID_ORGANISATION_TAG));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(file1.build().equals(file2.build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //different filename and graph"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        file1.withFileName(VALID_FILE_NAME_ALT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(file1.build().equals(file2.build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 51
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.model.Model.PREDICATE_SHOW_ALL_EXPENDITURES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.testutil.TypicalExpenditures.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.model.expenditure.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.testutil.AccountListBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(new AccountList(true), new AccountList(modelManager.getAccountList()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void hasExpenditure_nullExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasExpenditure(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void hasExpenditure_expenditureNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(modelManager.hasExpenditure(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update model manager or this test case"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void hasExpenditure_expenditureInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     modelManager.addExpenditure(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertTrue(modelManager.hasExpenditure(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void getFilteredExpenditureList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredExpenditureList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update this test case to reflect changes in account"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Account account \u003d new AccountBuilder(\"account\").withExpenditure(ALICE).withExpenditure(BENSON).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     AccountList accountList \u003d new AccountListBuilder().withAccount(account).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     AccountList differentAccountList \u003d new AccountList(false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // same values -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     modelManager \u003d new ModelManager(accountList, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ModelManager modelManagerCopy \u003d new ModelManager(accountList, userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // null -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // different types -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // different account -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertFalse(modelManager.equals(new ModelManager(differentAccountList, userPrefs)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     String[] keywords \u003d ALICE.getInfo().fullInfo.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     modelManager.updateFilteredExpenditureList(new InfoContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertFalse(modelManager.equals(new ModelManager(accountList, userPrefs)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     modelManager.updateFilteredExpenditureList(PREDICATE_SHOW_ALL_EXPENDITURES);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertFalse(modelManager.equals(new ModelManager(accountList, differentUserPrefs)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 53,
      "-": 82,
      "JJiahui": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/ReportTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_END_DATE_BUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_END_DATE_MRT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_GRAPH_BAR_CAPS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_GRAPH_PIE_CAPS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_MONTH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_BUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_BUS_ALT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.testutil.ReportBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ReportTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportBuilder report1 \u003d new ReportBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withStartDate(VALID_START_DATE_BUS)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withEndDate(VALID_END_DATE_BUS)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withGraphType(VALID_GRAPH_PIE_CAPS)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withOrganise(VALID_ORGANISATION_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ReportBuilder report2 \u003d new ReportBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withStartDate(VALID_START_DATE_BUS)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withEndDate(VALID_END_DATE_BUS)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withGraphType(VALID_GRAPH_PIE_CAPS)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withOrganise(VALID_ORGANISATION_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertTrue(report1.build().equals(report2.build()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // different start date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        report1.withStartDate(VALID_START_DATE_BUS_ALT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(report1.build().equals(report2.build()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        report1.withStartDate(VALID_START_DATE_BUS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //different end date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        report1.withEndDate(VALID_END_DATE_MRT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(report1.build().equals(report2.build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        report1.withEndDate(VALID_END_DATE_BUS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //different graph type"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        report1.withGraphType(VALID_GRAPH_BAR_CAPS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(report1.build().equals(report2.build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        report1.withGraphType(VALID_GRAPH_PIE_CAPS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //different organise"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        report1.withOrganise(VALID_ORGANISATION_MONTH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(report1.build().equals(report2.build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // all fields different"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        report1.withStartDate(VALID_START_DATE_BUS_ALT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        report1.withEndDate(VALID_END_DATE_MRT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        report1.withGraphType(VALID_GRAPH_BAR_CAPS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        report1.withOrganise(VALID_ORGANISATION_MONTH);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertFalse(report1.build().equals(report2.build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 68
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/expenditure/AmountTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // null amount"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // blank amount"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // random letters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"fjksjd\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // not double or integer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"3.2.1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // not positive"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"-2\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Amount.isValidAmount(-3));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Amount.isValidAmount(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // more than 2 decimal point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Amount.isValidAmount(123.333));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"123.112\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // valid"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(Amount.isValidAmount(123.33));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"123.1\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 28,
      "JJiahui": 23
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/expenditure/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e seedu.saveit.model.expenditure.Date.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(seedu.saveit.model.expenditure.Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(seedu.saveit.model.expenditure.Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(seedu.saveit.model.expenditure.Date.isValidDate(\"2019-09-11\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(seedu.saveit.model.expenditure.Date.isValidDate(\"2019-09-11\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(seedu.saveit.model.expenditure.Date.isValidDate(\"2019-09-11\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 36
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/expenditure/ExpenditureTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DATE_MRT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_BUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class ExpenditureTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void isSameExpenditure() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure aliceCopy \u003d new ExpenditureBuilder(ALICE).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(ALICE.isSameExpenditure(aliceCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // different object but same fields -\u003e true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure aliceCopy \u003d new ExpenditureBuilder(ALICE).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // different expenditure -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // different object and fields-\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure editedAlice \u003d new ExpenditureBuilder(ALICE).withAmount(3.00).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // different object and fields -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        editedAlice \u003d new ExpenditureBuilder(ALICE).withDate(VALID_DATE_MRT).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // different object and fields-\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        editedAlice \u003d new ExpenditureBuilder(ALICE).withTag(VALID_TAG_BUS).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 6,
      "sp-shaopeng": 4,
      "zwasd": 11,
      "-": 29,
      "JJiahui": 3
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/expenditure/InfoContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class InfoContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        InfoContainsKeywordsPredicate firstPredicate \u003d new InfoContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        InfoContainsKeywordsPredicate secondPredicate \u003d new InfoContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        InfoContainsKeywordsPredicate firstPredicateCopy \u003d new InfoContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // different expenditure -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void test_infoContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(predicate.test(new ExpenditureBuilder().withInfo(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(predicate.test(new ExpenditureBuilder().withInfo(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(predicate.test(new ExpenditureBuilder().withInfo(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(predicate.test(new ExpenditureBuilder().withInfo(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void test_infoDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(predicate.test(new ExpenditureBuilder().withInfo(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(predicate.test(new ExpenditureBuilder().withInfo(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // Keywords match id, amount and address, but does not match info"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"12345\", \"3.14\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(predicate.test(new ExpenditureBuilder().withInfo(\"Alice\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .withAmount(3.14).withDate(\"2019-09-11\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 22,
      "-": 46,
      "JJiahui": 7
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/expenditure/InfoTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class InfoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Info(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void constructor_invalidInfo_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String invalidInfo \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Info(invalidInfo));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void isValidInfo() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // null info"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Info.isValidInfo(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // invalid info"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Info.isValidInfo(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Info.isValidInfo(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Info.isValidInfo(\"-a\")); // contains other prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Info.isValidInfo(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Info.isValidInfo(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // valid info"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(Info.isValidInfo(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(Info.isValidInfo(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(Info.isValidInfo(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(Info.isValidInfo(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(Info.isValidInfo(\"David Roger Jackson Ray Jr 2nd\")); // long infos"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 41
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/expenditure/RepeatTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 4
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/expenditure/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/saveit/model/expenditure/UniqueExpenditureListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DATE_MRT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_BUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.exceptions.DuplicateExpenditureException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.exceptions.ExpenditureNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class UniqueExpenditureListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final UniqueExpenditureList uniqueExpenditureList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void contains_nullExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenditureList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void contains_expenditureNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(uniqueExpenditureList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void contains_expenditureInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(uniqueExpenditureList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void contains_expenditureWithDifferentData_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Expenditure editedAlice \u003d new ExpenditureBuilder(ALICE).withDate(VALID_DATE_MRT).withTag(VALID_TAG_BUS)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(uniqueExpenditureList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void add_nullExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenditureList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void add_duplicateExpenditure_throwsDuplicateExpenditureException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(DuplicateExpenditureException.class, () -\u003e uniqueExpenditureList.add(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditure_nullTargetExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenditureList.setExpenditure(null, ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditure_nullEditedExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenditureList.setExpenditure(ALICE, null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditure_targetExpenditureNotInList_throwsExpenditureNotFoundException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(ExpenditureNotFoundException.class, () -\u003e uniqueExpenditureList.setExpenditure(ALICE, ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditure_editedExpenditureEquals_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.setExpenditure(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        UniqueExpenditureList expectedUniqueExpenditureList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expectedUniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(expectedUniqueExpenditureList, uniqueExpenditureList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditure_editedExpenditureHasSameIdentity_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Expenditure editedAlice \u003d new ExpenditureBuilder(ALICE).withDate(VALID_DATE_MRT).withTag(VALID_TAG_BUS)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.setExpenditure(ALICE, editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        UniqueExpenditureList expectedUniqueExpenditureList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expectedUniqueExpenditureList.add(editedAlice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(expectedUniqueExpenditureList, uniqueExpenditureList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditure_editedExpenditureHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.setExpenditure(ALICE, BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        UniqueExpenditureList expectedUniqueExpenditureList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expectedUniqueExpenditureList.add(BOB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(expectedUniqueExpenditureList, uniqueExpenditureList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditure_editedExpenditureHasNonUniqueIdentity_throwsDuplicateExpenditureException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(BOB);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(DuplicateExpenditureException.class, () -\u003e uniqueExpenditureList.setExpenditure(ALICE, BOB));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void remove_nullExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenditureList.remove(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void remove_expenditureDoesNotExist_throwsExpenditureNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(ExpenditureNotFoundException.class, () -\u003e uniqueExpenditureList.remove(ALICE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void remove_existingExpenditure_removesExpenditure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.remove(ALICE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        UniqueExpenditureList expectedUniqueExpenditureList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(expectedUniqueExpenditureList, uniqueExpenditureList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditures_nullUniqueExpenditureList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                uniqueExpenditureList.setExpenditures((UniqueExpenditureList) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditures_uniqueExpenditureList_replacesOwnListWithProvidedUniqueExpenditureList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        UniqueExpenditureList expectedUniqueExpenditureList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expectedUniqueExpenditureList.add(BOB);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.setExpenditures(expectedUniqueExpenditureList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(expectedUniqueExpenditureList, uniqueExpenditureList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditures_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenditureList.setExpenditures((List\u003cExpenditure\u003e) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditures_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        List\u003cExpenditure\u003e expenditureList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.setExpenditures(expenditureList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        UniqueExpenditureList expectedUniqueExpenditureList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expectedUniqueExpenditureList.add(BOB);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(expectedUniqueExpenditureList, uniqueExpenditureList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditures_listWithDuplicateExpenditures_throwsDuplicateExpenditureException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        List\u003cExpenditure\u003e listWithDuplicateExpenditures \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(DuplicateExpenditureException.class, () -\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                uniqueExpenditureList.setExpenditures(listWithDuplicateExpenditures));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                uniqueExpenditureList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 5,
      "zwasd": 39,
      "-": 82,
      "JJiahui": 52
    }
  },
  {
    "path": "src/test/java/seedu/saveit/storage/JsonAccountStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.testutil.TypicalExpenditures.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.HOON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.IDA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.saveit.testutil.TypicalExpenditures.getTypicalAccount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.AccountList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.model.ReadOnlyAccount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class JsonAccountStorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAccountStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAccountList\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new JsonAccountListStorage(Paths.get(filePath)).readSaveIt(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void readAddressBook_invalidExpenditureAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidExpenditureAddressBook.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void readAddressBook_invalidAndValidExpenditureAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                readAddressBook(\"invalidAndValidExpenditureAddressBook.json\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void readAndsaveSaveIt_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList original \u003d getTypicalAccountList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        JsonAccountListStorage jsonAccountListStorage \u003d new JsonAccountListStorage(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        jsonAccountListStorage.saveSaveIt(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        ReadOnlyAccountList readBack \u003d jsonAccountListStorage.readSaveIt(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(original, new AccountList(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        original.addExpenditure(HOON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // TODO: why does allowing this to run fails?"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // original.removeExpenditure(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        jsonAccountListStorage.saveSaveIt(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        readBack \u003d jsonAccountListStorage.readSaveIt(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(original, new AccountList(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        original.addExpenditure(IDA);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        jsonAccountListStorage.saveSaveIt(original); // file path not specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        readBack \u003d jsonAccountListStorage.readSaveIt().get(); // file path not specified"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(original, new AccountList(readBack));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void saveSaveIt_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveSaveIt(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private void saveSaveIt(ReadOnlyAccountList addressBook, String filePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            new JsonAccountListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    .saveSaveIt(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void saveSaveIt_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveSaveIt(new AccountList(false), null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 4,
      "zwasd": 31,
      "-": 71,
      "JJiahui": 9
    }
  },
  {
    "path": "src/test/java/seedu/saveit/storage/JsonAdaptedExpenditureTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.storage.JsonAdaptedExpenditure.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class JsonAdaptedExpenditureTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String INVALID_INFO \u003d \"F@od\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String INVALID_DATE \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private static final double INVALID_AMOUNT \u003d -1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String VALID_INFO \u003d BENSON.getInfo().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private static final double VALID_AMOUNT \u003d BENSON.getAmount().value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String VALID_DATE \u003d BENSON.getDate().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final JsonAdaptedTag VALID_TAG \u003d new JsonAdaptedTag(BENSON.getTag().getTagName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void toModelType_validExpenditureDetails_returnsExpenditure() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        JsonAdaptedExpenditure expenditure \u003d new JsonAdaptedExpenditure(BENSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(BENSON, expenditure.toModelType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void toModelType_invalidInfo_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        JsonAdaptedExpenditure expenditure \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new JsonAdaptedExpenditure(INVALID_INFO, VALID_AMOUNT, VALID_DATE, VALID_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String expectedMessage \u003d Info.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expenditure::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void toModelType_nullInfo_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        JsonAdaptedExpenditure expenditure \u003d new JsonAdaptedExpenditure(null, VALID_AMOUNT, VALID_DATE, VALID_TAG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Info.class.getSimpleName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expenditure::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        JsonAdaptedExpenditure expenditure \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new JsonAdaptedExpenditure(VALID_INFO, INVALID_AMOUNT, VALID_DATE, VALID_TAG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expenditure::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        JsonAdaptedExpenditure expenditure \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new JsonAdaptedExpenditure(VALID_INFO, INVALID_AMOUNT, VALID_DATE, VALID_TAG);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expenditure::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        JsonAdaptedExpenditure expenditure \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new JsonAdaptedExpenditure(VALID_INFO, VALID_AMOUNT, INVALID_DATE, VALID_TAG);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expenditure::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        JsonAdaptedExpenditure expenditure \u003d new JsonAdaptedExpenditure(VALID_INFO, VALID_AMOUNT, null, VALID_TAG);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expenditure::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        JsonAdaptedTag invalidTag \u003d new JsonAdaptedTag(INVALID_TAG);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        JsonAdaptedExpenditure expenditure \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new JsonAdaptedExpenditure(VALID_INFO, VALID_AMOUNT, VALID_DATE, invalidTag);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalValueException.class, expenditure::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 11,
      "zwasd": 43,
      "-": 30,
      "JJiahui": 4
    }
  },
  {
    "path": "src/test/java/seedu/saveit/storage/JsonAdaptedRepeatTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.testutil.TypicalRepeats.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.testutil.TypicalRepeats;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class JsonAdaptedRepeatTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String INVALID_INFO \u003d \"F@od\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final String INVALID_START_DATE \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final String INVALID_END_DATE \u003d \"2020-02-31\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final double INVALID_AMOUNT \u003d -1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final String INVALID_PERIOD \u003d \"hourly\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final String VALID_INFO \u003d BENSON.getInfo().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final double VALID_AMOUNT \u003d BENSON.getAmount().value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final String VALID_START_DATE \u003d BENSON.getStartDate().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final String VALID_END_DATE \u003d BENSON.getEndDate().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final JsonAdaptedTag VALID_TAG \u003d new JsonAdaptedTag(BENSON.getTag().getTagName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final String VALID_PERIOD \u003d BENSON.getPeriod().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void toModelType_validRepeatDetails_returnsRepeat() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        JsonAdaptedRepeat repeat \u003d new JsonAdaptedRepeat(TypicalRepeats.BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertEquals(TypicalRepeats.BENSON, repeat.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void toModelType_invalidInfo_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        JsonAdaptedRepeat repeat \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new JsonAdaptedRepeat(INVALID_INFO, VALID_AMOUNT, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        VALID_PERIOD, VALID_TAG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String expectedMessage \u003d Info.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, repeat::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void toModelType_nullInfo_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        JsonAdaptedRepeat repeat \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new JsonAdaptedRepeat(null, VALID_AMOUNT, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        VALID_PERIOD, VALID_TAG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(IllegalValueException.class, repeat::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        JsonAdaptedRepeat repeat \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new JsonAdaptedRepeat(VALID_INFO, INVALID_AMOUNT, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        VALID_PERIOD, VALID_TAG);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, repeat::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        JsonAdaptedRepeat repeat \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new JsonAdaptedRepeat(VALID_INFO, INVALID_AMOUNT, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        VALID_PERIOD, VALID_TAG);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(IllegalValueException.class, repeat::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void toModelType_invalidStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        JsonAdaptedRepeat repeat \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new JsonAdaptedRepeat(VALID_INFO, VALID_AMOUNT, INVALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        VALID_PERIOD, VALID_TAG);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, repeat::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void toModelType_nullStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        JsonAdaptedRepeat repeat \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new JsonAdaptedRepeat(VALID_INFO, VALID_AMOUNT, null, VALID_END_DATE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        VALID_PERIOD, VALID_TAG);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(IllegalValueException.class, repeat::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void toModelType_invalidEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        JsonAdaptedRepeat repeat \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new JsonAdaptedRepeat(VALID_INFO, VALID_AMOUNT, VALID_START_DATE, INVALID_END_DATE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        VALID_PERIOD, VALID_TAG);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, repeat::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void toModelType_nullEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        JsonAdaptedRepeat repeat \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new JsonAdaptedRepeat(VALID_INFO, VALID_AMOUNT, VALID_START_DATE, null,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        VALID_PERIOD, VALID_TAG);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(IllegalValueException.class, repeat::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void toModelType_invalidTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        JsonAdaptedRepeat repeat \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new JsonAdaptedRepeat(VALID_INFO, VALID_AMOUNT, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        VALID_PERIOD, new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String expectedMessage \u003d Tag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, repeat::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void toModelType_invalidPeriod_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        JsonAdaptedRepeat repeat \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new JsonAdaptedRepeat(VALID_INFO, VALID_AMOUNT, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        INVALID_PERIOD, VALID_TAG);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String expectedMessage \u003d Repeat.PERIOD_MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, repeat::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void toModelType_nullPeriod_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        JsonAdaptedRepeat repeat \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new JsonAdaptedRepeat(VALID_INFO, VALID_AMOUNT, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        null, VALID_TAG);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(IllegalValueException.class, repeat::toModelType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 133,
      "zwasd": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/storage/JsonSerializableAccountTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.model.AccountList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.testutil.TypicalAccounts;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.saveit.testutil.TypicalExpenditures;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class JsonSerializableAccountTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAccountTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final Path TYPICAL_EXPENDITURES_FILE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalExpendituresAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final Path INVALID_EXPENDITURE_FILE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidExpenditureAddressBook.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // private static final Path DUPLICATE_EXPENDITURE_FILE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //        TEST_DATA_FOLDER.resolve(\"duplicateExpenditureAddressBook.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case to reflect updated account"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void toModelType_typicalExpendituresFile_success() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     JsonSerializableAccountList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EXPENDITURES_FILE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             JsonSerializableAccountList.class).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     AccountList accountFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     AccountList typicalExpendituresAccount \u003d TypicalAccounts.getTypicalAccountList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertEquals(accountFromFile, typicalExpendituresAccount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void toModelType_invalidExpenditureFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        JsonSerializableAccountList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EXPENDITURE_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                JsonSerializableAccountList.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: check for duplicate account instead of expenditures"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void toModelType_duplicateExpenditures_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     JsonSerializableAccountList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EXPENDITURE_FILE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             JsonSerializableAccountList.class).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertThrows(IllegalValueException.class, JsonSerializableAccount.MESSAGE_DUPLICATE_EXPENDITURE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             dataFromFile::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 37,
      "-": 16,
      "JJiahui": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"saveit.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 5,
      "-": 117,
      "JJiahui": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.AccountList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        JsonAccountListStorage addressBookStorage \u003d new JsonAccountListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "         * {@link JsonAccountListStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAccountStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList original \u003d getTypicalAccountList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        storageManager.saveSaveIt(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        ReadOnlyAccountList retrieved \u003d storageManager.readSaveIt().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(original, new AccountList(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertNotNull(storageManager.getSaveItFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 2,
      "zwasd": 8,
      "-": 54,
      "JJiahui": 4
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/AccountBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * A utility class to help with building Account objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " *     {@code Account ab \u003d new AccountBuilder().withExpenditure(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class AccountBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String DEFAULT_ACCOUNT_NAME \u003d \"PERSONAL\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountBuilder(String accountName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        account \u003d new Account(accountName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountBuilder(Account account) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.account \u003d account;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Adds a new {@code Expenditure} to the {@code Account} that we are building."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountBuilder withExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        account.addExpenditure(expenditure);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * build an new account with the given account name and expenditure list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a new account."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Account build() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Account acc \u003d new Account(this.account.getAccountName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        acc.setExpenditures(this.account.getExpenditureList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return acc;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 11,
      "zwasd": 10,
      "-": 18,
      "JJiahui": 7
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/AccountListBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.AccountList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * A utility class to help with building AccountList objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": " *     {@code Account ab \u003d new AccountBuilder().withExpenditure(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class AccountListBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private AccountList accountList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountListBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList \u003d new AccountList(false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountListBuilder(AccountList accountList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.accountList \u003d accountList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Adds a new {@code Expenditure} to the {@code Account} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountListBuilder withAccount(Account account) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.addAccount(account);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountList build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accountList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 4,
      "JJiahui": 31
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/AccountUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.account.AccAddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * A utility class for Account."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccountUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns an add command string for adding the {@code account}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static String getAddCommand(Account account) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return AccAddCommand.COMMAND_WORD + \" \" + account.getAccountName();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 17
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/EditExpenditureDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * A utility class to help with building EditExpenditureDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class EditExpenditureDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private EditExpenditureDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public EditExpenditureDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor \u003d new EditExpenditureDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public EditExpenditureDescriptorBuilder(EditExpenditureDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.descriptor \u003d new EditExpenditureDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns an {@code EditExpenditureDescriptor} with fields containing {@code expenditure}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public EditExpenditureDescriptorBuilder(Expenditure expenditure) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor \u003d new EditExpenditureDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor.setInfo(expenditure.getInfo());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        descriptor.setAmount(expenditure.getAmount());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor.setDate(expenditure.getDate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.setTag(expenditure.getTag());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Sets the {@code Info} of the {@code EditExpenditureDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public EditExpenditureDescriptorBuilder withInfo(String info) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor.setInfo(new Info(info));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Sets the {@code Amount} of the {@code EditExpenditureDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public EditExpenditureDescriptorBuilder withAmount(double amount) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Sets the {@code Date} of the {@code EditExpenditureDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public EditExpenditureDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditExpenditureDescriptor}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public EditExpenditureDescriptorBuilder withTag(String tag) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.setTag(new Tag(tag));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public EditExpenditureDescriptor build() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 3,
      "zwasd": 32,
      "-": 37,
      "JJiahui": 1
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/EditRepeatDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.repeat.RepeatEditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * A utility class to help with building EditRepeatDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class EditRepeatDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private RepeatEditCommand.EditRepeatDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public EditRepeatDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor \u003d new RepeatEditCommand.EditRepeatDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public EditRepeatDescriptorBuilder(RepeatEditCommand.EditRepeatDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.descriptor \u003d new RepeatEditCommand.EditRepeatDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Returns an {@code EditRepeatDescriptor} with fields containing {@code repeat}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public EditRepeatDescriptorBuilder(Repeat repeat) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor \u003d new RepeatEditCommand.EditRepeatDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.setInfo(repeat.getInfo());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.setAmount(repeat.getAmount());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.setStartDate(repeat.getStartDate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.setEndDate(repeat.getEndDate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.setTag(repeat.getTag());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.setPeriod(repeat.getPeriod());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Sets the {@code Info} of the {@code EditRepeatDescriptor} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public EditRepeatDescriptorBuilder withInfo(String info) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.setInfo(new Info(info));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Sets the {@code Amount} of the {@code EditRepeatDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public EditRepeatDescriptorBuilder withAmount(double amount) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Sets the {@code startDate} of the {@code EditRepeatDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public EditRepeatDescriptorBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.setStartDate(new Date(startDate));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Sets the {@code endDate} of the {@code EditRepeatDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public EditRepeatDescriptorBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.setEndDate(new Date(endDate));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditRepeatDescriptor}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public EditRepeatDescriptorBuilder withTag(String tag) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.setTag(new Tag(tag));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Parses the {@code period} into a {@code period} and set it to the {@code EditRepeatDescriptor}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public EditRepeatDescriptorBuilder withPeriod(String period) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.setPeriod(Repeat.Period.valueOf(period));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public RepeatEditCommand.EditRepeatDescriptor build() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 93
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/ExpenditureBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * A utility class to help with building Expenditure objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class ExpenditureBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String DEFAULT_INFO \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final double DEFAULT_AMOUNT \u003d 3.14;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2019-09-11\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String DEFAULT_TAG \u003d \"Others\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private Info info;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ExpenditureBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        info \u003d new Info(DEFAULT_INFO);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        tag \u003d new Tag(DEFAULT_TAG);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Initializes the ExpenditureBuilder with the data of {@code expenditureToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ExpenditureBuilder(Expenditure expenditureToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        info \u003d expenditureToCopy.getInfo();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        amount \u003d expenditureToCopy.getAmount();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        date \u003d expenditureToCopy.getDate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        tag \u003d expenditureToCopy.getTag();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Sets the {@code Info} of the {@code Expenditure} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ExpenditureBuilder withInfo(String info) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.info \u003d new Info(info);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Expenditure} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public ExpenditureBuilder withTag(String tag) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.tag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Sets the {@code Address} of the {@code Expenditure} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ExpenditureBuilder withDate(String date) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Sets the {@code Email} of the {@code Expenditure} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ExpenditureBuilder withAmount(double amount) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Expenditure build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new Expenditure(info, amount, date, tag);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 7,
      "zwasd": 24,
      "-": 35,
      "JJiahui": 14
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/ExpenditureUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * A utility class for Expenditure."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpenditureUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns an add command string for adding the {@code expenditure}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static String getAddCommand(Expenditure expenditure) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return ExpAddCommand.COMMAND_WORD + \" \" + getExpenditureDetails(expenditure);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns the part of command string for the given {@code expenditure}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static String getExpenditureDetails(Expenditure expenditure) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        sb.append(PREFIX_INFO + expenditure.getInfo().fullInfo + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        sb.append(PREFIX_AMOUNT + Double.toString(expenditure.getAmount().value) + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        sb.append(PREFIX_DATE + expenditure.getDate().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        sb.append(PREFIX_TAG + expenditure.getTag().tagName + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns the part of command string for the given {@code EditExpenditureDescriptor}\u0027s details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static String getEditExpenditureDescriptorDetails(EditExpenditureDescriptor descriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor.getInfo().ifPresent(info -\u003e sb.append(PREFIX_INFO).append(info.fullInfo).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor.getAmount().ifPresent(amount -\u003e sb.append(PREFIX_AMOUNT).append(amount.value).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE).append(date.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        descriptor.getTag().ifPresent(tag -\u003e sb.append(PREFIX_TAG).append(tag.tagName).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 3,
      "zwasd": 19,
      "-": 20,
      "JJiahui": 6
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/ExportFileBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_FILE_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.ExportFile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.Graph;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.ui.Pie;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * A utility class to help build ExportFile object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ExportFileBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String DEFAULT_FILE_NAME \u003d VALID_FILE_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Graph graphStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ExportFileBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.fileName \u003d DEFAULT_FILE_NAME;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.graphStub \u003d new Pie(new HashMap(), VALID_ORGANISATION_MONTH);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Sets the graph of ExportFile object that we are building."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ExportFileBuilder withGraph(Graph graph) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.graphStub \u003d graph;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Sets the file name of ExportFile object that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ExportFileBuilder withFileName(String fileName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ExportFile build() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new ExportFile(fileName, graphStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 49
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/RepeatBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_AMOUNT_MRT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_END_DATE_MRT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_INFO_MRT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_MRT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Info;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat.Period;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * A utility class to help with building Repeat objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " *     {@code Repeat ab \u003d new RepeatBuilder();}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String DEFAULT_INFO \u003d VALID_INFO_MRT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final double DEFAULT_AMOUNT \u003d VALID_AMOUNT_MRT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d VALID_START_DATE_MRT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String DEFAULT_END_DATE \u003d VALID_END_DATE_MRT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String DEFAULT_TAG \u003d \"Others\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String DEFAULT_PERIOD \u003d \"DAILY\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Info info;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Period period;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public RepeatBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        info \u003d new Info(DEFAULT_INFO);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        startDate \u003d new Date(DEFAULT_START_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        endDate \u003d new Date(DEFAULT_END_DATE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        tag \u003d new Tag(DEFAULT_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        period \u003d Period.valueOf(DEFAULT_PERIOD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Sets the {@code Info} of the {@code Repeat} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public RepeatBuilder withInfo(String info) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.info \u003d new Info(info);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Repeat} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public RepeatBuilder withTag(String tag) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.tag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Sets the {@code startDate} of the {@code Repeat} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public RepeatBuilder withStartDate(String date) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.startDate \u003d new Date(date);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Sets the {@code endDate} of the {@code Repeat} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public RepeatBuilder withEndDate(String date) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.endDate \u003d new Date(date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Sets the {@code Amount} of the {@code Repeat} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public RepeatBuilder withAmount(double amount) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Sets the {@code Repeat} of the {@code Repeat} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public RepeatBuilder withPeriod(String period) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.period \u003d Period.valueOf(period);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public Repeat build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new Repeat(info, amount, startDate, endDate, tag, period.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 98
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/RepeatUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.repeat.RepeatAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.repeat.RepeatEditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * A utility class for RepeatUtil."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class RepeatUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Returns an add command string for adding the {@code expenditure}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static String getAddCommand(Repeat repeat) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return RepeatAddCommand.COMMAND_WORD + \" \" + getRepeatDetails(repeat);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Returns the part of command string for the given {@code repeat}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static String getRepeatDetails(Repeat repeat) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        sb.append(PREFIX_INFO + repeat.getInfo().fullInfo + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        sb.append(PREFIX_AMOUNT + Double.toString(repeat.getAmount().value) + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        sb.append(PREFIX_START_DATE + repeat.getStartDate().localDate.toString() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        sb.append(PREFIX_END_DATE + repeat.getEndDate().localDate.toString() + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        sb.append(PREFIX_TAG + repeat.getTag().tagName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        sb.append(PREFIX_PERIOD + repeat.getPeriod().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Returns the part of command string for the given {@code EditExpenditureDescriptor}\u0027s details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static String getEditRepeatDescriptorDetails(RepeatEditCommand.EditRepeatDescriptor descriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.getInfo().ifPresent(info -\u003e sb.append(PREFIX_INFO).append(info.fullInfo).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.getAmount().ifPresent(amount -\u003e sb.append(PREFIX_AMOUNT).append(amount.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.getStartDate().ifPresent(startDate -\u003e sb.append(PREFIX_START_DATE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .append(startDate.localDate.toString()).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.getEndDate().ifPresent(endDate -\u003e sb.append(PREFIX_END_DATE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                .append(endDate.localDate.toString()).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.getTag().ifPresent(tag -\u003e sb.append(PREFIX_TAG).append(tag.tagName).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        descriptor.getPeriod().ifPresent(period -\u003e sb.append(PREFIX_PERIOD).append(period.toString()).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 55
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/ReportBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_END_DATE_BUS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_END_DATE_MRT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_GRAPH_BAR_CAPS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_ORGANISATION_MONTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_BUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_MRT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.Report;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * A utility class to help with building Report objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " *     {@code Report ab \u003d new ReportBuilder();}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class ReportBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String DEFAULT_GRAPH_TYPE \u003d VALID_GRAPH_BAR_CAPS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d VALID_START_DATE_MRT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String DEFAULT_END_DATE \u003d VALID_END_DATE_MRT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Report.GraphType graphType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private String organise;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public ReportBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            this.graphType \u003d Report.GraphType.mapToGraphType(DEFAULT_GRAPH_TYPE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.startDate \u003d new Date(VALID_START_DATE_BUS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.endDate \u003d new Date(VALID_END_DATE_BUS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.organise \u003d VALID_ORGANISATION_MONTH;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Sets the {@code graphType} of the {@code graphType} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public ReportBuilder withGraphType(String graphType) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            this.graphType \u003d Report.GraphType.mapToGraphType(graphType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Sets the {@code startDate} of the {@code report} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public ReportBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.startDate \u003d new Date(startDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Sets the {@code endDate} of the {@code report} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public ReportBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.endDate \u003d new Date(endDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *  Sets the {@code organise} of the {@code report} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportBuilder withOrganise(String organise) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.organise \u003d organise;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public Report build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new Report(startDate, endDate, graphType, organise);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 25,
      "sp-shaopeng": 55
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/ReportUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_GRAPH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_ORGANISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.report.ExportReportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.report.PrintReportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.logic.commands.report.ViewReportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.saveit.model.report.Report;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * A utility class for ReportUtil."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class ReportUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Returns an VIEW command string for viewing report {@code report}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static String getReportViewCommand(Report report) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return ViewReportCommand.COMMAND_WORD + \" \" + getReportDetails(report);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Returns an export command string for export report {@code report}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static String getReportExportCommand(Report report, String fileName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return ExportReportCommand.COMMAND_WORD + \" \" + getReportDetails(report) + PREFIX_FILENAME + fileName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Returns an print command string for print report {@code report}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static String getReportPrintCommand(Report report) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return PrintReportCommand.COMMAND_WORD + \" \" + getReportDetails(report);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Returns the part of command string for the given {@code repeat}\u0027s details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static String getReportDetails(Report report) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        sb.append(PREFIX_START_DATE + report.getStartDate().localDate.toString() + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        sb.append(PREFIX_END_DATE + report.getEndDate().localDate.toString() + \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        sb.append(PREFIX_GRAPH + report.getFormat().toString().toLowerCase() + \" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        sb.append(PREFIX_ORGANISE + report.getOrganise() + \" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 8,
      "sp-shaopeng": 46
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns the middle index of the expenditure in the {@code model}\u0027s expenditure list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenditureList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns the last index of the expenditure in the {@code model}\u0027s expenditure list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenditureList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns the expenditure in the {@code model}\u0027s expenditure list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static Expenditure getExpenditure(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return model.getFilteredExpenditureList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 8,
      "-": 44,
      "JJiahui": 3
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/TypicalAccounts.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.DANIEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.ELLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.FIONA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.TypicalExpenditures.GEORGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.AccountList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * A utility class containing a list of {@code Expenditure} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class TypicalAccounts {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Account SCHOOL \u003d new AccountBuilder(\"school\").withExpenditure(ALICE)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withExpenditure(BENSON).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final Account WORK \u003d new AccountBuilder(\"work\").withExpenditure(CARL).withExpenditure(DANIEL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Account CCA \u003d new AccountBuilder(\"cca\").withExpenditure(ELLE)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withExpenditure(FIONA).withExpenditure(GEORGE).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private TypicalAccounts() {} // prevents instantiation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns an {@code Account} with all the typical expenditures."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static AccountList getTypicalAccountList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList ab \u003d new AccountList(false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        List \u003cAccount\u003e allAccount \u003d Arrays.asList(SCHOOL, WORK, CCA);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        for (Account account : allAccount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            ab.addAccount(account);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        ab.updateActiveAccount(\"school\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static Account getTypicalAccounts() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return SCHOOL;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 4,
      "zwasd": 19,
      "JJiahui": 22
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/TypicalExpenditures.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_AMOUNT_BUS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_AMOUNT_MRT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DATE_BUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DATE_MRT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_INFO_BUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_INFO_MRT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_BUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * A utility class containing a list of {@code Expenditure} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class TypicalExpenditures {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final Expenditure ALICE \u003d new ExpenditureBuilder().withInfo(\"Alice Pauline\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withDate(\"2019-09-11\").withAmount(3.14)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withTag(\"friends\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final Expenditure BENSON \u003d new ExpenditureBuilder().withInfo(\"Benson Meier\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withDate(\"2019-09-11\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            .withAmount(3.14)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withTag(\"owesMoney\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Expenditure CARL \u003d new ExpenditureBuilder().withInfo(\"Carl Kurz\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withAmount(3.14).withDate(\"2019-09-11\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Expenditure DANIEL \u003d new ExpenditureBuilder().withInfo(\"Daniel Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withAmount(3.14).withDate(\"2019-09-11\").withTag(\"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Expenditure ELLE \u003d new ExpenditureBuilder().withInfo(\"Elle Meyer\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withAmount(3.14).withDate(\"2019-09-11\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Expenditure FIONA \u003d new ExpenditureBuilder().withInfo(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withAmount(3.14).withDate(\"2019-09-11\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Expenditure GEORGE \u003d new ExpenditureBuilder().withInfo(\"George Best\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withAmount(3.14).withDate(\"2019-09-11\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Expenditure HOON \u003d new ExpenditureBuilder().withInfo(\"Hoon Meier\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withAmount(3.14).withDate(\"2019-09-11\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Expenditure IDA \u003d new ExpenditureBuilder().withInfo(\"Ida Mueller\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withAmount(3.14).withDate(\"2019-09-11\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    // Manually added - Expenditure\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Expenditure AMY \u003d new ExpenditureBuilder().withInfo(VALID_INFO_BUS)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withAmount(VALID_AMOUNT_BUS).withDate(VALID_DATE_BUS).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Expenditure BOB \u003d new ExpenditureBuilder().withInfo(VALID_INFO_MRT)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withAmount(VALID_AMOUNT_MRT).withDate(VALID_DATE_MRT).withTag(VALID_TAG_BUS)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private TypicalExpenditures() {} // prevents instantiation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns an {@code Account} with all the typical expenditures."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static Account getTypicalAccount() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Account ab \u003d new Account();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        for (Expenditure expenditure : getTypicalExpenditures()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            ab.addExpenditure(expenditure);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static List\u003cExpenditure\u003e getTypicalExpenditures() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "sp-shaopeng": 14,
      "zwasd": 20,
      "-": 27,
      "JJiahui": 10
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Index INDEX_FIRST_EXPENDITURE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Index INDEX_SECOND_EXPENDITURE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Index INDEX_THIRD_EXPENDITURE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Index INDEX_FIRST_REPEAT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Index INDEX_SECOND_REPEAT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Index INDEX_THIRD_REPEAT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 4,
      "zwasd": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/saveit/testutil/TypicalRepeats.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "package seedu.saveit.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_AMOUNT_BUS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_AMOUNT_MRT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_DAILY_PERIOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_END_DATE_BUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_END_DATE_MRT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_INFO_BUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_INFO_MRT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_BUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_START_DATE_MRT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.saveit.logic.commands.CommandTestUtil.VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.Account;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.saveit.model.expenditure.Repeat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * A utility class containing a list of {@code Repeat} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class TypicalRepeats {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Repeat ALICE \u003d new RepeatBuilder().withInfo(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withStartDate(\"2019-09-11\").withEndDate(\"2020-09-11\").withAmount(3.14)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withTag(\"friends\").withPeriod(\"DAILY\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Repeat BENSON \u003d new RepeatBuilder().withInfo(\"Benson Meier\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withStartDate(\"2019-09-11\").withEndDate(\"2019-09-13\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withAmount(3.14)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withTag(\"owesMoney\").withPeriod(\"DAILY\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Repeat CARL \u003d new RepeatBuilder().withInfo(\"Carl Kurz\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withAmount(3.14).withStartDate(\"2019-09-11\").withEndDate(\"2020-09-11\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withPeriod(\"MONTHLY\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Repeat DANIEL \u003d new RepeatBuilder().withInfo(\"Daniel Meier\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withAmount(3.14).withStartDate(\"2019-09-11\").withEndDate(\"2019-09-13\").withTag(\"friends\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withPeriod(\"DAILY\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Repeat ELLE \u003d new RepeatBuilder().withInfo(\"Elle Meyer\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withAmount(3.14).withStartDate(\"2019-09-11\").withEndDate(\"2019-09-13\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withPeriod(\"DAILY\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Repeat FIONA \u003d new RepeatBuilder().withInfo(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withAmount(3.14).withStartDate(\"2019-09-11\").withEndDate(\"2019-09-13\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withPeriod(\"MONTHLY\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Repeat GEORGE \u003d new RepeatBuilder().withInfo(\"George Best\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withAmount(3.14).withStartDate(\"2019-09-11\").withEndDate(\"2019-09-13\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withPeriod(\"DAILY\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Repeat HOON \u003d new RepeatBuilder().withInfo(\"Hoon Meier\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withAmount(3.14).withStartDate(\"2019-09-11\").withEndDate(\"2019-09-13\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withPeriod(\"DAILY\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Repeat IDA \u003d new RepeatBuilder().withInfo(\"Ida Mueller\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withAmount(3.14).withStartDate(\"2019-09-11\").withEndDate(\"2019-09-13\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withPeriod(\"DAILY\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    // Manually added - Repeat\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Repeat AMY \u003d new RepeatBuilder().withInfo(VALID_INFO_BUS)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withAmount(VALID_AMOUNT_BUS).withStartDate(VALID_START_DATE_BUS)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withEndDate(VALID_END_DATE_BUS).withPeriod(VALID_DAILY_PERIOD).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final Repeat BOB \u003d new RepeatBuilder().withInfo(VALID_INFO_MRT)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withAmount(VALID_AMOUNT_MRT).withStartDate(VALID_START_DATE_MRT)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .withEndDate(VALID_END_DATE_MRT).withTag(VALID_TAG_TRANSPORT).withPeriod(VALID_DAILY_PERIOD)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private TypicalRepeats() {} // prevents instantiation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Returns an {@code Account} with all the typical repeats."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static Account getTypicalAccount() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Account ab \u003d new Account();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        for (Repeat repeat : getTypicalRepeats()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            ab.addRepeat(repeat);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static List\u003cRepeat\u003e getTypicalRepeats() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 84
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/saveit/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.saveit.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.saveit.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.saveit.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "\u003c?import seedu.saveit.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "\u003cfx:root type\u003d\"seedu.saveit.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 5
    }
  }
]
